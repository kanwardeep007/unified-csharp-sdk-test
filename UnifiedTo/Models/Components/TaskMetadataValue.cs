//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace UnifiedTo.Models.Components
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    using UnifiedTo.Models.Components;
    using UnifiedTo.Utils;
    

    public class TaskMetadataValueType
    {
        private TaskMetadataValueType(string value) { Value = value; }

        public string Value { get; private set; }
        public static TaskMetadataValueType TaskMetadataSchemas1 { get { return new TaskMetadataValueType("TaskMetadata_Schemas_1"); } }
        
        public static TaskMetadataValueType TaskMetadataSchemas2 { get { return new TaskMetadataValueType("TaskMetadata_Schemas_2"); } }
        
        public static TaskMetadataValueType TaskMetadataSchemas3 { get { return new TaskMetadataValueType("TaskMetadata_Schemas_3"); } }
        
        public static TaskMetadataValueType TaskMetadataSchemas4 { get { return new TaskMetadataValueType("TaskMetadata_Schemas_4"); } }
        
        public static TaskMetadataValueType TaskMetadataSchemas5 { get { return new TaskMetadataValueType("TaskMetadata_Schemas_5"); } }
        
        public static TaskMetadataValueType Null { get { return new TaskMetadataValueType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(TaskMetadataValueType v) { return v.Value; }
        public static TaskMetadataValueType FromString(string v) {
            switch(v) {
                case "TaskMetadata_Schemas_1": return TaskMetadataSchemas1;
                case "TaskMetadata_Schemas_2": return TaskMetadataSchemas2;
                case "TaskMetadata_Schemas_3": return TaskMetadataSchemas3;
                case "TaskMetadata_Schemas_4": return TaskMetadataSchemas4;
                case "TaskMetadata_Schemas_5": return TaskMetadataSchemas5;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for TaskMetadataValueType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((TaskMetadataValueType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(TaskMetadataValue.TaskMetadataValueConverter))]
    public class TaskMetadataValue {
        public TaskMetadataValue(TaskMetadataValueType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public TaskMetadataSchemas1? TaskMetadataSchemas1 { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public TaskMetadataSchemas2? TaskMetadataSchemas2 { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public TaskMetadataSchemas3? TaskMetadataSchemas3 { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public TaskMetadataSchemas4? TaskMetadataSchemas4 { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public TaskMetadataSchemas5? TaskMetadataSchemas5 { get; set; }

        public TaskMetadataValueType Type { get; set; }


        public static TaskMetadataValue CreateTaskMetadataSchemas1(TaskMetadataSchemas1 taskMetadataSchemas1) {
            TaskMetadataValueType typ = TaskMetadataValueType.TaskMetadataSchemas1;

            TaskMetadataValue res = new TaskMetadataValue(typ);
            res.TaskMetadataSchemas1 = taskMetadataSchemas1;
            return res;
        }

        public static TaskMetadataValue CreateTaskMetadataSchemas2(TaskMetadataSchemas2 taskMetadataSchemas2) {
            TaskMetadataValueType typ = TaskMetadataValueType.TaskMetadataSchemas2;

            TaskMetadataValue res = new TaskMetadataValue(typ);
            res.TaskMetadataSchemas2 = taskMetadataSchemas2;
            return res;
        }

        public static TaskMetadataValue CreateTaskMetadataSchemas3(TaskMetadataSchemas3 taskMetadataSchemas3) {
            TaskMetadataValueType typ = TaskMetadataValueType.TaskMetadataSchemas3;

            TaskMetadataValue res = new TaskMetadataValue(typ);
            res.TaskMetadataSchemas3 = taskMetadataSchemas3;
            return res;
        }

        public static TaskMetadataValue CreateTaskMetadataSchemas4(TaskMetadataSchemas4 taskMetadataSchemas4) {
            TaskMetadataValueType typ = TaskMetadataValueType.TaskMetadataSchemas4;

            TaskMetadataValue res = new TaskMetadataValue(typ);
            res.TaskMetadataSchemas4 = taskMetadataSchemas4;
            return res;
        }

        public static TaskMetadataValue CreateTaskMetadataSchemas5(TaskMetadataSchemas5 taskMetadataSchemas5) {
            TaskMetadataValueType typ = TaskMetadataValueType.TaskMetadataSchemas5;

            TaskMetadataValue res = new TaskMetadataValue(typ);
            res.TaskMetadataSchemas5 = taskMetadataSchemas5;
            return res;
        }

        public static TaskMetadataValue CreateNull() {
            TaskMetadataValueType typ = TaskMetadataValueType.Null;
            return new TaskMetadataValue(typ);
        }

        public class TaskMetadataValueConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(TaskMetadataValue);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                var json = JRaw.Create(reader).ToString();
                if (json == "null")
                {
                    return null;
                }

                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new TaskMetadataValue(TaskMetadataValueType.TaskMetadataSchemas1)
                    {
                        TaskMetadataSchemas1 = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<TaskMetadataSchemas1>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(TaskMetadataSchemas1), new TaskMetadataValue(TaskMetadataValueType.TaskMetadataSchemas1), "TaskMetadataSchemas1"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new TaskMetadataValue(TaskMetadataValueType.TaskMetadataSchemas2)
                    {
                        TaskMetadataSchemas2 = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<TaskMetadataSchemas2>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(TaskMetadataSchemas2), new TaskMetadataValue(TaskMetadataValueType.TaskMetadataSchemas2), "TaskMetadataSchemas2"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new TaskMetadataValue(TaskMetadataValueType.TaskMetadataSchemas3)
                    {
                        TaskMetadataSchemas3 = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<TaskMetadataSchemas3>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(TaskMetadataSchemas3), new TaskMetadataValue(TaskMetadataValueType.TaskMetadataSchemas3), "TaskMetadataSchemas3"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new TaskMetadataValue(TaskMetadataValueType.TaskMetadataSchemas4)
                    {
                        TaskMetadataSchemas4 = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<TaskMetadataSchemas4>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(TaskMetadataSchemas4), new TaskMetadataValue(TaskMetadataValueType.TaskMetadataSchemas4), "TaskMetadataSchemas4"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new TaskMetadataValue(TaskMetadataValueType.TaskMetadataSchemas5)
                    {
                        TaskMetadataSchemas5 = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<TaskMetadataSchemas5>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(TaskMetadataSchemas5), new TaskMetadataValue(TaskMetadataValueType.TaskMetadataSchemas5), "TaskMetadataSchemas5"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                TaskMetadataValue res = (TaskMetadataValue)value;
                if (TaskMetadataValueType.FromString(res.Type).Equals(TaskMetadataValueType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.TaskMetadataSchemas1 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.TaskMetadataSchemas1));
                    return;
                }
                if (res.TaskMetadataSchemas2 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.TaskMetadataSchemas2));
                    return;
                }
                if (res.TaskMetadataSchemas3 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.TaskMetadataSchemas3));
                    return;
                }
                if (res.TaskMetadataSchemas4 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.TaskMetadataSchemas4));
                    return;
                }
                if (res.TaskMetadataSchemas5 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.TaskMetadataSchemas5));
                    return;
                }

            }

        }

    }
}