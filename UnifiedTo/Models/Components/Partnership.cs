//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace UnifiedTo.Models.Components
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    using UnifiedTo.Models.Components;
    using UnifiedTo.Utils;
    

    public class PartnershipType
    {
        private PartnershipType(string value) { Value = value; }

        public string Value { get; private set; }
        public static PartnershipType IntegrationSchemas1 { get { return new PartnershipType("Integration_Schemas_1"); } }
        
        public static PartnershipType IntegrationSchemas2 { get { return new PartnershipType("Integration_Schemas_2"); } }
        
        public static PartnershipType IntegrationSchemas3 { get { return new PartnershipType("Integration_Schemas_3"); } }
        
        public static PartnershipType IntegrationSchemas4 { get { return new PartnershipType("Integration_Schemas_4"); } }
        
        public static PartnershipType IntegrationSchemas5 { get { return new PartnershipType("Integration_Schemas_5"); } }
        
        public static PartnershipType Null { get { return new PartnershipType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(PartnershipType v) { return v.Value; }
        public static PartnershipType FromString(string v) {
            switch(v) {
                case "Integration_Schemas_1": return IntegrationSchemas1;
                case "Integration_Schemas_2": return IntegrationSchemas2;
                case "Integration_Schemas_3": return IntegrationSchemas3;
                case "Integration_Schemas_4": return IntegrationSchemas4;
                case "Integration_Schemas_5": return IntegrationSchemas5;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for PartnershipType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((PartnershipType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(Partnership.PartnershipConverter))]
    public class Partnership {
        public Partnership(PartnershipType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public IntegrationSchemas1? IntegrationSchemas1 { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public IntegrationSchemas2? IntegrationSchemas2 { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public IntegrationSchemas3? IntegrationSchemas3 { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public IntegrationSchemas4? IntegrationSchemas4 { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public IntegrationSchemas5? IntegrationSchemas5 { get; set; }

        public PartnershipType Type { get; set; }


        public static Partnership CreateIntegrationSchemas1(IntegrationSchemas1 integrationSchemas1) {
            PartnershipType typ = PartnershipType.IntegrationSchemas1;

            Partnership res = new Partnership(typ);
            res.IntegrationSchemas1 = integrationSchemas1;
            return res;
        }

        public static Partnership CreateIntegrationSchemas2(IntegrationSchemas2 integrationSchemas2) {
            PartnershipType typ = PartnershipType.IntegrationSchemas2;

            Partnership res = new Partnership(typ);
            res.IntegrationSchemas2 = integrationSchemas2;
            return res;
        }

        public static Partnership CreateIntegrationSchemas3(IntegrationSchemas3 integrationSchemas3) {
            PartnershipType typ = PartnershipType.IntegrationSchemas3;

            Partnership res = new Partnership(typ);
            res.IntegrationSchemas3 = integrationSchemas3;
            return res;
        }

        public static Partnership CreateIntegrationSchemas4(IntegrationSchemas4 integrationSchemas4) {
            PartnershipType typ = PartnershipType.IntegrationSchemas4;

            Partnership res = new Partnership(typ);
            res.IntegrationSchemas4 = integrationSchemas4;
            return res;
        }

        public static Partnership CreateIntegrationSchemas5(IntegrationSchemas5 integrationSchemas5) {
            PartnershipType typ = PartnershipType.IntegrationSchemas5;

            Partnership res = new Partnership(typ);
            res.IntegrationSchemas5 = integrationSchemas5;
            return res;
        }

        public static Partnership CreateNull() {
            PartnershipType typ = PartnershipType.Null;
            return new Partnership(typ);
        }

        public class PartnershipConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(Partnership);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                var json = JRaw.Create(reader).ToString();
                if (json == "null")
                {
                    return null;
                }

                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new Partnership(PartnershipType.IntegrationSchemas1)
                    {
                        IntegrationSchemas1 = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<IntegrationSchemas1>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(IntegrationSchemas1), new Partnership(PartnershipType.IntegrationSchemas1), "IntegrationSchemas1"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Partnership(PartnershipType.IntegrationSchemas2)
                    {
                        IntegrationSchemas2 = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<IntegrationSchemas2>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(IntegrationSchemas2), new Partnership(PartnershipType.IntegrationSchemas2), "IntegrationSchemas2"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Partnership(PartnershipType.IntegrationSchemas3)
                    {
                        IntegrationSchemas3 = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<IntegrationSchemas3>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(IntegrationSchemas3), new Partnership(PartnershipType.IntegrationSchemas3), "IntegrationSchemas3"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Partnership(PartnershipType.IntegrationSchemas4)
                    {
                        IntegrationSchemas4 = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<IntegrationSchemas4>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(IntegrationSchemas4), new Partnership(PartnershipType.IntegrationSchemas4), "IntegrationSchemas4"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Partnership(PartnershipType.IntegrationSchemas5)
                    {
                        IntegrationSchemas5 = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<IntegrationSchemas5>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(IntegrationSchemas5), new Partnership(PartnershipType.IntegrationSchemas5), "IntegrationSchemas5"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                Partnership res = (Partnership)value;
                if (PartnershipType.FromString(res.Type).Equals(PartnershipType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.IntegrationSchemas1 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.IntegrationSchemas1));
                    return;
                }
                if (res.IntegrationSchemas2 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.IntegrationSchemas2));
                    return;
                }
                if (res.IntegrationSchemas3 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.IntegrationSchemas3));
                    return;
                }
                if (res.IntegrationSchemas4 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.IntegrationSchemas4));
                    return;
                }
                if (res.IntegrationSchemas5 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.IntegrationSchemas5));
                    return;
                }

            }

        }

    }
}