//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace UnifiedTo.Models.Components
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    using UnifiedTo.Models.Components;
    using UnifiedTo.Utils;
    

    public class ThreeType
    {
        private ThreeType(string value) { Value = value; }

        public string Value { get; private set; }
        public static ThreeType Number { get { return new ThreeType("number"); } }
        
        public static ThreeType AtsMetadataSchemasExtraData32 { get { return new ThreeType("AtsMetadata_Schemas_extra_data_3_2"); } }
        
        public static ThreeType Null { get { return new ThreeType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(ThreeType v) { return v.Value; }
        public static ThreeType FromString(string v) {
            switch(v) {
                case "number": return Number;
                case "AtsMetadata_Schemas_extra_data_3_2": return AtsMetadataSchemasExtraData32;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for ThreeType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((ThreeType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(Three.ThreeConverter))]
    public class Three {
        public Three(ThreeType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public double? Number { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public AtsMetadataSchemasExtraData32? AtsMetadataSchemasExtraData32 { get; set; }

        public ThreeType Type { get; set; }


        public static Three CreateNumber(double number) {
            ThreeType typ = ThreeType.Number;

            Three res = new Three(typ);
            res.Number = number;
            return res;
        }

        public static Three CreateAtsMetadataSchemasExtraData32(AtsMetadataSchemasExtraData32 atsMetadataSchemasExtraData32) {
            ThreeType typ = ThreeType.AtsMetadataSchemasExtraData32;

            Three res = new Three(typ);
            res.AtsMetadataSchemasExtraData32 = atsMetadataSchemasExtraData32;
            return res;
        }

        public static Three CreateNull() {
            ThreeType typ = ThreeType.Null;
            return new Three(typ);
        }

        public class ThreeConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(Three);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                var json = JRaw.Create(reader).ToString();
                if (json == "null")
                {
                    return null;
                }

                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new Three(ThreeType.AtsMetadataSchemasExtraData32)
                    {
                        AtsMetadataSchemasExtraData32 = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<AtsMetadataSchemasExtraData32>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(AtsMetadataSchemasExtraData32), new Three(ThreeType.AtsMetadataSchemasExtraData32), "AtsMetadataSchemasExtraData32"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    var converted = Convert.ToDouble(json);
                    return new Three(ThreeType.Number)
                    {
                        Number = converted
                    };
                }
                catch (System.FormatException)
                {
                    // try next option
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                Three res = (Three)value;
                if (ThreeType.FromString(res.Type).Equals(ThreeType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.Number != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Number));
                    return;
                }
                if (res.AtsMetadataSchemasExtraData32 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.AtsMetadataSchemasExtraData32));
                    return;
                }

            }

        }

    }
}