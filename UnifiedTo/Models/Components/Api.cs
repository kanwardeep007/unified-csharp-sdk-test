//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace UnifiedTo.Models.Components
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    using UnifiedTo.Models.Components;
    using UnifiedTo.Utils;
    

    public class ApiType
    {
        private ApiType(string value) { Value = value; }

        public string Value { get; private set; }
        public static ApiType Integration1 { get { return new ApiType("Integration_1"); } }
        
        public static ApiType Integration2 { get { return new ApiType("Integration_2"); } }
        
        public static ApiType Integration3 { get { return new ApiType("Integration_3"); } }
        
        public static ApiType Integration4 { get { return new ApiType("Integration_4"); } }
        
        public static ApiType Integration5 { get { return new ApiType("Integration_5"); } }
        
        public static ApiType Null { get { return new ApiType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(ApiType v) { return v.Value; }
        public static ApiType FromString(string v) {
            switch(v) {
                case "Integration_1": return Integration1;
                case "Integration_2": return Integration2;
                case "Integration_3": return Integration3;
                case "Integration_4": return Integration4;
                case "Integration_5": return Integration5;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for ApiType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((ApiType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(Api.ApiConverter))]
    public class Api {
        public Api(ApiType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public Integration1? Integration1 { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public Integration2? Integration2 { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public Integration3? Integration3 { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public Integration4? Integration4 { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public Integration5? Integration5 { get; set; }

        public ApiType Type { get; set; }


        public static Api CreateIntegration1(Integration1 integration1) {
            ApiType typ = ApiType.Integration1;

            Api res = new Api(typ);
            res.Integration1 = integration1;
            return res;
        }

        public static Api CreateIntegration2(Integration2 integration2) {
            ApiType typ = ApiType.Integration2;

            Api res = new Api(typ);
            res.Integration2 = integration2;
            return res;
        }

        public static Api CreateIntegration3(Integration3 integration3) {
            ApiType typ = ApiType.Integration3;

            Api res = new Api(typ);
            res.Integration3 = integration3;
            return res;
        }

        public static Api CreateIntegration4(Integration4 integration4) {
            ApiType typ = ApiType.Integration4;

            Api res = new Api(typ);
            res.Integration4 = integration4;
            return res;
        }

        public static Api CreateIntegration5(Integration5 integration5) {
            ApiType typ = ApiType.Integration5;

            Api res = new Api(typ);
            res.Integration5 = integration5;
            return res;
        }

        public static Api CreateNull() {
            ApiType typ = ApiType.Null;
            return new Api(typ);
        }

        public class ApiConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(Api);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                var json = JRaw.Create(reader).ToString();
                if (json == "null")
                {
                    return null;
                }

                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new Api(ApiType.Integration1)
                    {
                        Integration1 = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<Integration1>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(Integration1), new Api(ApiType.Integration1), "Integration1"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Api(ApiType.Integration2)
                    {
                        Integration2 = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<Integration2>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(Integration2), new Api(ApiType.Integration2), "Integration2"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Api(ApiType.Integration3)
                    {
                        Integration3 = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<Integration3>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(Integration3), new Api(ApiType.Integration3), "Integration3"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Api(ApiType.Integration4)
                    {
                        Integration4 = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<Integration4>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(Integration4), new Api(ApiType.Integration4), "Integration4"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Api(ApiType.Integration5)
                    {
                        Integration5 = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<Integration5>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(Integration5), new Api(ApiType.Integration5), "Integration5"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                Api res = (Api)value;
                if (ApiType.FromString(res.Type).Equals(ApiType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.Integration1 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Integration1));
                    return;
                }
                if (res.Integration2 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Integration2));
                    return;
                }
                if (res.Integration3 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Integration3));
                    return;
                }
                if (res.Integration4 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Integration4));
                    return;
                }
                if (res.Integration5 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Integration5));
                    return;
                }

            }

        }

    }
}