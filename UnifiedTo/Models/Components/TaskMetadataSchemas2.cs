//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace UnifiedTo.Models.Components
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    using UnifiedTo.Models.Components;
    using UnifiedTo.Utils;
    

    public class TaskMetadataSchemas2Type
    {
        private TaskMetadataSchemas2Type(string value) { Value = value; }

        public string Value { get; private set; }
        public static TaskMetadataSchemas2Type Str { get { return new TaskMetadataSchemas2Type("str"); } }
        
        public static TaskMetadataSchemas2Type TaskMetadataSchemasValue2 { get { return new TaskMetadataSchemas2Type("TaskMetadata_Schemas_value_2"); } }
        
        public static TaskMetadataSchemas2Type Null { get { return new TaskMetadataSchemas2Type("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(TaskMetadataSchemas2Type v) { return v.Value; }
        public static TaskMetadataSchemas2Type FromString(string v) {
            switch(v) {
                case "str": return Str;
                case "TaskMetadata_Schemas_value_2": return TaskMetadataSchemasValue2;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for TaskMetadataSchemas2Type");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((TaskMetadataSchemas2Type)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(TaskMetadataSchemas2.TaskMetadataSchemas2Converter))]
    public class TaskMetadataSchemas2 {
        public TaskMetadataSchemas2(TaskMetadataSchemas2Type type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public string? Str { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public TaskMetadataSchemasValue2? TaskMetadataSchemasValue2 { get; set; }

        public TaskMetadataSchemas2Type Type { get; set; }


        public static TaskMetadataSchemas2 CreateStr(string str) {
            TaskMetadataSchemas2Type typ = TaskMetadataSchemas2Type.Str;

            TaskMetadataSchemas2 res = new TaskMetadataSchemas2(typ);
            res.Str = str;
            return res;
        }

        public static TaskMetadataSchemas2 CreateTaskMetadataSchemasValue2(TaskMetadataSchemasValue2 taskMetadataSchemasValue2) {
            TaskMetadataSchemas2Type typ = TaskMetadataSchemas2Type.TaskMetadataSchemasValue2;

            TaskMetadataSchemas2 res = new TaskMetadataSchemas2(typ);
            res.TaskMetadataSchemasValue2 = taskMetadataSchemasValue2;
            return res;
        }

        public static TaskMetadataSchemas2 CreateNull() {
            TaskMetadataSchemas2Type typ = TaskMetadataSchemas2Type.Null;
            return new TaskMetadataSchemas2(typ);
        }

        public class TaskMetadataSchemas2Converter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(TaskMetadataSchemas2);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                var json = JRaw.Create(reader).ToString();
                if (json == "null")
                {
                    return null;
                }

                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new TaskMetadataSchemas2(TaskMetadataSchemas2Type.TaskMetadataSchemasValue2)
                    {
                        TaskMetadataSchemasValue2 = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<TaskMetadataSchemasValue2>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(TaskMetadataSchemasValue2), new TaskMetadataSchemas2(TaskMetadataSchemas2Type.TaskMetadataSchemasValue2), "TaskMetadataSchemasValue2"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (json[0] == '"' && json[^1] == '"'){
                    return new TaskMetadataSchemas2(TaskMetadataSchemas2Type.Str)
                    {
                        Str = json[1..^1]
                    };
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                TaskMetadataSchemas2 res = (TaskMetadataSchemas2)value;
                if (TaskMetadataSchemas2Type.FromString(res.Type).Equals(TaskMetadataSchemas2Type.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.Str != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Str));
                    return;
                }
                if (res.TaskMetadataSchemasValue2 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.TaskMetadataSchemasValue2));
                    return;
                }

            }

        }

    }
}