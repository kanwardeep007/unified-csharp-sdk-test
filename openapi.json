{
    "openapi": "3.0.0",
    "info": {
       "title": "Unified.to API",
       "version": "1.0",
       "description": "One API to Rule Them All",
       "contact": {
          "email": "hello@unified.to",
          "url": "https://unified.to/contact"
       },
       "termsOfService": "https://unified.to/tos"
    },
    "tags": [
       {
          "name": "unifiedapi",
          "description": "Unified.to API"
       },
       {
          "name": "unified"
       },
       {
          "name": "connection"
       },
       {
          "name": "issue"
       },
       {
          "name": "integration"
       },
       {
          "name": "webhook"
       },
       {
          "name": "apicall"
       },
       {
          "name": "auth"
       },
       {
          "name": "login"
       },
       {
          "name": "messaging"
       },
       {
          "name": "channel"
       },
       {
          "name": "message"
       },
       {
          "name": "crm"
       },
       {
          "name": "deal"
       },
       {
          "name": "contact"
       },
       {
          "name": "company"
       },
       {
          "name": "event"
       },
       {
          "name": "lead"
       },
       {
          "name": "pipeline"
       },
       {
          "name": "martech"
       },
       {
          "name": "list"
       },
       {
          "name": "member"
       },
       {
          "name": "ticketing"
       },
       {
          "name": "ticket"
       },
       {
          "name": "customer"
       },
       {
          "name": "note"
       },
       {
          "name": "category"
       },
       {
          "name": "enrich"
       },
       {
          "name": "person"
       },
       {
          "name": "uc"
       },
       {
          "name": "call"
       },
       {
          "name": "comment"
       },
       {
          "name": "recording"
       },
       {
          "name": "ats"
       },
       {
          "name": "activity"
       },
       {
          "name": "candidate"
       },
       {
          "name": "job"
       },
       {
          "name": "interview"
       },
       {
          "name": "document"
       },
       {
          "name": "applicationstatus"
       },
       {
          "name": "application"
       },
       {
          "name": "scorecard"
       },
       {
          "name": "hris"
       },
       {
          "name": "employee"
       },
       {
          "name": "location"
       },
       {
          "name": "group"
       },
       {
          "name": "timeoff"
       },
       {
          "name": "payslip"
       },
       {
          "name": "device"
       },
       {
          "name": "timeshift"
       },
       {
          "name": "verification"
       },
       {
          "name": "package"
       },
       {
          "name": "request"
       },
       {
          "name": "passthrough"
       },
       {
          "name": "accounting"
       },
       {
          "name": "account"
       },
       {
          "name": "journal"
       },
       {
          "name": "transaction"
       },
       {
          "name": "invoice"
       },
       {
          "name": "bill"
       },
       {
          "name": "creditmemo"
       },
       {
          "name": "taxrate"
       },
       {
          "name": "organization"
       },
       {
          "name": "order"
       },
       {
          "name": "purchaseorder"
       },
       {
          "name": "salesorder"
       },
       {
          "name": "report"
       },
       {
          "name": "balancesheet"
       },
       {
          "name": "trialbalance"
       },
       {
          "name": "profitloss"
       },
       {
          "name": "storage"
       },
       {
          "name": "file"
       },
       {
          "name": "commerce"
       },
       {
          "name": "item"
       },
       {
          "name": "collection"
       },
       {
          "name": "inventory"
       },
       {
          "name": "review"
       },
       {
          "name": "payment"
       },
       {
          "name": "link"
       },
       {
          "name": "refund"
       },
       {
          "name": "payout"
       },
       {
          "name": "subscription"
       },
       {
          "name": "genai"
       },
       {
          "name": "model"
       },
       {
          "name": "prompt"
       },
       {
          "name": "embedding"
       },
       {
          "name": "kms"
       },
       {
          "name": "space"
       },
       {
          "name": "page"
       },
       {
          "name": "task"
       },
       {
          "name": "project"
       },
       {
          "name": "change"
       },
       {
          "name": "scim"
       },
       {
          "name": "user"
       },
       {
          "name": "calendar"
       },
       {
          "name": "busy"
       },
       {
          "name": "lms"
       },
       {
          "name": "course"
       },
       {
          "name": "class"
       },
       {
          "name": "student"
       },
       {
          "name": "instructor"
       },
       {
          "name": "repo"
       },
       {
          "name": "repository"
       },
       {
          "name": "branch"
       },
       {
          "name": "commit"
       },
       {
          "name": "pullrequest"
       },
       {
          "name": "metadata"
       }
    ],
    "security": [
       {
          "jwt": []
       }
    ],
    "servers": [
       {
          "url": "https://api.unified.to",
          "description": "North American data region"
       },
       {
          "url": "https://api-eu.unified.to",
          "description": "European data region"
       },
       {
          "url": "https://api-au.unified.to",
          "description": "Australian data region"
       }
    ],
    "components": {
       "securitySchemes": {
          "jwt": {
             "type": "apiKey",
             "name": "authorization",
             "in": "header"
          }
       },
       "requestBodies": {
          "Connection": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/Connection"
                   }
                }
             }
          },
          "Webhook": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/Webhook"
                   }
                }
             }
          },
          "MessagingMessage": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/MessagingMessage"
                   }
                }
             }
          },
          "CrmDeal": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/CrmDeal"
                   }
                }
             }
          },
          "CrmContact": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/CrmContact"
                   }
                }
             }
          },
          "CrmCompany": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/CrmCompany"
                   }
                }
             }
          },
          "CrmEvent": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/CrmEvent"
                   }
                }
             }
          },
          "CrmLead": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/CrmLead"
                   }
                }
             }
          },
          "CrmPipeline": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/CrmPipeline"
                   }
                }
             }
          },
          "MarketingList": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/MarketingList"
                   }
                }
             }
          },
          "MarketingMember": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/MarketingMember"
                   }
                }
             }
          },
          "TicketingTicket": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/TicketingTicket"
                   }
                }
             }
          },
          "TicketingCustomer": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/TicketingCustomer"
                   }
                }
             }
          },
          "TicketingNote": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/TicketingNote"
                   }
                }
             }
          },
          "TicketingCategory": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/TicketingCategory"
                   }
                }
             }
          },
          "UcContact": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/UcContact"
                   }
                }
             }
          },
          "UcComment": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/UcComment"
                   }
                }
             }
          },
          "UcRecording": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/UcRecording"
                   }
                }
             }
          },
          "AtsActivity": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/AtsActivity"
                   }
                }
             }
          },
          "AtsCandidate": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/AtsCandidate"
                   }
                }
             }
          },
          "AtsJob": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/AtsJob"
                   }
                }
             }
          },
          "AtsInterview": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/AtsInterview"
                   }
                }
             }
          },
          "AtsDocument": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/AtsDocument"
                   }
                }
             }
          },
          "AtsApplication": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/AtsApplication"
                   }
                }
             }
          },
          "AtsScorecard": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/AtsScorecard"
                   }
                }
             }
          },
          "AtsCompany": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/AtsCompany"
                   }
                }
             }
          },
          "HrisEmployee": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/HrisEmployee"
                   }
                }
             }
          },
          "HrisCompany": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/HrisCompany"
                   }
                }
             }
          },
          "HrisLocation": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/HrisLocation"
                   }
                }
             }
          },
          "HrisGroup": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/HrisGroup"
                   }
                }
             }
          },
          "HrisDevice": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/HrisDevice"
                   }
                }
             }
          },
          "HrisTimeshift": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/HrisTimeshift"
                   }
                }
             }
          },
          "VerificationRequest": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/VerificationRequest"
                   }
                }
             }
          },
          "AccountingAccount": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/AccountingAccount"
                   }
                }
             }
          },
          "AccountingJournal": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/AccountingJournal"
                   }
                }
             }
          },
          "AccountingTransaction": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/AccountingTransaction"
                   }
                }
             }
          },
          "AccountingContact": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/AccountingContact"
                   }
                }
             }
          },
          "AccountingInvoice": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/AccountingInvoice"
                   }
                }
             }
          },
          "AccountingBill": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/AccountingBill"
                   }
                }
             }
          },
          "AccountingCreditmemo": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/AccountingCreditmemo"
                   }
                }
             }
          },
          "AccountingTaxrate": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/AccountingTaxrate"
                   }
                }
             }
          },
          "AccountingOrder": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/AccountingOrder"
                   }
                }
             }
          },
          "AccountingPurchaseorder": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/AccountingPurchaseorder"
                   }
                }
             }
          },
          "AccountingSalesorder": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/AccountingSalesorder"
                   }
                }
             }
          },
          "AccountingCategory": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/AccountingCategory"
                   }
                }
             }
          },
          "StorageFile": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/StorageFile"
                   }
                }
             }
          },
          "CommerceItem": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/CommerceItem"
                   }
                }
             }
          },
          "CommerceCollection": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/CommerceCollection"
                   }
                }
             }
          },
          "CommerceInventory": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/CommerceInventory"
                   }
                }
             }
          },
          "CommerceLocation": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/CommerceLocation"
                   }
                }
             }
          },
          "CommerceReview": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/CommerceReview"
                   }
                }
             }
          },
          "PaymentPayment": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/PaymentPayment"
                   }
                }
             }
          },
          "PaymentLink": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/PaymentLink"
                   }
                }
             }
          },
          "PaymentSubscription": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/PaymentSubscription"
                   }
                }
             }
          },
          "GenaiPrompt": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/GenaiPrompt"
                   }
                }
             }
          },
          "GenaiEmbedding": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/GenaiEmbedding"
                   }
                }
             }
          },
          "KmsSpace": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/KmsSpace"
                   }
                }
             }
          },
          "KmsPage": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/KmsPage"
                   }
                }
             }
          },
          "KmsComment": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/KmsComment"
                   }
                }
             }
          },
          "TaskProject": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/TaskProject"
                   }
                }
             }
          },
          "TaskTask": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/TaskTask"
                   }
                }
             }
          },
          "TaskComment": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/TaskComment"
                   }
                }
             }
          },
          "ScimUser": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/ScimUser"
                   }
                }
             }
          },
          "ScimGroup": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/ScimGroup"
                   }
                }
             }
          },
          "CalendarCalendar": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/CalendarCalendar"
                   }
                }
             }
          },
          "CalendarEvent": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/CalendarEvent"
                   }
                }
             }
          },
          "CalendarLink": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/CalendarLink"
                   }
                }
             }
          },
          "LmsCourse": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/LmsCourse"
                   }
                }
             }
          },
          "LmsClass": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/LmsClass"
                   }
                }
             }
          },
          "LmsStudent": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/LmsStudent"
                   }
                }
             }
          },
          "LmsInstructor": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/LmsInstructor"
                   }
                }
             }
          },
          "RepoOrganization": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/RepoOrganization"
                   }
                }
             }
          },
          "RepoRepository": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/RepoRepository"
                   }
                }
             }
          },
          "RepoBranch": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/RepoBranch"
                   }
                }
             }
          },
          "RepoCommit": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/RepoCommit"
                   }
                }
             }
          },
          "RepoPullrequest": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/RepoPullrequest"
                   }
                }
             }
          },
          "MetadataMetadata": {
             "required": true,
             "content": {
                "application/json": {
                   "schema": {
                      "$ref": "#/components/schemas/MetadataMetadata"
                   }
                }
             }
          }
       },
       "schemas": {
          "property_Connection_permissions": {
             "type": "array",
             "items": {
                "type": "string",
                "enum": [
                   "accounting_account_read",
                   "accounting_account_write",
                   "accounting_transaction_read",
                   "accounting_transaction_write",
                   "accounting_journal_read",
                   "accounting_journal_write",
                   "accounting_invoice_read",
                   "accounting_invoice_write",
                   "accounting_bill_read",
                   "accounting_bill_write",
                   "accounting_creditmemo_read",
                   "accounting_creditmemo_write",
                   "accounting_contact_read",
                   "accounting_contact_write",
                   "accounting_taxrate_read",
                   "accounting_taxrate_write",
                   "accounting_organization_read",
                   "accounting_order_read",
                   "accounting_order_write",
                   "accounting_purchaseorder_read",
                   "accounting_purchaseorder_write",
                   "accounting_salesorder_read",
                   "accounting_salesorder_write",
                   "accounting_report_read",
                   "accounting_report_write",
                   "accounting_trialbalance_read",
                   "accounting_trialbalance_write",
                   "accounting_profitloss_read",
                   "accounting_profitloss_write",
                   "accounting_balancesheet_read",
                   "accounting_balancesheet_write",
                   "accounting_category_read",
                   "accounting_category_write",
                   "payment_payment_read",
                   "payment_payment_write",
                   "payment_payout_read",
                   "payment_refund_read",
                   "payment_link_read",
                   "payment_link_write",
                   "payment_subscription_read",
                   "payment_subscription_write",
                   "commerce_item_read",
                   "commerce_item_write",
                   "commerce_collection_read",
                   "commerce_collection_write",
                   "commerce_inventory_read",
                   "commerce_inventory_write",
                   "commerce_location_read",
                   "commerce_location_write",
                   "commerce_review_read",
                   "commerce_review_write",
                   "verification_package_read",
                   "verification_request_read",
                   "verification_request_write",
                   "ats_activity_read",
                   "ats_activity_write",
                   "ats_application_read",
                   "ats_application_write",
                   "ats_applicationstatus_read",
                   "ats_candidate_read",
                   "ats_candidate_write",
                   "ats_interview_read",
                   "ats_interview_write",
                   "ats_job_read",
                   "ats_job_write",
                   "ats_company_read",
                   "ats_document_read",
                   "ats_document_write",
                   "ats_scorecard_read",
                   "ats_scorecard_write",
                   "crm_company_read",
                   "crm_company_write",
                   "crm_contact_read",
                   "crm_contact_write",
                   "crm_deal_read",
                   "crm_deal_write",
                   "crm_event_read",
                   "crm_event_write",
                   "crm_lead_read",
                   "crm_lead_write",
                   "crm_pipeline_read",
                   "crm_pipeline_write",
                   "martech_list_read",
                   "martech_list_write",
                   "martech_member_read",
                   "martech_member_write",
                   "ticketing_customer_read",
                   "ticketing_customer_write",
                   "ticketing_ticket_read",
                   "ticketing_ticket_write",
                   "ticketing_note_read",
                   "ticketing_note_write",
                   "ticketing_category_read",
                   "ticketing_category_write",
                   "hris_employee_read",
                   "hris_employee_write",
                   "hris_group_read",
                   "hris_group_write",
                   "hris_payslip_read",
                   "hris_payslip_write",
                   "hris_timeoff_read",
                   "hris_timeoff_write",
                   "hris_timeshift_read",
                   "hris_timeshift_write",
                   "hris_company_read",
                   "hris_company_write",
                   "hris_location_read",
                   "hris_location_write",
                   "hris_device_read",
                   "hris_device_write",
                   "uc_call_read",
                   "uc_contact_read",
                   "uc_contact_write",
                   "uc_comment_read",
                   "uc_comment_write",
                   "uc_recording_read",
                   "storage_file_read",
                   "storage_file_write",
                   "webhook",
                   "genai_model_read",
                   "genai_prompt_read",
                   "genai_prompt_write",
                   "genai_embedding_read",
                   "genai_embedding_write",
                   "messaging_message_read",
                   "messaging_message_write",
                   "messaging_channel_read",
                   "kms_space_read",
                   "kms_space_write",
                   "kms_page_read",
                   "kms_page_write",
                   "kms_comment_read",
                   "kms_comment_write",
                   "task_project_read",
                   "task_project_write",
                   "task_task_read",
                   "task_task_write",
                   "task_change_read",
                   "task_comment_read",
                   "task_comment_write",
                   "scim_users_read",
                   "scim_users_write",
                   "scim_groups_read",
                   "scim_groups_write",
                   "lms_course_read",
                   "lms_course_write",
                   "lms_class_read",
                   "lms_class_write",
                   "lms_student_read",
                   "lms_student_write",
                   "lms_instructor_read",
                   "lms_instructor_write",
                   "repo_organization_read",
                   "repo_organization_write",
                   "repo_repository_read",
                   "repo_repository_write",
                   "repo_branch_read",
                   "repo_branch_write",
                   "repo_commit_read",
                   "repo_commit_write",
                   "repo_pullrequest_read",
                   "repo_pullrequest_write",
                   "metadata_metadata_read",
                   "metadata_metadata_write",
                   "calendar_calendar_read",
                   "calendar_calendar_write",
                   "calendar_event_read",
                   "calendar_event_write",
                   "calendar_busy_read",
                   "calendar_link_read",
                   "calendar_link_write",
                   "calendar_recording_read",
                   "calendar_recording_write",
                   "enrich_person_read",
                   "enrich_company_read"
                ],
                "x-speakeasy-unknown-values": "allow"
             }
          },
          "property_Connection_categories": {
             "type": "array",
             "items": {
                "type": "string",
                "enum": [
                   "passthrough",
                   "hris",
                   "ats",
                   "auth",
                   "crm",
                   "enrich",
                   "martech",
                   "ticketing",
                   "uc",
                   "accounting",
                   "storage",
                   "commerce",
                   "payment",
                   "genai",
                   "messaging",
                   "kms",
                   "task",
                   "scim",
                   "lms",
                   "repo",
                   "metadata",
                   "calendar",
                   "verification"
                ],
                "x-speakeasy-unknown-values": "allow"
             },
             "description": "The Integration categories that this connection supports"
          },
          "property_Connection_auth_emails": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "property_Connection_auth_other_auth_info": {
             "type": "array",
             "items": {
                "type": "string"
             },
             "description": "When integration.auth_type = \"other\", this field contains the authentication credentials in the same order as token_names"
          },
          "property_Connection_auth": {
             "type": "object",
             "properties": {
                "token": {
                   "type": "string"
                },
                "access_token": {
                   "type": "string"
                },
                "refresh_token": {
                   "type": "string"
                },
                "expiry_date": {
                   "type": "string",
                   "format": "date-time"
                },
                "expires_in": {
                   "type": "number"
                },
                "emails": {
                   "$ref": "#/components/schemas/property_Connection_auth_emails"
                },
                "name": {
                   "type": "string"
                },
                "user_id": {
                   "type": "string"
                },
                "app_id": {
                   "type": "string"
                },
                "client_id": {
                   "type": "string"
                },
                "client_secret": {
                   "type": "string"
                },
                "consumer_key": {
                   "type": "string"
                },
                "consumer_secret": {
                   "type": "string"
                },
                "meta": {
                   "type": "object",
                   "additionalProperties": true
                },
                "state": {
                   "type": "string"
                },
                "other_auth_info": {
                   "$ref": "#/components/schemas/property_Connection_auth_other_auth_info"
                },
                "api_url": {
                   "type": "string"
                },
                "authorize_url": {
                   "type": "string"
                },
                "token_url": {
                   "type": "string"
                },
                "refresh_url": {
                   "type": "string"
                },
                "pem": {
                   "type": "string"
                },
                "key": {
                   "type": "string"
                },
                "refresh_token_expires_in": {
                   "type": "number"
                },
                "refresh_token_expires_date": {
                   "type": "string",
                   "format": "date-time"
                },
                "dev_api_key": {
                   "type": "string"
                }
             },
             "description": "An authentication object that represents a specific authorized user's connection to an integration."
          },
          "Connection": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "workspace_id": {
                   "type": "string"
                },
                "integration_type": {
                   "type": "string"
                },
                "integration_name": {
                   "type": "string"
                },
                "external_xref": {
                   "type": "string"
                },
                "permissions": {
                   "$ref": "#/components/schemas/property_Connection_permissions"
                },
                "categories": {
                   "$ref": "#/components/schemas/property_Connection_categories"
                },
                "auth": {
                   "$ref": "#/components/schemas/property_Connection_auth"
                },
                "is_paused": {
                   "type": "boolean"
                },
                "auth_aws_arn": {
                   "type": "string"
                },
                "environment": {
                   "type": "string",
                   "default": "Production"
                },
                "last_healthy_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "last_unhealthy_at": {
                   "type": "string",
                   "format": "date-time"
                }
             },
             "required": [
                "integration_type",
                "permissions",
                "categories"
             ],
             "description": "A connection represents a specific authentication of an integration."
          },
          "Connections": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/Connection"
             }
          },
          "property_Issue_type": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "Issue": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string"
                },
                "updated_at": {
                   "type": "string"
                },
                "title": {
                   "type": "string"
                },
                "status": {
                   "type": "string",
                   "enum": [
                      "COMPLETED",
                      "NEW",
                      "ROADMAP",
                      "IN_PROGRESS",
                      "ON_HOLD",
                      "VALIDATING",
                      "REJECTED"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "url": {
                   "type": "string"
                },
                "workspace_id": {
                   "type": "string"
                },
                "type": {
                   "$ref": "#/components/schemas/property_Issue_type"
                },
                "resolution_time": {
                   "type": "number"
                },
                "ticket_ref": {
                   "type": "string"
                },
                "size": {
                   "type": "number"
                },
                "importance": {
                   "type": "number"
                }
             },
             "required": [
                "title",
                "status",
                "workspace_id",
                "ticket_ref"
             ]
          },
          "Issues": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/Issue"
             }
          },
          "property_Integration_categories": {
             "type": "array",
             "items": {
                "type": "string",
                "enum": [
                   "passthrough",
                   "hris",
                   "ats",
                   "auth",
                   "crm",
                   "enrich",
                   "martech",
                   "ticketing",
                   "uc",
                   "accounting",
                   "storage",
                   "commerce",
                   "payment",
                   "genai",
                   "messaging",
                   "kms",
                   "task",
                   "scim",
                   "lms",
                   "repo",
                   "metadata",
                   "calendar",
                   "verification"
                ],
                "x-speakeasy-unknown-values": "allow"
             },
             "description": "The categories of support solutions that this integration has"
          },
          "property_Integration_token_names": {
             "type": "array",
             "items": {
                "type": "string"
             },
             "description": "if auth_types = 'token'"
          },
          "property_Integration_token_instructions": {
             "type": "array",
             "items": {
                "type": "string"
             },
             "description": "instructions for the user on how to find the token/key"
          },
          "property_Integration_support": {
             "type": "object",
             "additionalProperties": true
          },
          "Integration": {
             "type": "object",
             "properties": {
                "type": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string"
                },
                "updated_at": {
                   "type": "string"
                },
                "name": {
                   "type": "string"
                },
                "is_active": {
                   "type": "boolean"
                },
                "categories": {
                   "$ref": "#/components/schemas/property_Integration_categories"
                },
                "api_docs_url": {
                   "type": "string"
                },
                "logo_url": {
                   "type": "string"
                },
                "in_progress": {
                   "type": "boolean"
                },
                "color": {
                   "type": "string"
                },
                "text_color": {
                   "type": "string"
                },
                "fa_icon": {
                   "type": "string"
                },
                "token_names": {
                   "$ref": "#/components/schemas/property_Integration_token_names"
                },
                "token_instructions": {
                   "$ref": "#/components/schemas/property_Integration_token_instructions"
                },
                "web_url": {
                   "type": "string"
                },
                "rate_limit_description": {
                   "type": "string"
                },
                "beta": {
                   "type": "boolean"
                },
                "support": {
                   "$ref": "#/components/schemas/property_Integration_support"
                },
                "tested_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "sandbox": {
                   "additionalProperties": true,
                   "anyOf": [
                      {
                         "type": "object"
                      },
                      {
                         "type": "string"
                      },
                      {
                         "type": "number"
                      },
                      {
                         "type": "boolean"
                      },
                      {
                         "type": "array",
                         "items": {
                            "anyOf": [
                               {
                                  "type": "object"
                               },
                               {
                                  "type": "string"
                               },
                               {
                                  "type": "number"
                               },
                               {
                                  "type": "boolean"
                               }
                            ]
                         }
                      }
                   ]
                },
                "partnership": {
                   "additionalProperties": true,
                   "anyOf": [
                      {
                         "type": "object"
                      },
                      {
                         "type": "string"
                      },
                      {
                         "type": "number"
                      },
                      {
                         "type": "boolean"
                      },
                      {
                         "type": "array",
                         "items": {
                            "anyOf": [
                               {
                                  "type": "object"
                               },
                               {
                                  "type": "string"
                               },
                               {
                                  "type": "number"
                               },
                               {
                                  "type": "boolean"
                               }
                            ]
                         }
                      }
                   ]
                },
                "saml": {
                   "additionalProperties": true,
                   "anyOf": [
                      {
                         "type": "object"
                      },
                      {
                         "type": "string"
                      },
                      {
                         "type": "number"
                      },
                      {
                         "type": "boolean"
                      },
                      {
                         "type": "array",
                         "items": {
                            "anyOf": [
                               {
                                  "type": "object"
                               },
                               {
                                  "type": "string"
                               },
                               {
                                  "type": "number"
                               },
                               {
                                  "type": "boolean"
                               }
                            ]
                         }
                      }
                   ]
                },
                "description": {
                   "type": "string"
                },
                "api": {
                   "additionalProperties": true,
                   "anyOf": [
                      {
                         "type": "object"
                      },
                      {
                         "type": "string"
                      },
                      {
                         "type": "number"
                      },
                      {
                         "type": "boolean"
                      },
                      {
                         "type": "array",
                         "items": {
                            "anyOf": [
                               {
                                  "type": "object"
                               },
                               {
                                  "type": "string"
                               },
                               {
                                  "type": "number"
                               },
                               {
                                  "type": "boolean"
                               }
                            ]
                         }
                      }
                   ]
                },
                "featured": {
                   "type": "boolean"
                },
                "popularity": {
                   "type": "number"
                },
                "active_healthy_connections": {
                   "type": "number"
                }
             },
             "required": [
                "type",
                "name",
                "categories"
             ],
             "description": "Informational object for supported integrations."
          },
          "Integrations": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/Integration"
             }
          },
          "property_Webhook_runs": {
             "type": "array",
             "items": {
                "type": "string"
             },
             "description": "An array of the most revent virtual webhook runs"
          },
          "property_Webhook_filters": {
             "type": "object",
             "additionalProperties": true
          },
          "Webhook": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "workspace_id": {
                   "type": "string"
                },
                "connection_id": {
                   "type": "string"
                },
                "hook_url": {
                   "type": "string"
                },
                "object_type": {
                   "type": "string",
                   "enum": [
                      "accounting_account",
                      "accounting_transaction",
                      "accounting_journal",
                      "accounting_contact",
                      "accounting_invoice",
                      "accounting_bill",
                      "accounting_creditmemo",
                      "accounting_taxrate",
                      "accounting_organization",
                      "accounting_order",
                      "accounting_salesorder",
                      "accounting_purchaseorder",
                      "accounting_report",
                      "accounting_balancesheet",
                      "accounting_profitloss",
                      "accounting_trialbalance",
                      "accounting_category",
                      "payment_payment",
                      "payment_link",
                      "payment_payout",
                      "payment_refund",
                      "payment_subscription",
                      "commerce_item",
                      "commerce_collection",
                      "commerce_inventory",
                      "commerce_location",
                      "commerce_review",
                      "verification_package",
                      "verification_request",
                      "ats_activity",
                      "ats_application",
                      "ats_applicationstatus",
                      "ats_candidate",
                      "ats_document",
                      "ats_interview",
                      "ats_job",
                      "ats_scorecard",
                      "ats_company",
                      "crm_company",
                      "crm_contact",
                      "crm_deal",
                      "crm_event",
                      "crm_lead",
                      "crm_pipeline",
                      "hris_employee",
                      "hris_group",
                      "hris_payslip",
                      "hris_timeoff",
                      "hris_company",
                      "hris_location",
                      "hris_device",
                      "hris_timeshift",
                      "martech_list",
                      "martech_member",
                      "passthrough",
                      "ticketing_note",
                      "ticketing_ticket",
                      "ticketing_customer",
                      "ticketing_category",
                      "uc_contact",
                      "uc_call",
                      "uc_comment",
                      "uc_recording",
                      "enrich_person",
                      "enrich_company",
                      "storage_file",
                      "genai_model",
                      "genai_prompt",
                      "genai_embedding",
                      "messaging_message",
                      "messaging_channel",
                      "kms_space",
                      "kms_page",
                      "kms_comment",
                      "task_project",
                      "task_task",
                      "task_comment",
                      "task_change",
                      "scim_users",
                      "scim_groups",
                      "lms_course",
                      "lms_class",
                      "lms_student",
                      "lms_instructor",
                      "repo_organization",
                      "repo_repository",
                      "repo_branch",
                      "repo_commit",
                      "repo_pullrequest",
                      "metadata_metadata",
                      "calendar_calendar",
                      "calendar_event",
                      "calendar_busy",
                      "calendar_link",
                      "calendar_recording"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "interval": {
                   "type": "number"
                },
                "checked_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "integration_type": {
                   "type": "string"
                },
                "environment": {
                   "type": "string",
                   "default": "Production"
                },
                "event": {
                   "type": "string",
                   "enum": [
                      "updated",
                      "created",
                      "deleted"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "runs": {
                   "$ref": "#/components/schemas/property_Webhook_runs"
                },
                "fields": {
                   "type": "string"
                },
                "webhook_type": {
                   "type": "string",
                   "enum": [
                      "virtual",
                      "native"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "meta": {
                   "type": "object",
                   "additionalProperties": true
                },
                "is_healthy": {
                   "type": "boolean"
                },
                "page_max_limit": {
                   "type": "number"
                },
                "filters": {
                   "$ref": "#/components/schemas/property_Webhook_filters"
                },
                "db_type": {
                   "type": "string",
                   "enum": [
                      "mongodb",
                      "mysql",
                      "postgres",
                      "mssql",
                      "mariadb"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "db_url": {
                   "type": "string"
                },
                "db_schema": {
                   "type": "string"
                },
                "db_name_prefix": {
                   "type": "string"
                },
                "is_paused": {
                   "type": "boolean"
                }
             },
             "required": [
                "connection_id",
                "object_type",
                "event"
             ],
             "description": "A webhook is used to POST new/updated information to your server."
          },
          "Webhooks": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/Webhook"
             }
          },
          "ApiCall": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "connection_id": {
                   "type": "string"
                },
                "workspace_id": {
                   "type": "string"
                },
                "integration_type": {
                   "type": "string"
                },
                "external_xref": {
                   "type": "string"
                },
                "name": {
                   "type": "string"
                },
                "path": {
                   "type": "string"
                },
                "size": {
                   "type": "number"
                },
                "status": {
                   "type": "string"
                },
                "error": {
                   "type": "string"
                },
                "ip_address": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "login",
                      "webhook",
                      "inbound"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "method": {
                   "type": "string"
                },
                "environment": {
                   "type": "string",
                   "default": "Production"
                },
                "webhook_id": {
                   "type": "string"
                },
                "is_billable": {
                   "type": "boolean"
                }
             },
             "required": [
                "integration_type",
                "name",
                "path",
                "status",
                "type",
                "method"
             ]
          },
          "ApiCalls": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/ApiCall"
             }
          },
          "MessagingMember": {
             "type": "object",
             "properties": {
                "user_id": {
                   "type": "string"
                },
                "email": {
                   "type": "string"
                },
                "name": {
                   "type": "string"
                }
             }
          },
          "property_MessagingChannel_members": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/MessagingMember"
             }
          },
          "MessagingChannel": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "description": {
                   "type": "string"
                },
                "parent_channel_id": {
                   "type": "string"
                },
                "parent_id": {
                   "type": "string"
                },
                "has_subchannels": {
                   "type": "boolean"
                },
                "members": {
                   "$ref": "#/components/schemas/property_MessagingChannel_members"
                },
                "is_active": {
                   "type": "boolean"
                },
                "is_private": {
                   "type": "boolean"
                },
                "web_url": {
                   "type": "string"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             },
             "required": [
                "name"
             ]
          },
          "MessagingChannels": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/MessagingChannel"
             }
          },
          "property_MessagingMessage_channel_ids": {
             "type": "array",
             "items": {
                "type": "string"
             },
             "description": "Represents the IDs of all channels to which the message is sent. Identifies the channels where the message is posted."
          },
          "property_MessagingMessage_author_member": {
             "type": "object",
             "properties": {
                "user_id": {
                   "type": "string"
                },
                "email": {
                   "type": "string"
                },
                "name": {
                   "type": "string"
                }
             }
          },
          "property_MessagingMessage_destination_members": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/MessagingMember"
             }
          },
          "property_MessagingMessage_hidden_members": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/MessagingMember"
             }
          },
          "property_MessagingMessage_mentioned_members": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/MessagingMember"
             }
          },
          "property_MessagingReaction_member": {
             "type": "object",
             "properties": {
                "user_id": {
                   "type": "string"
                },
                "email": {
                   "type": "string"
                },
                "name": {
                   "type": "string"
                }
             }
          },
          "MessagingReaction": {
             "type": "object",
             "properties": {
                "reaction": {
                   "type": "string"
                },
                "member": {
                   "$ref": "#/components/schemas/property_MessagingReaction_member"
                }
             },
             "required": [
                "reaction",
                "member"
             ]
          },
          "property_MessagingMessage_reactions": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/MessagingReaction"
             }
          },
          "MessagingAttachment": {
             "type": "object",
             "properties": {
                "filename": {
                   "type": "string"
                },
                "size": {
                   "type": "number"
                },
                "content_identifier": {
                   "type": "string"
                },
                "content_type": {
                   "type": "string"
                },
                "download_url": {
                   "type": "string"
                },
                "message_id": {
                   "type": "string"
                }
             }
          },
          "property_MessagingMessage_attachments": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/MessagingAttachment"
             }
          },
          "MessagingMessage": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "channel_id": {
                   "type": "string"
                },
                "channel_ids": {
                   "$ref": "#/components/schemas/property_MessagingMessage_channel_ids"
                },
                "parent_id": {
                   "type": "string"
                },
                "parent_message_id": {
                   "type": "string"
                },
                "root_message_id": {
                   "type": "string"
                },
                "author_member": {
                   "$ref": "#/components/schemas/property_MessagingMessage_author_member"
                },
                "destination_members": {
                   "$ref": "#/components/schemas/property_MessagingMessage_destination_members"
                },
                "hidden_members": {
                   "$ref": "#/components/schemas/property_MessagingMessage_hidden_members"
                },
                "mentioned_members": {
                   "$ref": "#/components/schemas/property_MessagingMessage_mentioned_members"
                },
                "reactions": {
                   "$ref": "#/components/schemas/property_MessagingMessage_reactions"
                },
                "subject": {
                   "type": "string"
                },
                "message": {
                   "type": "string"
                },
                "message_html": {
                   "type": "string"
                },
                "message_markdown": {
                   "type": "string"
                },
                "attachments": {
                   "$ref": "#/components/schemas/property_MessagingMessage_attachments"
                },
                "web_url": {
                   "type": "string"
                },
                "reference": {
                   "type": "string"
                },
                "has_children": {
                   "type": "boolean"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                },
                "is_unread": {
                   "type": "boolean"
                }
             }
          },
          "MessagingMessages": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/MessagingMessage"
             }
          },
          "property_CrmDeal_tags": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "property_CrmDeal_contact_ids": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "property_CrmDeal_company_ids": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "CrmMetadata": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "key": {
                   "type": "string"
                },
                "slug": {
                   "type": "string"
                },
                "value": {
                   "additionalProperties": true,
                   "anyOf": [
                      {
                         "type": "object"
                      },
                      {
                         "type": "string"
                      },
                      {
                         "type": "number"
                      },
                      {
                         "type": "boolean"
                      },
                      {
                         "type": "array",
                         "items": {
                            "anyOf": [
                               {
                                  "type": "object"
                               },
                               {
                                  "type": "string"
                               },
                               {
                                  "type": "number"
                               },
                               {
                                  "type": "boolean"
                               }
                            ]
                         }
                      }
                   ]
                },
                "namespace": {
                   "type": "string"
                },
                "type": {
                   "type": "string"
                },
                "extra_data": {
                   "additionalProperties": true,
                   "anyOf": [
                      {
                         "type": "object"
                      },
                      {
                         "type": "string"
                      },
                      {
                         "type": "number"
                      },
                      {
                         "type": "boolean"
                      },
                      {
                         "type": "array",
                         "items": {
                            "anyOf": [
                               {
                                  "type": "object"
                               },
                               {
                                  "type": "string"
                               },
                               {
                                  "type": "number"
                               },
                               {
                                  "type": "boolean"
                               }
                            ]
                         }
                      }
                   ]
                }
             }
          },
          "property_CrmDeal_metadata": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CrmMetadata"
             }
          },
          "CrmDeal": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "amount": {
                   "type": "number"
                },
                "currency": {
                   "type": "string"
                },
                "closed_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "stage": {
                   "type": "string"
                },
                "stage_id": {
                   "type": "string"
                },
                "pipeline": {
                   "type": "string"
                },
                "pipeline_id": {
                   "type": "string"
                },
                "source": {
                   "type": "string"
                },
                "probability": {
                   "type": "number"
                },
                "tags": {
                   "$ref": "#/components/schemas/property_CrmDeal_tags"
                },
                "lost_reason": {
                   "type": "string"
                },
                "won_reason": {
                   "type": "string"
                },
                "user_id": {
                   "type": "string"
                },
                "contact_ids": {
                   "$ref": "#/components/schemas/property_CrmDeal_contact_ids"
                },
                "company_ids": {
                   "$ref": "#/components/schemas/property_CrmDeal_company_ids"
                },
                "metadata": {
                   "$ref": "#/components/schemas/property_CrmDeal_metadata"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             },
             "description": "A deal represents an opportunity with companies and/or contacts"
          },
          "CrmDeals": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CrmDeal"
             }
          },
          "CrmEmail": {
             "type": "object",
             "properties": {
                "email": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "WORK",
                      "HOME",
                      "OTHER"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                }
             }
          },
          "property_CrmContact_emails": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CrmEmail"
             },
             "description": "An array of email addresses for this contact"
          },
          "CrmTelephone": {
             "type": "object",
             "properties": {
                "telephone": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "WORK",
                      "HOME",
                      "OTHER",
                      "FAX",
                      "MOBILE"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                }
             },
             "required": [
                "telephone"
             ]
          },
          "property_CrmContact_telephones": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CrmTelephone"
             },
             "description": "An array of telephones for this contact"
          },
          "property_CrmContact_deal_ids": {
             "type": "array",
             "items": {
                "type": "string"
             },
             "description": "An array of deal IDs associated with this contact"
          },
          "property_CrmContact_company_ids": {
             "type": "array",
             "items": {
                "type": "string"
             },
             "description": "An array of company IDs associated with this contact"
          },
          "property_CrmContact_address": {
             "type": "object",
             "properties": {
                "address1": {
                   "type": "string"
                },
                "address2": {
                   "type": "string"
                },
                "city": {
                   "type": "string"
                },
                "region": {
                   "type": "string"
                },
                "region_code": {
                   "type": "string"
                },
                "postal_code": {
                   "type": "string"
                },
                "country": {
                   "type": "string"
                },
                "country_code": {
                   "type": "string"
                }
             }
          },
          "property_CrmContact_link_urls": {
             "type": "array",
             "items": {
                "type": "string"
             },
             "description": "Additional URLs associated with the contact e.g., LinkedIn, website, etc"
          },
          "property_CrmContact_metadata": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CrmMetadata"
             }
          },
          "CrmContact": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "title": {
                   "type": "string"
                },
                "company": {
                   "type": "string"
                },
                "emails": {
                   "$ref": "#/components/schemas/property_CrmContact_emails"
                },
                "telephones": {
                   "$ref": "#/components/schemas/property_CrmContact_telephones"
                },
                "deal_ids": {
                   "$ref": "#/components/schemas/property_CrmContact_deal_ids"
                },
                "company_ids": {
                   "$ref": "#/components/schemas/property_CrmContact_company_ids"
                },
                "address": {
                   "$ref": "#/components/schemas/property_CrmContact_address"
                },
                "user_id": {
                   "type": "string"
                },
                "link_urls": {
                   "$ref": "#/components/schemas/property_CrmContact_link_urls"
                },
                "metadata": {
                   "$ref": "#/components/schemas/property_CrmContact_metadata"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             },
             "description": "A contact represents a person that optionally is associated with a deal and/or a company"
          },
          "CrmContacts": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CrmContact"
             }
          },
          "property_CrmCompany_deal_ids": {
             "type": "array",
             "items": {
                "type": "string"
             },
             "description": "An array of deal IDs associated with this contact"
          },
          "property_CrmCompany_contact_ids": {
             "type": "array",
             "items": {
                "type": "string"
             },
             "description": "An array of contact IDs associated with this company"
          },
          "property_CrmCompany_emails": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CrmEmail"
             }
          },
          "property_CrmCompany_telephones": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CrmTelephone"
             }
          },
          "property_CrmCompany_websites": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "property_CrmCompany_address": {
             "type": "object",
             "properties": {
                "address1": {
                   "type": "string"
                },
                "address2": {
                   "type": "string"
                },
                "city": {
                   "type": "string"
                },
                "region": {
                   "type": "string"
                },
                "region_code": {
                   "type": "string"
                },
                "postal_code": {
                   "type": "string"
                },
                "country": {
                   "type": "string"
                },
                "country_code": {
                   "type": "string"
                }
             }
          },
          "property_CrmCompany_tags": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "property_CrmCompany_link_urls": {
             "type": "array",
             "items": {
                "type": "string"
             },
             "description": "Additional URLs associated with the contact e.g., LinkedIn, website, etc"
          },
          "property_CrmCompany_metadata": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CrmMetadata"
             }
          },
          "CrmCompany": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "deal_ids": {
                   "$ref": "#/components/schemas/property_CrmCompany_deal_ids"
                },
                "contact_ids": {
                   "$ref": "#/components/schemas/property_CrmCompany_contact_ids"
                },
                "emails": {
                   "$ref": "#/components/schemas/property_CrmCompany_emails"
                },
                "telephones": {
                   "$ref": "#/components/schemas/property_CrmCompany_telephones"
                },
                "websites": {
                   "$ref": "#/components/schemas/property_CrmCompany_websites"
                },
                "address": {
                   "$ref": "#/components/schemas/property_CrmCompany_address"
                },
                "is_active": {
                   "type": "boolean"
                },
                "tags": {
                   "$ref": "#/components/schemas/property_CrmCompany_tags"
                },
                "description": {
                   "type": "string"
                },
                "industry": {
                   "type": "string"
                },
                "link_urls": {
                   "$ref": "#/components/schemas/property_CrmCompany_link_urls"
                },
                "employees": {
                   "type": "number"
                },
                "timezone": {
                   "type": "string"
                },
                "user_id": {
                   "type": "string"
                },
                "metadata": {
                   "$ref": "#/components/schemas/property_CrmCompany_metadata"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             },
             "description": "A company represents an organization that optionally is associated with a deal and/or contacts"
          },
          "CrmCompanies": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CrmCompany"
             }
          },
          "property_CrmEvent_note": {
             "type": "object",
             "properties": {
                "description": {
                   "type": "string"
                },
                "title": {
                   "type": "string"
                }
             },
             "description": "The note object, when type = note"
          },
          "property_CrmEvent_meeting": {
             "type": "object",
             "properties": {
                "start_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "end_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "title": {
                   "type": "string"
                },
                "description": {
                   "type": "string"
                }
             },
             "description": "The meeting object, when type = meeting"
          },
          "property_CrmEvent_email_to": {
             "type": "array",
             "items": {
                "type": "string"
             },
             "description": "The event email's \"to\" name & email (name <test@test.com>)"
          },
          "property_CrmEvent_email_cc": {
             "type": "array",
             "items": {
                "type": "string"
             },
             "description": "The event email's cc name & email (name <test@test.com>)"
          },
          "property_CrmEvent_email_attachment_file_ids": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "property_CrmEvent_email": {
             "type": "object",
             "properties": {
                "from": {
                   "type": "string"
                },
                "to": {
                   "$ref": "#/components/schemas/property_CrmEvent_email_to"
                },
                "cc": {
                   "$ref": "#/components/schemas/property_CrmEvent_email_cc"
                },
                "subject": {
                   "type": "string"
                },
                "body": {
                   "type": "string"
                },
                "attachment_file_ids": {
                   "$ref": "#/components/schemas/property_CrmEvent_email_attachment_file_ids"
                }
             },
             "description": "The email object, when type = email"
          },
          "property_CrmEvent_call": {
             "type": "object",
             "properties": {
                "duration": {
                   "type": "number"
                },
                "description": {
                   "type": "string"
                },
                "start_at": {
                   "type": "string",
                   "format": "date-time"
                }
             },
             "description": "The call object, when type = call"
          },
          "property_CrmEvent_task": {
             "type": "object",
             "properties": {
                "name": {
                   "type": "string"
                },
                "status": {
                   "type": "string",
                   "enum": [
                      "COMPLETED",
                      "NOT_STARTED",
                      "WORK_IN_PROGRESS",
                      "DEFERRED"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "description": {
                   "type": "string"
                },
                "due_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "priority": {
                   "type": "string",
                   "enum": [
                      "HIGH",
                      "MEDIUM",
                      "LOW"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                }
             },
             "description": "The task object, when type = task"
          },
          "property_CrmEvent_marketing_email_to": {
             "type": "array",
             "items": {
                "type": "string"
             },
             "description": "The event email's \"to\" name & email (name <test@test.com>)"
          },
          "property_CrmEvent_marketing_email_cc": {
             "type": "array",
             "items": {
                "type": "string"
             },
             "description": "The event email's cc name & email (name <test@test.com>)"
          },
          "property_CrmEvent_marketing_email_attachment_file_ids": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "property_CrmEvent_marketing_email": {
             "type": "object",
             "properties": {
                "name": {
                   "type": "string"
                },
                "from": {
                   "type": "string"
                },
                "to": {
                   "$ref": "#/components/schemas/property_CrmEvent_marketing_email_to"
                },
                "cc": {
                   "$ref": "#/components/schemas/property_CrmEvent_marketing_email_cc"
                },
                "subject": {
                   "type": "string"
                },
                "body": {
                   "type": "string"
                },
                "attachment_file_ids": {
                   "$ref": "#/components/schemas/property_CrmEvent_marketing_email_attachment_file_ids"
                }
             }
          },
          "CrmEventFormOption": {
             "type": "object",
             "properties": {
                "label": {
                   "type": "string"
                },
                "value": {
                   "type": "string"
                }
             }
          },
          "property_CrmEventFormField_options": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CrmEventFormOption"
             }
          },
          "CrmEventFormField": {
             "type": "object",
             "properties": {
                "name": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "TEXT",
                      "NUMBER",
                      "DATE",
                      "BOOLEAN",
                      "MULTIPLE_CHOICE",
                      "FILE",
                      "TEXTAREA",
                      "SINGLE_SELECT",
                      "MULTIPLE_SELECT",
                      "EMAIL",
                      "PHONE",
                      "YES_NO",
                      "CURRENCY",
                      "URL"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "options": {
                   "$ref": "#/components/schemas/property_CrmEventFormField_options"
                },
                "required": {
                   "type": "boolean"
                }
             }
          },
          "property_CrmEvent_form_fields": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CrmEventFormField"
             }
          },
          "property_CrmEvent_form": {
             "type": "object",
             "properties": {
                "name": {
                   "type": "string"
                },
                "archived_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "fields": {
                   "$ref": "#/components/schemas/property_CrmEvent_form_fields"
                },
                "redirect_url": {
                   "type": "string"
                }
             }
          },
          "property_CrmEvent_page_view": {
             "type": "object",
             "properties": {
                "count": {
                   "type": "number"
                },
                "average": {
                   "type": "number"
                },
                "url": {
                   "type": "string"
                }
             }
          },
          "property_CrmEvent_deal_ids": {
             "type": "array",
             "items": {
                "type": "string"
             },
             "description": "An array of deal IDs associated with this event"
          },
          "property_CrmEvent_company_ids": {
             "type": "array",
             "items": {
                "type": "string"
             },
             "description": "An array of company IDs associated with this event"
          },
          "property_CrmEvent_contact_ids": {
             "type": "array",
             "items": {
                "type": "string"
             },
             "description": "An array of contact IDs associated with this event"
          },
          "property_CrmEvent_lead_ids": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "CrmEvent": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "NOTE",
                      "EMAIL",
                      "TASK",
                      "MEETING",
                      "CALL",
                      "MARKETING_EMAIL",
                      "FORM",
                      "PAGE_VIEW"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "note": {
                   "$ref": "#/components/schemas/property_CrmEvent_note"
                },
                "meeting": {
                   "$ref": "#/components/schemas/property_CrmEvent_meeting"
                },
                "email": {
                   "$ref": "#/components/schemas/property_CrmEvent_email"
                },
                "call": {
                   "$ref": "#/components/schemas/property_CrmEvent_call"
                },
                "task": {
                   "$ref": "#/components/schemas/property_CrmEvent_task"
                },
                "marketing_email": {
                   "$ref": "#/components/schemas/property_CrmEvent_marketing_email"
                },
                "form": {
                   "$ref": "#/components/schemas/property_CrmEvent_form"
                },
                "page_view": {
                   "$ref": "#/components/schemas/property_CrmEvent_page_view"
                },
                "deal_ids": {
                   "$ref": "#/components/schemas/property_CrmEvent_deal_ids"
                },
                "company_ids": {
                   "$ref": "#/components/schemas/property_CrmEvent_company_ids"
                },
                "contact_ids": {
                   "$ref": "#/components/schemas/property_CrmEvent_contact_ids"
                },
                "lead_ids": {
                   "$ref": "#/components/schemas/property_CrmEvent_lead_ids"
                },
                "user_id": {
                   "type": "string"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             },
             "description": "An event represents an event, activity, or engagement and is always associated with a deal, contact, or company"
          },
          "CrmEvents": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CrmEvent"
             }
          },
          "property_CrmLead_address": {
             "type": "object",
             "properties": {
                "address1": {
                   "type": "string"
                },
                "address2": {
                   "type": "string"
                },
                "city": {
                   "type": "string"
                },
                "region": {
                   "type": "string"
                },
                "region_code": {
                   "type": "string"
                },
                "postal_code": {
                   "type": "string"
                },
                "country": {
                   "type": "string"
                },
                "country_code": {
                   "type": "string"
                }
             }
          },
          "property_CrmLead_emails": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CrmEmail"
             }
          },
          "property_CrmLead_telephones": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CrmTelephone"
             }
          },
          "property_CrmLead_link_urls": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "property_CrmLead_metadata": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CrmMetadata"
             }
          },
          "CrmLead": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "user_id": {
                   "type": "string"
                },
                "creator_user_id": {
                   "type": "string"
                },
                "contact_id": {
                   "type": "string"
                },
                "company_id": {
                   "type": "string"
                },
                "company_name": {
                   "type": "string"
                },
                "is_active": {
                   "type": "boolean"
                },
                "address": {
                   "$ref": "#/components/schemas/property_CrmLead_address"
                },
                "emails": {
                   "$ref": "#/components/schemas/property_CrmLead_emails"
                },
                "telephones": {
                   "$ref": "#/components/schemas/property_CrmLead_telephones"
                },
                "source": {
                   "type": "string"
                },
                "status": {
                   "type": "string"
                },
                "link_urls": {
                   "$ref": "#/components/schemas/property_CrmLead_link_urls"
                },
                "metadata": {
                   "$ref": "#/components/schemas/property_CrmLead_metadata"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "CrmLeads": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CrmLead"
             }
          },
          "CrmStage": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "active": {
                   "type": "boolean"
                },
                "deal_probability": {
                   "type": "number"
                },
                "display_order": {
                   "type": "number"
                }
             }
          },
          "property_CrmPipeline_stages": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CrmStage"
             }
          },
          "CrmPipeline": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "is_active": {
                   "type": "boolean"
                },
                "deal_probability": {
                   "type": "number"
                },
                "display_order": {
                   "type": "number"
                },
                "stages": {
                   "$ref": "#/components/schemas/property_CrmPipeline_stages"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "CrmPipelines": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CrmPipeline"
             }
          },
          "property_MarketingList_raw": {
             "type": "object",
             "additionalProperties": true,
             "description": "The raw data returned by the integration for this list"
          },
          "MarketingList": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "description": {
                   "type": "string"
                },
                "start_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "end_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "user_id": {
                   "type": "string"
                },
                "is_active": {
                   "type": "boolean"
                },
                "raw": {
                   "$ref": "#/components/schemas/property_MarketingList_raw"
                }
             },
             "description": "Mailing List"
          },
          "MarketingLists": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/MarketingList"
             }
          },
          "MarketingEmail": {
             "type": "object",
             "properties": {
                "email": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "WORK",
                      "HOME",
                      "OTHER"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                }
             },
             "required": [
                "email"
             ]
          },
          "property_MarketingMember_emails": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/MarketingEmail"
             },
             "description": "An array of email addresses for this member"
          },
          "property_MarketingMember_list_ids": {
             "type": "array",
             "items": {
                "type": "string"
             },
             "description": "An array of list IDs associated with this member"
          },
          "property_MarketingMember_tags": {
             "type": "array",
             "items": {
                "type": "string"
             },
             "description": "An array of tags associated with this member"
          },
          "property_MarketingMember_raw": {
             "type": "object",
             "additionalProperties": true,
             "description": "The raw data returned by the integration for this member"
          },
          "MarketingMember": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "emails": {
                   "$ref": "#/components/schemas/property_MarketingMember_emails"
                },
                "list_ids": {
                   "$ref": "#/components/schemas/property_MarketingMember_list_ids"
                },
                "tags": {
                   "$ref": "#/components/schemas/property_MarketingMember_tags"
                },
                "raw": {
                   "$ref": "#/components/schemas/property_MarketingMember_raw"
                }
             },
             "description": "A member represents a person"
          },
          "MarketingMembers": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/MarketingMember"
             }
          },
          "property_TicketingTicket_tags": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "TicketingTicket": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "customer_id": {
                   "type": "string"
                },
                "subject": {
                   "type": "string"
                },
                "description": {
                   "type": "string"
                },
                "status": {
                   "type": "string",
                   "enum": [
                      "ACTIVE",
                      "CLOSED"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "closed_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "priority": {
                   "type": "string"
                },
                "category_id": {
                   "type": "string"
                },
                "category": {
                   "type": "string"
                },
                "source": {
                   "type": "string"
                },
                "source_ref": {
                   "type": "string"
                },
                "tags": {
                   "$ref": "#/components/schemas/property_TicketingTicket_tags"
                },
                "user_id": {
                   "type": "string"
                },
                "url": {
                   "type": "string"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "TicketingTickets": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/TicketingTicket"
             }
          },
          "TicketingEmail": {
             "type": "object",
             "properties": {
                "email": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "WORK",
                      "HOME",
                      "OTHER"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                }
             },
             "required": [
                "email"
             ]
          },
          "property_TicketingCustomer_emails": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/TicketingEmail"
             }
          },
          "TicketingTelephone": {
             "type": "object",
             "properties": {
                "telephone": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "WORK",
                      "HOME",
                      "OTHER",
                      "FAX",
                      "MOBILE"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                }
             },
             "required": [
                "telephone"
             ]
          },
          "property_TicketingCustomer_telephones": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/TicketingTelephone"
             }
          },
          "property_TicketingCustomer_tags": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "TicketingCustomer": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "emails": {
                   "$ref": "#/components/schemas/property_TicketingCustomer_emails"
                },
                "telephones": {
                   "$ref": "#/components/schemas/property_TicketingCustomer_telephones"
                },
                "tags": {
                   "$ref": "#/components/schemas/property_TicketingCustomer_tags"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "TicketingCustomers": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/TicketingCustomer"
             }
          },
          "TicketingNote": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "customer_id": {
                   "type": "string"
                },
                "description": {
                   "type": "string"
                },
                "ticket_id": {
                   "type": "string"
                },
                "user_id": {
                   "type": "string"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "TicketingNotes": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/TicketingNote"
             }
          },
          "TicketingCategory": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "description": {
                   "type": "string"
                },
                "is_active": {
                   "type": "boolean"
                },
                "parent_id": {
                   "type": "string"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "TicketingCategories": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/TicketingCategory"
             }
          },
          "EnrichEmail": {
             "type": "object",
             "properties": {
                "email": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "WORK",
                      "HOME",
                      "OTHER"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "is_verified": {
                   "type": "boolean"
                }
             },
             "required": [
                "email"
             ]
          },
          "property_EnrichPerson_emails": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/EnrichEmail"
             },
             "description": "An array of email addresses for this person"
          },
          "EnrichTelephone": {
             "type": "object",
             "properties": {
                "telephone": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "WORK",
                      "HOME",
                      "OTHER",
                      "FAX",
                      "MOBILE"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                }
             },
             "required": [
                "telephone"
             ]
          },
          "property_EnrichPerson_telephones": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/EnrichTelephone"
             },
             "description": "An array of telephones for this person"
          },
          "property_EnrichPerson_address": {
             "type": "object",
             "properties": {
                "address1": {
                   "type": "string"
                },
                "address2": {
                   "type": "string"
                },
                "city": {
                   "type": "string"
                },
                "region": {
                   "type": "string"
                },
                "region_code": {
                   "type": "string"
                },
                "postal_code": {
                   "type": "string"
                },
                "country": {
                   "type": "string"
                },
                "country_code": {
                   "type": "string"
                }
             },
             "description": "The address of the person"
          },
          "EnrichPersonWorkHistory": {
             "type": "object",
             "properties": {
                "company_id": {
                   "type": "string"
                },
                "company_name": {
                   "type": "string"
                },
                "title": {
                   "type": "string"
                },
                "start_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "end_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "location": {
                   "type": "string"
                },
                "company_domain": {
                   "type": "string"
                }
             },
             "required": [
                "title"
             ]
          },
          "property_EnrichPerson_work_histories": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/EnrichPersonWorkHistory"
             }
          },
          "property_EnrichPerson_raw": {
             "type": "object",
             "additionalProperties": true,
             "description": "The raw data returned by the integration for this person"
          },
          "EnrichPerson": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "title": {
                   "type": "string"
                },
                "birthdate": {
                   "type": "string"
                },
                "image_url": {
                   "type": "string"
                },
                "bio": {
                   "type": "string"
                },
                "company": {
                   "type": "string"
                },
                "company_domain": {
                   "type": "string"
                },
                "emails": {
                   "$ref": "#/components/schemas/property_EnrichPerson_emails"
                },
                "telephones": {
                   "$ref": "#/components/schemas/property_EnrichPerson_telephones"
                },
                "twitter_handle": {
                   "type": "string"
                },
                "linkedin_url": {
                   "type": "string"
                },
                "github_url": {
                   "type": "string"
                },
                "github_username": {
                   "type": "string"
                },
                "twitter_url": {
                   "type": "string"
                },
                "facebook_url": {
                   "type": "string"
                },
                "gender": {
                   "type": "string",
                   "enum": [
                      "MALE",
                      "FEMALE"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "address": {
                   "$ref": "#/components/schemas/property_EnrichPerson_address"
                },
                "timezone": {
                   "type": "string"
                },
                "utc_offset": {
                   "type": "number"
                },
                "work_histories": {
                   "$ref": "#/components/schemas/property_EnrichPerson_work_histories"
                },
                "raw": {
                   "$ref": "#/components/schemas/property_EnrichPerson_raw"
                }
             },
             "description": "A person object from an enrichment integration"
          },
          "property_EnrichCompany_address": {
             "type": "object",
             "properties": {
                "address1": {
                   "type": "string"
                },
                "address2": {
                   "type": "string"
                },
                "city": {
                   "type": "string"
                },
                "region": {
                   "type": "string"
                },
                "region_code": {
                   "type": "string"
                },
                "postal_code": {
                   "type": "string"
                },
                "country": {
                   "type": "string"
                },
                "country_code": {
                   "type": "string"
                }
             },
             "description": "The address of the company"
          },
          "property_EnrichCompany_telephones": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/EnrichTelephone"
             },
             "description": "An array of telephones for this company"
          },
          "property_EnrichCompany_raw": {
             "type": "object",
             "additionalProperties": true,
             "description": "The raw data returned by the integration for this company"
          },
          "EnrichCompany": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "description": {
                   "type": "string"
                },
                "domain": {
                   "type": "string"
                },
                "twitter_handle": {
                   "type": "string"
                },
                "twitter_url": {
                   "type": "string"
                },
                "address": {
                   "$ref": "#/components/schemas/property_EnrichCompany_address"
                },
                "telephones": {
                   "$ref": "#/components/schemas/property_EnrichCompany_telephones"
                },
                "linkedin_url": {
                   "type": "string"
                },
                "crunchbase_url": {
                   "type": "string"
                },
                "facebook_url": {
                   "type": "string"
                },
                "youtube_url": {
                   "type": "string"
                },
                "instagram_url": {
                   "type": "string"
                },
                "yelp_url": {
                   "type": "string"
                },
                "logo_url": {
                   "type": "string"
                },
                "exchange": {
                   "type": "string"
                },
                "stock": {
                   "type": "string"
                },
                "year_founded": {
                   "type": "number"
                },
                "alexa_rank": {
                   "type": "number"
                },
                "naics_code": {
                   "type": "number"
                },
                "sic_code": {
                   "type": "number"
                },
                "employees": {
                   "type": "string"
                },
                "revenue": {
                   "type": "string"
                },
                "industry": {
                   "type": "string"
                },
                "raw": {
                   "$ref": "#/components/schemas/property_EnrichCompany_raw"
                }
             },
             "description": "A company object from an enrichment integration"
          },
          "property_UcCall_telephone": {
             "type": "object",
             "properties": {
                "telephone": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "WORK",
                      "HOME",
                      "OTHER",
                      "FAX",
                      "MOBILE"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                }
             },
             "required": [
                "telephone"
             ],
             "description": "The telephone number called"
          },
          "UcCall": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "contact_id": {
                   "type": "string"
                },
                "telephone": {
                   "$ref": "#/components/schemas/property_UcCall_telephone"
                },
                "start_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "end_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "user_id": {
                   "type": "string"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "UcCalls": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/UcCall"
             }
          },
          "UcEmail": {
             "type": "object",
             "properties": {
                "email": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "WORK",
                      "HOME",
                      "OTHER"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                }
             },
             "required": [
                "email"
             ]
          },
          "property_UcContact_emails": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/UcEmail"
             },
             "description": "An array of email addresses for this contact"
          },
          "UcTelephone": {
             "type": "object",
             "properties": {
                "telephone": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "WORK",
                      "HOME",
                      "OTHER",
                      "FAX",
                      "MOBILE"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                }
             },
             "required": [
                "telephone"
             ]
          },
          "property_UcContact_telephones": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/UcTelephone"
             },
             "description": "An array of telephones for this contact"
          },
          "UcContact": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "title": {
                   "type": "string"
                },
                "company": {
                   "type": "string"
                },
                "emails": {
                   "$ref": "#/components/schemas/property_UcContact_emails"
                },
                "telephones": {
                   "$ref": "#/components/schemas/property_UcContact_telephones"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             },
             "description": "A contact represents a person that optionally is associated with a call"
          },
          "UcContacts": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/UcContact"
             }
          },
          "UcComment": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string"
                },
                "updated_at": {
                   "type": "string"
                },
                "content": {
                   "type": "string"
                },
                "user_id": {
                   "type": "string"
                },
                "call_id": {
                   "type": "string"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             },
             "required": [
                "content"
             ]
          },
          "UcComments": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/UcComment"
             }
          },
          "UcRecordingTranscript": {
             "type": "object",
             "properties": {
                "start_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "end_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "text": {
                   "type": "string"
                },
                "contact_id": {
                   "type": "string"
                },
                "user_id": {
                   "type": "string"
                }
             },
             "required": [
                "text"
             ]
          },
          "property_UcRecordingMedia_transcripts": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/UcRecordingTranscript"
             }
          },
          "UcRecordingMedia": {
             "type": "object",
             "properties": {
                "start_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "end_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "language": {
                   "type": "string"
                },
                "transcripts": {
                   "$ref": "#/components/schemas/property_UcRecordingMedia_transcripts"
                },
                "transcript_download_url": {
                   "type": "string"
                },
                "recording_download_url": {
                   "type": "string"
                }
             }
          },
          "property_UcRecording_media": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/UcRecordingMedia"
             }
          },
          "UcRecording": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "start_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "end_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "expires_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "call_id": {
                   "type": "string"
                },
                "web_url": {
                   "type": "string"
                },
                "contact_id": {
                   "type": "string"
                },
                "contact_name": {
                   "type": "string"
                },
                "contact_phone": {
                   "type": "string"
                },
                "user_id": {
                   "type": "string"
                },
                "media": {
                   "$ref": "#/components/schemas/property_UcRecording_media"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "UcRecordings": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/UcRecording"
             }
          },
          "property_AtsActivity_user_ids": {
             "type": "array",
             "items": {
                "type": "string"
             },
             "description": "id values of the recruiters associated with the activity."
          },
          "property_AtsActivity_from": {
             "type": "object",
             "properties": {
                "name": {
                   "type": "string"
                },
                "email": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "WORK",
                      "HOME",
                      "OTHER"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                }
             },
             "required": [
                "email"
             ]
          },
          "AtsEmail": {
             "type": "object",
             "properties": {
                "name": {
                   "type": "string"
                },
                "email": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "WORK",
                      "HOME",
                      "OTHER"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                }
             },
             "required": [
                "email"
             ]
          },
          "property_AtsActivity_to": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AtsEmail"
             }
          },
          "property_AtsActivity_cc": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AtsEmail"
             }
          },
          "property_AtsActivity_bcc": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AtsEmail"
             }
          },
          "property_AtsActivity_document_ids": {
             "type": "array",
             "items": {
                "type": "string"
             },
             "description": "IDs for AtsDocument.get"
          },
          "AtsActivity": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "candidate_id": {
                   "type": "string"
                },
                "application_id": {
                   "type": "string"
                },
                "job_id": {
                   "type": "string"
                },
                "interview_id": {
                   "type": "string"
                },
                "document_id": {
                   "type": "string"
                },
                "title": {
                   "type": "string"
                },
                "description": {
                   "type": "string"
                },
                "is_private": {
                   "type": "boolean"
                },
                "user_ids": {
                   "$ref": "#/components/schemas/property_AtsActivity_user_ids"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "NOTE",
                      "TASK",
                      "EMAIL"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "from": {
                   "$ref": "#/components/schemas/property_AtsActivity_from"
                },
                "to": {
                   "$ref": "#/components/schemas/property_AtsActivity_to"
                },
                "cc": {
                   "$ref": "#/components/schemas/property_AtsActivity_cc"
                },
                "bcc": {
                   "$ref": "#/components/schemas/property_AtsActivity_bcc"
                },
                "sub_type": {
                   "type": "string"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                },
                "document_ids": {
                   "$ref": "#/components/schemas/property_AtsActivity_document_ids"
                }
             }
          },
          "AtsActivities": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AtsActivity"
             }
          },
          "property_AtsCandidate_emails": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AtsEmail"
             }
          },
          "AtsTelephone": {
             "type": "object",
             "properties": {
                "telephone": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "WORK",
                      "HOME",
                      "OTHER",
                      "FAX",
                      "MOBILE"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                }
             },
             "required": [
                "telephone"
             ]
          },
          "property_AtsCandidate_telephones": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AtsTelephone"
             }
          },
          "property_AtsCandidate_tags": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "property_AtsCandidate_address": {
             "type": "object",
             "properties": {
                "address1": {
                   "type": "string"
                },
                "address2": {
                   "type": "string"
                },
                "city": {
                   "type": "string"
                },
                "region": {
                   "type": "string"
                },
                "region_code": {
                   "type": "string"
                },
                "postal_code": {
                   "type": "string"
                },
                "country": {
                   "type": "string"
                },
                "country_code": {
                   "type": "string"
                }
             }
          },
          "property_AtsCandidate_link_urls": {
             "type": "array",
             "items": {
                "type": "string"
             },
             "description": "URLs for web pages containing additional material about the candidate (LinkedIn, other social media, articles, etc.)"
          },
          "property_AtsCandidate_sources": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "AtsCandidateExperience": {
             "type": "object",
             "properties": {
                "company_name": {
                   "type": "string"
                },
                "title": {
                   "type": "string"
                },
                "start_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "end_at": {
                   "type": "string",
                   "format": "date-time"
                }
             }
          },
          "property_AtsCandidate_experiences": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AtsCandidateExperience"
             }
          },
          "AtsCandidateEducation": {
             "type": "object",
             "properties": {
                "institution": {
                   "type": "string"
                },
                "level": {
                   "type": "string"
                },
                "degree": {
                   "type": "string"
                },
                "field_of_study": {
                   "type": "string"
                },
                "start_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "end_at": {
                   "type": "string",
                   "format": "date-time"
                }
             }
          },
          "property_AtsCandidate_education": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AtsCandidateEducation"
             }
          },
          "property_AtsCandidate_skills": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "AtsMetadata": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "key": {
                   "type": "string"
                },
                "slug": {
                   "type": "string"
                },
                "value": {
                   "additionalProperties": true,
                   "anyOf": [
                      {
                         "type": "object"
                      },
                      {
                         "type": "string"
                      },
                      {
                         "type": "number"
                      },
                      {
                         "type": "boolean"
                      },
                      {
                         "type": "array",
                         "items": {
                            "anyOf": [
                               {
                                  "type": "object"
                               },
                               {
                                  "type": "string"
                               },
                               {
                                  "type": "number"
                               },
                               {
                                  "type": "boolean"
                               }
                            ]
                         }
                      }
                   ]
                },
                "namespace": {
                   "type": "string"
                },
                "type": {
                   "type": "string"
                },
                "format": {
                   "type": "string",
                   "enum": [
                      "TEXT",
                      "NUMBER",
                      "DATE",
                      "BOOLEAN",
                      "FILE",
                      "TEXTAREA",
                      "SINGLE_SELECT",
                      "MULTIPLE_SELECT",
                      "MEASUREMENT",
                      "PRICE",
                      "YES_NO",
                      "CURRENCY",
                      "URL"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "extra_data": {
                   "additionalProperties": true,
                   "anyOf": [
                      {
                         "type": "object"
                      },
                      {
                         "type": "string"
                      },
                      {
                         "type": "number"
                      },
                      {
                         "type": "boolean"
                      },
                      {
                         "type": "array",
                         "items": {
                            "anyOf": [
                               {
                                  "type": "object"
                               },
                               {
                                  "type": "string"
                               },
                               {
                                  "type": "number"
                               },
                               {
                                  "type": "boolean"
                               }
                            ]
                         }
                      }
                   ]
                }
             }
          },
          "property_AtsCandidate_metadata": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AtsMetadata"
             }
          },
          "AtsCandidate": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "emails": {
                   "$ref": "#/components/schemas/property_AtsCandidate_emails"
                },
                "title": {
                   "type": "string"
                },
                "telephones": {
                   "$ref": "#/components/schemas/property_AtsCandidate_telephones"
                },
                "company_name": {
                   "type": "string"
                },
                "image_url": {
                   "type": "string"
                },
                "tags": {
                   "$ref": "#/components/schemas/property_AtsCandidate_tags"
                },
                "address": {
                   "$ref": "#/components/schemas/property_AtsCandidate_address"
                },
                "external_identifier": {
                   "type": "string"
                },
                "link_urls": {
                   "$ref": "#/components/schemas/property_AtsCandidate_link_urls"
                },
                "origin": {
                   "type": "string",
                   "enum": [
                      "AGENCY",
                      "APPLIED",
                      "INTERNAL",
                      "REFERRED",
                      "SOURCED",
                      "UNIVERSITY"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "company_id": {
                   "type": "string"
                },
                "sources": {
                   "$ref": "#/components/schemas/property_AtsCandidate_sources"
                },
                "date_of_birth": {
                   "type": "string",
                   "format": "date-time"
                },
                "user_id": {
                   "type": "string"
                },
                "web_url": {
                   "type": "string"
                },
                "experiences": {
                   "$ref": "#/components/schemas/property_AtsCandidate_experiences"
                },
                "education": {
                   "$ref": "#/components/schemas/property_AtsCandidate_education"
                },
                "skills": {
                   "$ref": "#/components/schemas/property_AtsCandidate_skills"
                },
                "metadata": {
                   "$ref": "#/components/schemas/property_AtsCandidate_metadata"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "AtsCandidates": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AtsCandidate"
             }
          },
          "property_AtsJob_recruiter_ids": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "property_AtsJob_hiring_manager_ids": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "AtsAddress": {
             "type": "object",
             "properties": {
                "address1": {
                   "type": "string"
                },
                "address2": {
                   "type": "string"
                },
                "city": {
                   "type": "string"
                },
                "region": {
                   "type": "string"
                },
                "region_code": {
                   "type": "string"
                },
                "postal_code": {
                   "type": "string"
                },
                "country": {
                   "type": "string"
                },
                "country_code": {
                   "type": "string"
                }
             }
          },
          "property_AtsJob_addresses": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AtsAddress"
             }
          },
          "AtsCompensation": {
             "type": "object",
             "properties": {
                "type": {
                   "type": "string",
                   "enum": [
                      "SALARY",
                      "BONUS",
                      "STOCK_OPTIONS",
                      "EQUITY",
                      "OTHER"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "min": {
                   "type": "number"
                },
                "max": {
                   "type": "number"
                },
                "currency": {
                   "type": "string"
                },
                "frequency": {
                   "type": "string",
                   "enum": [
                      "ONE_TIME",
                      "DAY",
                      "QUARTER",
                      "YEAR",
                      "HOUR",
                      "MONTH",
                      "WEEK"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                }
             }
          },
          "property_AtsJob_compensation": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AtsCompensation"
             }
          },
          "property_AtsJob_departments": {
             "type": "array",
             "items": {
                "type": "string"
             },
             "description": "@deprecated Use `groups` instead"
          },
          "property_AtsJob_public_job_urls": {
             "type": "array",
             "items": {
                "type": "string"
             },
             "description": "URLs for pages containing public listings for the job"
          },
          "property_AtsJobQuestion_options": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "AtsJobQuestion": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "question": {
                   "type": "string"
                },
                "required": {
                   "type": "boolean"
                },
                "description": {
                   "type": "string"
                },
                "prompt": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "TEXT",
                      "NUMBER",
                      "DATE",
                      "BOOLEAN",
                      "MULTIPLE_CHOICE",
                      "FILE",
                      "TEXTAREA",
                      "MULTIPLE_SELECT",
                      "UNIVERSITY",
                      "YES_NO",
                      "CURRENCY",
                      "URL"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "options": {
                   "$ref": "#/components/schemas/property_AtsJobQuestion_options"
                }
             },
             "required": [
                "question",
                "type"
             ]
          },
          "property_AtsJob_questions": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AtsJobQuestion"
             }
          },
          "property_AtsJobPosting_address": {
             "type": "object",
             "properties": {
                "address1": {
                   "type": "string"
                },
                "address2": {
                   "type": "string"
                },
                "city": {
                   "type": "string"
                },
                "region": {
                   "type": "string"
                },
                "region_code": {
                   "type": "string"
                },
                "postal_code": {
                   "type": "string"
                },
                "country": {
                   "type": "string"
                },
                "country_code": {
                   "type": "string"
                }
             },
             "description": "job-post-specific address"
          },
          "AtsJobPosting": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "posting_url": {
                   "type": "string"
                },
                "name": {
                   "type": "string"
                },
                "description": {
                   "type": "string"
                },
                "address": {
                   "$ref": "#/components/schemas/property_AtsJobPosting_address"
                },
                "location": {
                   "type": "string"
                },
                "is_active": {
                   "type": "boolean"
                }
             }
          },
          "property_AtsJob_postings": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AtsJobPosting"
             },
             "description": "Public job postings"
          },
          "AtsGroup": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "name": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "TEAM",
                      "GROUP",
                      "DEPARTMENT",
                      "DIVISION",
                      "BUSINESS_UNIT",
                      "BRANCH",
                      "SUB_DEPARTMENT"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                }
             }
          },
          "property_AtsJob_groups": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AtsGroup"
             },
             "description": "The departments/divisions/teams that this job belongs to"
          },
          "AtsJobOpening": {
             "type": "object",
             "properties": {
                "status": {
                   "type": "string",
                   "enum": [
                      "OPEN",
                      "CLOSED"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "opened_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "closed_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "application_id": {
                   "type": "string"
                },
                "close_reason": {
                   "type": "string"
                }
             }
          },
          "property_AtsJob_openings": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AtsJobOpening"
             }
          },
          "property_AtsJob_metadata": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AtsMetadata"
             }
          },
          "AtsJob": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "description": {
                   "type": "string"
                },
                "recruiter_ids": {
                   "$ref": "#/components/schemas/property_AtsJob_recruiter_ids"
                },
                "hiring_manager_ids": {
                   "$ref": "#/components/schemas/property_AtsJob_hiring_manager_ids"
                },
                "status": {
                   "type": "string",
                   "enum": [
                      "ARCHIVED",
                      "PENDING",
                      "DRAFT",
                      "OPEN",
                      "CLOSED"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "closed_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "addresses": {
                   "$ref": "#/components/schemas/property_AtsJob_addresses"
                },
                "compensation": {
                   "$ref": "#/components/schemas/property_AtsJob_compensation"
                },
                "employment_type": {
                   "type": "string",
                   "enum": [
                      "FULL_TIME",
                      "PART_TIME",
                      "CONTRACTOR",
                      "INTERN",
                      "CONSULTANT",
                      "VOLUNTEER",
                      "CASUAL",
                      "SEASONAL",
                      "FREELANCE",
                      "OTHER"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "remote": {
                   "type": "boolean"
                },
                "departments": {
                   "$ref": "#/components/schemas/property_AtsJob_departments"
                },
                "language_locale": {
                   "type": "string"
                },
                "public_job_urls": {
                   "$ref": "#/components/schemas/property_AtsJob_public_job_urls"
                },
                "number_of_openings": {
                   "type": "number"
                },
                "company_id": {
                   "type": "string"
                },
                "questions": {
                   "$ref": "#/components/schemas/property_AtsJob_questions"
                },
                "postings": {
                   "$ref": "#/components/schemas/property_AtsJob_postings"
                },
                "groups": {
                   "$ref": "#/components/schemas/property_AtsJob_groups"
                },
                "openings": {
                   "$ref": "#/components/schemas/property_AtsJob_openings"
                },
                "metadata": {
                   "$ref": "#/components/schemas/property_AtsJob_metadata"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "AtsJobs": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AtsJob"
             }
          },
          "property_AtsInterview_user_ids": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "AtsInterview": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "candidate_id": {
                   "type": "string"
                },
                "job_id": {
                   "type": "string"
                },
                "application_id": {
                   "type": "string"
                },
                "user_ids": {
                   "$ref": "#/components/schemas/property_AtsInterview_user_ids"
                },
                "status": {
                   "type": "string",
                   "enum": [
                      "SCHEDULED",
                      "AWAITING_FEEDBACK",
                      "COMPLETE",
                      "CANCELED",
                      "NEEDS_SCHEDULING"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "start_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "end_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "location": {
                   "type": "string"
                },
                "external_event_xref": {
                   "type": "string"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "AtsInterviews": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AtsInterview"
             }
          },
          "AtsDocument": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "document_url": {
                   "type": "string"
                },
                "document_data": {
                   "type": "string"
                },
                "filename": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "RESUME",
                      "COVER_LETTER",
                      "OFFER_PACKET",
                      "OFFER_LETTER",
                      "TAKE_HOME_TEST",
                      "OTHER"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "candidate_id": {
                   "type": "string"
                },
                "application_id": {
                   "type": "string"
                },
                "job_id": {
                   "type": "string"
                },
                "user_id": {
                   "type": "string"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "AtsDocuments": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AtsDocument"
             }
          },
          "AtsStatus": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "status": {
                   "type": "string",
                   "enum": [
                      "NEW",
                      "REVIEWING",
                      "SCREENING",
                      "SUBMITTED",
                      "FIRST_INTERVIEW",
                      "SECOND_INTERVIEW",
                      "THIRD_INTERVIEW",
                      "BACKGROUND_CHECK",
                      "OFFERED",
                      "ACCEPTED",
                      "HIRED",
                      "REJECTED",
                      "DECLINED",
                      "WITHDRAWN"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "original_status": {
                   "type": "string"
                },
                "description": {
                   "type": "string"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "AtsStatuses": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AtsStatus"
             }
          },
          "property_AtsApplicationAnswer_answers": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "AtsApplicationAnswer": {
             "type": "object",
             "properties": {
                "question_id": {
                   "type": "string"
                },
                "answers": {
                   "$ref": "#/components/schemas/property_AtsApplicationAnswer_answers"
                }
             },
             "required": [
                "question_id",
                "answers"
             ]
          },
          "property_AtsApplication_answers": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AtsApplicationAnswer"
             }
          },
          "property_AtsOffer_compensation": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AtsCompensation"
             },
             "description": "compensation details for the offer"
          },
          "AtsOffer": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "creator_user_id": {
                   "type": "string"
                },
                "employee_user_id": {
                   "type": "string"
                },
                "sent_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "accepted_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "rejected_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "start_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "compensation": {
                   "$ref": "#/components/schemas/property_AtsOffer_compensation"
                },
                "status": {
                   "type": "string",
                   "enum": [
                      "CREATED",
                      "SENT",
                      "ACCEPTED",
                      "REJECTED"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "property_AtsApplication_offers": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AtsOffer"
             }
          },
          "property_AtsApplication_metadata": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AtsMetadata"
             }
          },
          "AtsApplication": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "candidate_id": {
                   "type": "string"
                },
                "job_id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "applied_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "hired_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "rejected_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "rejected_reason": {
                   "type": "string"
                },
                "source": {
                   "type": "string"
                },
                "status": {
                   "type": "string",
                   "enum": [
                      "NEW",
                      "REVIEWING",
                      "SCREENING",
                      "SUBMITTED",
                      "FIRST_INTERVIEW",
                      "SECOND_INTERVIEW",
                      "THIRD_INTERVIEW",
                      "BACKGROUND_CHECK",
                      "OFFERED",
                      "ACCEPTED",
                      "HIRED",
                      "REJECTED",
                      "DECLINED",
                      "WITHDRAWN"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "original_status": {
                   "type": "string"
                },
                "answers": {
                   "$ref": "#/components/schemas/property_AtsApplication_answers"
                },
                "offers": {
                   "$ref": "#/components/schemas/property_AtsApplication_offers"
                },
                "metadata": {
                   "$ref": "#/components/schemas/property_AtsApplication_metadata"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "AtsApplications": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AtsApplication"
             }
          },
          "AtsScorecardQuestion": {
             "type": "object",
             "properties": {
                "text": {
                   "type": "string"
                },
                "description": {
                   "type": "string"
                },
                "answer": {
                   "type": "string"
                }
             },
             "required": [
                "text"
             ]
          },
          "property_AtsScorecard_questions": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AtsScorecardQuestion"
             }
          },
          "AtsScorecard": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "application_id": {
                   "type": "string"
                },
                "interviewer_id": {
                   "type": "string"
                },
                "interview_id": {
                   "type": "string"
                },
                "candidate_id": {
                   "type": "string"
                },
                "job_id": {
                   "type": "string"
                },
                "recommendation": {
                   "type": "string",
                   "enum": [
                      "DEFINITELY_NO",
                      "NO",
                      "YES",
                      "STRONG_YES"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "comment": {
                   "type": "string"
                },
                "questions": {
                   "$ref": "#/components/schemas/property_AtsScorecard_questions"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "AtsScorecards": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AtsScorecard"
             }
          },
          "property_AtsCompany_address": {
             "type": "object",
             "properties": {
                "address1": {
                   "type": "string"
                },
                "address2": {
                   "type": "string"
                },
                "city": {
                   "type": "string"
                },
                "region": {
                   "type": "string"
                },
                "region_code": {
                   "type": "string"
                },
                "postal_code": {
                   "type": "string"
                },
                "country": {
                   "type": "string"
                },
                "country_code": {
                   "type": "string"
                }
             }
          },
          "property_AtsCompany_recruiter_ids": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "property_AtsCompany_metadata": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AtsMetadata"
             }
          },
          "AtsCompany": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "address": {
                   "$ref": "#/components/schemas/property_AtsCompany_address"
                },
                "website_url": {
                   "type": "string"
                },
                "phone": {
                   "type": "string"
                },
                "parent_id": {
                   "type": "string"
                },
                "recruiter_ids": {
                   "$ref": "#/components/schemas/property_AtsCompany_recruiter_ids"
                },
                "metadata": {
                   "$ref": "#/components/schemas/property_AtsCompany_metadata"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             },
             "required": [
                "name"
             ]
          },
          "AtsCompanies": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AtsCompany"
             }
          },
          "HrisEmail": {
             "type": "object",
             "properties": {
                "email": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "WORK",
                      "HOME",
                      "OTHER"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                }
             },
             "required": [
                "email"
             ]
          },
          "property_HrisEmployee_emails": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/HrisEmail"
             }
          },
          "HrisTelephone": {
             "type": "object",
             "properties": {
                "telephone": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "WORK",
                      "HOME",
                      "OTHER",
                      "FAX",
                      "MOBILE"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                }
             },
             "required": [
                "telephone"
             ]
          },
          "property_HrisEmployee_telephones": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/HrisTelephone"
             }
          },
          "property_HrisEmployee_address": {
             "type": "object",
             "properties": {
                "address1": {
                   "type": "string"
                },
                "address2": {
                   "type": "string"
                },
                "city": {
                   "type": "string"
                },
                "region": {
                   "type": "string"
                },
                "region_code": {
                   "type": "string"
                },
                "postal_code": {
                   "type": "string"
                },
                "country": {
                   "type": "string"
                },
                "country_code": {
                   "type": "string"
                }
             }
          },
          "property_HrisEmployee_employee_roles": {
             "type": "array",
             "items": {
                "type": "string",
                "enum": [
                   "ADMIN",
                   "MANAGER",
                   "RECRUITER",
                   "SALESREP",
                   "INTERVIEWER"
                ],
                "x-speakeasy-unknown-values": "allow"
             }
          },
          "HrisCompensation": {
             "type": "object",
             "properties": {
                "type": {
                   "type": "string",
                   "enum": [
                      "SALARY",
                      "BONUS",
                      "STOCK_OPTIONS",
                      "EQUITY",
                      "OTHER"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "amount": {
                   "type": "number"
                },
                "currency": {
                   "type": "string"
                },
                "frequency": {
                   "type": "string",
                   "enum": [
                      "ONE_TIME",
                      "DAY",
                      "QUARTER",
                      "YEAR",
                      "HOUR",
                      "MONTH",
                      "WEEK"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "group_id": {
                   "type": "string"
                }
             }
          },
          "property_HrisEmployee_compensation": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/HrisCompensation"
             }
          },
          "property_HrisGroup_user_ids": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "property_HrisGroup_manager_ids": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "HrisGroup": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "description": {
                   "type": "string"
                },
                "parent_id": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "TEAM",
                      "GROUP",
                      "DEPARTMENT",
                      "DIVISION",
                      "BUSINESS_UNIT",
                      "BRANCH",
                      "SUB_DEPARTMENT"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "user_ids": {
                   "$ref": "#/components/schemas/property_HrisGroup_user_ids"
                },
                "manager_ids": {
                   "$ref": "#/components/schemas/property_HrisGroup_manager_ids"
                },
                "is_active": {
                   "type": "boolean"
                },
                "company_id": {
                   "type": "string"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "property_HrisEmployee_groups": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/HrisGroup"
             },
             "description": "Which groups/teams/units that this employee/user belongs to.  May not have all of the Group fields present, but should have id, name, or email."
          },
          "property_HrisLocation_address": {
             "type": "object",
             "properties": {
                "address1": {
                   "type": "string"
                },
                "address2": {
                   "type": "string"
                },
                "city": {
                   "type": "string"
                },
                "region": {
                   "type": "string"
                },
                "region_code": {
                   "type": "string"
                },
                "postal_code": {
                   "type": "string"
                },
                "country": {
                   "type": "string"
                },
                "country_code": {
                   "type": "string"
                }
             }
          },
          "property_HrisLocation_telephones": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/HrisTelephone"
             }
          },
          "HrisLocation": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "description": {
                   "type": "string"
                },
                "address": {
                   "$ref": "#/components/schemas/property_HrisLocation_address"
                },
                "parent_id": {
                   "type": "string"
                },
                "external_identifier": {
                   "type": "string"
                },
                "telephones": {
                   "$ref": "#/components/schemas/property_HrisLocation_telephones"
                },
                "timezone": {
                   "type": "string"
                },
                "currency": {
                   "type": "string"
                },
                "language_locale": {
                   "type": "string"
                },
                "is_active": {
                   "type": "boolean"
                },
                "is_hq": {
                   "type": "boolean"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "property_HrisEmployee_locations": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/HrisLocation"
             }
          },
          "HrisMetadata": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "key": {
                   "type": "string"
                },
                "value": {
                   "additionalProperties": true,
                   "anyOf": [
                      {
                         "type": "object"
                      },
                      {
                         "type": "string"
                      },
                      {
                         "type": "number"
                      },
                      {
                         "type": "boolean"
                      },
                      {
                         "type": "array",
                         "items": {
                            "anyOf": [
                               {
                                  "type": "object"
                               },
                               {
                                  "type": "string"
                               },
                               {
                                  "type": "number"
                               },
                               {
                                  "type": "boolean"
                               }
                            ]
                         }
                      }
                   ]
                },
                "namespace": {
                   "type": "string"
                },
                "type": {
                   "type": "string"
                },
                "format": {
                   "type": "string",
                   "enum": [
                      "TEXT",
                      "NUMBER",
                      "DATE",
                      "BOOLEAN",
                      "FILE",
                      "TEXTAREA",
                      "SINGLE_SELECT",
                      "MULTIPLE_SELECT",
                      "MEASUREMENT",
                      "PRICE",
                      "YES_NO",
                      "CURRENCY",
                      "URL"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "extra_data": {
                   "additionalProperties": true,
                   "anyOf": [
                      {
                         "type": "object"
                      },
                      {
                         "type": "string"
                      },
                      {
                         "type": "number"
                      },
                      {
                         "type": "boolean"
                      },
                      {
                         "type": "array",
                         "items": {
                            "anyOf": [
                               {
                                  "type": "object"
                               },
                               {
                                  "type": "string"
                               },
                               {
                                  "type": "number"
                               },
                               {
                                  "type": "boolean"
                               }
                            ]
                         }
                      }
                   ]
                },
                "slug": {
                   "type": "string"
                }
             }
          },
          "property_HrisEmployee_metadata": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/HrisMetadata"
             }
          },
          "HrisEmployee": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "emails": {
                   "$ref": "#/components/schemas/property_HrisEmployee_emails"
                },
                "department": {
                   "type": "string"
                },
                "division": {
                   "type": "string"
                },
                "title": {
                   "type": "string"
                },
                "manager_id": {
                   "type": "string"
                },
                "employment_status": {
                   "type": "string",
                   "enum": [
                      "ACTIVE",
                      "INACTIVE"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "location": {
                   "type": "string"
                },
                "gender": {
                   "type": "string",
                   "enum": [
                      "MALE",
                      "FEMALE",
                      "INTERSEX",
                      "TRANS",
                      "NON_BINARY"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "telephones": {
                   "$ref": "#/components/schemas/property_HrisEmployee_telephones"
                },
                "date_of_birth": {
                   "type": "string",
                   "format": "date-time"
                },
                "employee_number": {
                   "type": "string"
                },
                "hired_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "terminated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "marital_status": {
                   "type": "string",
                   "enum": [
                      "MARRIED",
                      "SINGLE"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "employment_type": {
                   "type": "string",
                   "enum": [
                      "FULL_TIME",
                      "PART_TIME",
                      "CONTRACTOR",
                      "INTERN",
                      "CONSULTANT",
                      "VOLUNTEER",
                      "CASUAL",
                      "SEASONAL",
                      "FREELANCE",
                      "OTHER"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "address": {
                   "$ref": "#/components/schemas/property_HrisEmployee_address"
                },
                "language_locale": {
                   "type": "string"
                },
                "currency": {
                   "type": "string"
                },
                "timezone": {
                   "type": "string"
                },
                "image_url": {
                   "type": "string"
                },
                "company_id": {
                   "type": "string"
                },
                "pronouns": {
                   "type": "string"
                },
                "employee_roles": {
                   "$ref": "#/components/schemas/property_HrisEmployee_employee_roles"
                },
                "compensation": {
                   "$ref": "#/components/schemas/property_HrisEmployee_compensation"
                },
                "salutation": {
                   "type": "string"
                },
                "bio": {
                   "type": "string"
                },
                "ssn_sin": {
                   "type": "string"
                },
                "groups": {
                   "$ref": "#/components/schemas/property_HrisEmployee_groups"
                },
                "locations": {
                   "$ref": "#/components/schemas/property_HrisEmployee_locations"
                },
                "metadata": {
                   "$ref": "#/components/schemas/property_HrisEmployee_metadata"
                },
                "storage_quota_allocated": {
                   "type": "number"
                },
                "storage_quota_used": {
                   "type": "number"
                },
                "storage_quota_available": {
                   "type": "number"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "HrisEmployees": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/HrisEmployee"
             }
          },
          "property_HrisCompany_address": {
             "type": "object",
             "properties": {
                "address1": {
                   "type": "string"
                },
                "address2": {
                   "type": "string"
                },
                "city": {
                   "type": "string"
                },
                "region": {
                   "type": "string"
                },
                "region_code": {
                   "type": "string"
                },
                "postal_code": {
                   "type": "string"
                },
                "country": {
                   "type": "string"
                },
                "country_code": {
                   "type": "string"
                }
             }
          },
          "HrisCompany": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "legal_name": {
                   "type": "string"
                },
                "address": {
                   "$ref": "#/components/schemas/property_HrisCompany_address"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "HrisCompanies": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/HrisCompany"
             }
          },
          "HrisLocations": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/HrisLocation"
             }
          },
          "HrisGroups": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/HrisGroup"
             }
          },
          "HrisTimeoff": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "user_id": {
                   "type": "string"
                },
                "company_id": {
                   "type": "string"
                },
                "start_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "end_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "is_paid": {
                   "type": "boolean"
                },
                "status": {
                   "type": "string",
                   "enum": [
                      "APPROVED",
                      "PENDING",
                      "DENIED"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "approver_user_id": {
                   "type": "string"
                },
                "approved_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "comments": {
                   "type": "string"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                },
                "reason": {
                   "type": "string"
                }
             },
             "required": [
                "start_at"
             ]
          },
          "HrisTimeoffs": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/HrisTimeoff"
             }
          },
          "HrisPayslipDetail": {
             "type": "object",
             "properties": {
                "type": {
                   "type": "string",
                   "enum": [
                      "EARNING_SALARY",
                      "EARNING_OVERTIME",
                      "EARNING_TIP",
                      "EARNING_BONUS",
                      "EARNING_COMMISSION",
                      "EARNING_ADJUSTMENT",
                      "EARNING",
                      "PRETAX_DEDUCTION",
                      "PRETAX_DEDUCTION_HEALTH_INSURANCE",
                      "PRETAX_DEDUCTION_RETIREMENT",
                      "PRETAX_DEDUCTION_HRA",
                      "TAX_FEDERAL",
                      "TAX_REGION",
                      "TAX_LOCAL",
                      "POSTTAX_BENEFIT",
                      "POSTTAX_GARNISHMENT",
                      "REIMBURSEMENT"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "name": {
                   "type": "string"
                },
                "description": {
                   "type": "string"
                },
                "amount": {
                   "type": "number"
                },
                "employee_amount": {
                   "type": "number"
                },
                "company_amount": {
                   "type": "number"
                }
             },
             "required": [
                "amount"
             ]
          },
          "property_HrisPayslip_details": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/HrisPayslipDetail"
             }
          },
          "HrisPayslip": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "user_id": {
                   "type": "string"
                },
                "company_id": {
                   "type": "string"
                },
                "payment_type": {
                   "type": "string",
                   "enum": [
                      "DIRECT",
                      "CHEQUE",
                      "CASH"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "paid_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "start_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "end_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "currency": {
                   "type": "string"
                },
                "gross_amount": {
                   "type": "number"
                },
                "net_amount": {
                   "type": "number"
                },
                "details": {
                   "$ref": "#/components/schemas/property_HrisPayslip_details"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             },
             "required": [
                "raw"
             ]
          },
          "HrisPayslips": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/HrisPayslip"
             }
          },
          "property_HrisDevice_user_ids": {
             "type": "array",
             "items": {
                "type": "string"
             },
             "description": "users who have this device"
          },
          "property_HrisDevice_admin_user_ids": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "HrisDevice": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "asset_tag": {
                   "type": "string"
                },
                "version": {
                   "type": "string"
                },
                "manufacturer": {
                   "type": "string"
                },
                "model": {
                   "type": "string"
                },
                "os": {
                   "type": "string"
                },
                "os_version": {
                   "type": "string"
                },
                "user_ids": {
                   "$ref": "#/components/schemas/property_HrisDevice_user_ids"
                },
                "admin_user_ids": {
                   "$ref": "#/components/schemas/property_HrisDevice_admin_user_ids"
                },
                "location_id": {
                   "type": "string"
                },
                "has_antivirus": {
                   "type": "boolean"
                },
                "has_password_manager": {
                   "type": "boolean"
                },
                "has_firewall": {
                   "type": "boolean"
                },
                "has_hd_encrypted": {
                   "type": "boolean"
                },
                "has_screenlock": {
                   "type": "boolean"
                },
                "is_missing": {
                   "type": "boolean"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             },
             "required": [
                "name"
             ]
          },
          "HrisDevices": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/HrisDevice"
             }
          },
          "property_HrisTimeshift_compensation": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/HrisCompensation"
             }
          },
          "HrisTimeshift": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "employee_user_id": {
                   "type": "string"
                },
                "start_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "end_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "location_id": {
                   "type": "string"
                },
                "company_id": {
                   "type": "string"
                },
                "group_id": {
                   "type": "string"
                },
                "compensation": {
                   "$ref": "#/components/schemas/property_HrisTimeshift_compensation"
                },
                "approver_user_id": {
                   "type": "string"
                },
                "approved_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "hours": {
                   "type": "number"
                },
                "is_approved": {
                   "type": "boolean"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             },
             "required": [
                "employee_user_id",
                "start_at",
                "end_at"
             ]
          },
          "HrisTimeshifts": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/HrisTimeshift"
             }
          },
          "property_VerificationPackage_aliases": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "property_VerificationPackage_tags": {
             "type": "array",
             "items": {
                "type": "string"
             },
             "description": "Category (Verification, Validation, Background Check)"
          },
          "property_VerificationParameter_options": {
             "type": "array",
             "items": {
                "type": "string"
             },
             "description": "options for MULTIPLE_CHOICE and MULTIPLE_SELECT"
          },
          "property_VerificationParameter_file_types": {
             "type": "array",
             "items": {
                "type": "string"
             },
             "description": "valid file mime types"
          },
          "property_VerificationParameter_valid_regions": {
             "type": "array",
             "items": {
                "type": "string"
             },
             "description": "{country}-{stateprovince/territory} or just {country} 2-digit ISO codes"
          },
          "VerificationParameter": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "name": {
                   "type": "string"
                },
                "public_question": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "TEXT",
                      "NUMBER",
                      "MULTIPLE_CHOICE",
                      "MULTIPLE_SELECT",
                      "DATE",
                      "FILE"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "options": {
                   "$ref": "#/components/schemas/property_VerificationParameter_options"
                },
                "file_types": {
                   "$ref": "#/components/schemas/property_VerificationParameter_file_types"
                },
                "valid_regions": {
                   "$ref": "#/components/schemas/property_VerificationParameter_valid_regions"
                },
                "is_required": {
                   "type": "boolean"
                }
             },
             "required": [
                "name"
             ]
          },
          "property_VerificationPackage_parameters": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/VerificationParameter"
             },
             "description": "Questions that need to be answered for this verification"
          },
          "property_VerificationTime_valid_regions": {
             "type": "array",
             "items": {
                "type": "string"
             },
             "description": "{country}-{stateprovince/territory} or just {country} 2-digit ISO codes"
          },
          "VerificationTime": {
             "type": "object",
             "properties": {
                "milliseconds": {
                   "type": "number"
                },
                "valid_regions": {
                   "$ref": "#/components/schemas/property_VerificationTime_valid_regions"
                }
             }
          },
          "property_VerificationPackage_average_processing_times": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/VerificationTime"
             },
             "description": "average processing time in minutes"
          },
          "VerificationPackage": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "IDENTITY_VERIFICATION",
                      "SCREENING",
                      "BACKGROUND_CHECK",
                      "EMPLOYMENT_VERIFICATION",
                      "EDUCATION_VERIFICATION",
                      "CREDIT_CHECK",
                      "FRAUD_PREVENTION",
                      "OTHER"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "aliases": {
                   "$ref": "#/components/schemas/property_VerificationPackage_aliases"
                },
                "tags": {
                   "$ref": "#/components/schemas/property_VerificationPackage_tags"
                },
                "description": {
                   "type": "string"
                },
                "parameters": {
                   "$ref": "#/components/schemas/property_VerificationPackage_parameters"
                },
                "average_processing_times": {
                   "$ref": "#/components/schemas/property_VerificationPackage_average_processing_times"
                },
                "has_redirect_url": {
                   "type": "boolean"
                },
                "has_target_url": {
                   "type": "boolean"
                },
                "needs_ip_address": {
                   "type": "boolean"
                },
                "cost_amount": {
                   "type": "number"
                },
                "currency": {
                   "type": "string"
                },
                "max_score": {
                   "type": "number"
                },
                "info_url": {
                   "type": "string"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             },
             "required": [
                "id",
                "name",
                "type"
             ]
          },
          "VerificationPackages": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/VerificationPackage"
             }
          },
          "property_VerificationParameterInput_inputs": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "VerificationParameterInput": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "name": {
                   "type": "string"
                },
                "inputs": {
                   "$ref": "#/components/schemas/property_VerificationParameterInput_inputs"
                }
             }
          },
          "property_VerificationRequest_parameters": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/VerificationParameterInput"
             }
          },
          "VerificationAddress": {
             "type": "object",
             "properties": {
                "address1": {
                   "type": "string"
                },
                "address2": {
                   "type": "string"
                },
                "city": {
                   "type": "string"
                },
                "region": {
                   "type": "string"
                },
                "region_code": {
                   "type": "string"
                },
                "postal_code": {
                   "type": "string"
                },
                "country": {
                   "type": "string"
                },
                "country_code": {
                   "type": "string"
                }
             }
          },
          "property_VerificationRequest_profile_addresses": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/VerificationAddress"
             }
          },
          "property_VerificationRequest_profile_emails": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "property_VerificationRequest_profile_telephones": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "property_VerificationRequest_response_download_urls": {
             "type": "array",
             "items": {
                "type": "string"
             },
             "description": "report download"
          },
          "VerificationResponseDetail": {
             "type": "object",
             "properties": {
                "title": {
                   "type": "string"
                },
                "text": {
                   "type": "string"
                },
                "is_private": {
                   "type": "boolean"
                },
                "is_failed_reason": {
                   "type": "boolean"
                },
                "parameter_id": {
                   "type": "string"
                },
                "download_url": {
                   "type": "string"
                }
             }
          },
          "property_VerificationRequest_response_details": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/VerificationResponseDetail"
             }
          },
          "VerificationRequest": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "package_id": {
                   "type": "string"
                },
                "parameters": {
                   "$ref": "#/components/schemas/property_VerificationRequest_parameters"
                },
                "target_url": {
                   "type": "string"
                },
                "candidate_id": {
                   "type": "string"
                },
                "profile_ip_address": {
                   "type": "string"
                },
                "profile_name": {
                   "type": "string"
                },
                "profile_date_of_birth": {
                   "type": "string"
                },
                "profile_addresses": {
                   "$ref": "#/components/schemas/property_VerificationRequest_profile_addresses"
                },
                "profile_gender": {
                   "type": "string",
                   "enum": [
                      "MALE",
                      "FEMALE",
                      "INTERSEX",
                      "TRANS",
                      "NON_BINARY"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "profile_emails": {
                   "$ref": "#/components/schemas/property_VerificationRequest_profile_emails"
                },
                "profile_telephones": {
                   "$ref": "#/components/schemas/property_VerificationRequest_profile_telephones"
                },
                "profile_national_identifier": {
                   "type": "string"
                },
                "response_completed_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "response_expires_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "response_issued_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "response_status": {
                   "type": "string",
                   "enum": [
                      "COMPLETED",
                      "FAILED",
                      "PASSED",
                      "PENDING"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "response_score": {
                   "type": "number"
                },
                "response_redirect_url": {
                   "type": "string"
                },
                "response_download_urls": {
                   "$ref": "#/components/schemas/property_VerificationRequest_response_download_urls"
                },
                "response_details": {
                   "$ref": "#/components/schemas/property_VerificationRequest_response_details"
                },
                "response_source": {
                   "type": "string"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "VerificationRequests": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/VerificationRequest"
             }
          },
          "Result": {
             "type": "object",
             "additionalProperties": true,
             "description": "integration-specific result"
          },
          "AccountingAccount": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "description": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "ACCOUNTS_PAYABLE",
                      "ACCOUNTS_RECEIVABLE",
                      "BANK",
                      "CREDIT_CARD",
                      "FIXED_ASSET",
                      "LIABILITY",
                      "EQUITY",
                      "EXPENSE",
                      "REVENUE",
                      "OTHER"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "status": {
                   "type": "string",
                   "enum": [
                      "ACTIVE",
                      "ARCHIVED"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "balance": {
                   "type": "number"
                },
                "currency": {
                   "type": "string"
                },
                "customer_defined_code": {
                   "type": "string"
                },
                "is_payable": {
                   "type": "boolean"
                },
                "parent_account_id": {
                   "type": "string"
                },
                "section": {
                   "type": "string"
                },
                "subsection": {
                   "type": "string"
                },
                "group": {
                   "type": "string"
                },
                "subgroup": {
                   "type": "string"
                },
                "parent_id": {
                   "type": "string"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             },
             "description": "Chart of accounts"
          },
          "AccountingAccounts": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingAccount"
             }
          },
          "AccountingJournalLineitem": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "tax_amount": {
                   "type": "number"
                },
                "total_amount": {
                   "type": "number"
                },
                "description": {
                   "type": "string"
                },
                "account_id": {
                   "type": "string"
                },
                "contact_id": {
                   "type": "string"
                },
                "payment_id": {
                   "type": "string"
                },
                "invoice_id": {
                   "type": "string"
                }
             }
          },
          "property_AccountingJournal_lineitems": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingJournalLineitem"
             },
             "description": "new field name"
          },
          "AccountingJournal": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "reference": {
                   "type": "string"
                },
                "tax_amount": {
                   "type": "number"
                },
                "currency": {
                   "type": "string"
                },
                "lineitems": {
                   "$ref": "#/components/schemas/property_AccountingJournal_lineitems"
                },
                "taxrate_id": {
                   "type": "string"
                },
                "description": {
                   "type": "string"
                },
                "posted_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "AccountingJournals": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingJournal"
             }
          },
          "AccountingTransactionLineItem": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "unit_quantity": {
                   "type": "number"
                },
                "unit_amount": {
                   "type": "number"
                },
                "total_amount": {
                   "type": "number"
                },
                "account_id": {
                   "type": "string"
                },
                "object_type": {
                   "type": "string"
                },
                "name": {
                   "type": "string"
                },
                "description": {
                   "type": "string"
                }
             }
          },
          "property_AccountingTransaction_lineitems": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingTransactionLineItem"
             }
          },
          "AccountingTransactionContact": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "is_customer": {
                   "type": "boolean"
                },
                "is_supplier": {
                   "type": "boolean"
                }
             },
             "required": [
                "id"
             ]
          },
          "property_AccountingTransaction_contacts": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingTransactionContact"
             }
          },
          "AccountingTransaction": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "memo": {
                   "type": "string"
                },
                "total_amount": {
                   "type": "number"
                },
                "tax_amount": {
                   "type": "number"
                },
                "account_id": {
                   "type": "string"
                },
                "contact_id": {
                   "type": "string"
                },
                "reference": {
                   "type": "string"
                },
                "sub_total_amount": {
                   "type": "number"
                },
                "split_account_id": {
                   "type": "string"
                },
                "payment_method": {
                   "type": "string"
                },
                "payment_terms": {
                   "type": "string"
                },
                "customer_message": {
                   "type": "string"
                },
                "type": {
                   "type": "string"
                },
                "lineitems": {
                   "$ref": "#/components/schemas/property_AccountingTransaction_lineitems"
                },
                "currency": {
                   "type": "string"
                },
                "contacts": {
                   "$ref": "#/components/schemas/property_AccountingTransaction_contacts"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "AccountingTransactions": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingTransaction"
             }
          },
          "AccountingEmail": {
             "type": "object",
             "properties": {
                "email": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "WORK",
                      "HOME",
                      "OTHER"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                }
             }
          },
          "property_AccountingContact_emails": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingEmail"
             }
          },
          "AccountingTelephone": {
             "type": "object",
             "properties": {
                "telephone": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "WORK",
                      "HOME",
                      "OTHER",
                      "FAX",
                      "MOBILE"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                }
             }
          },
          "property_AccountingContact_telephones": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingTelephone"
             }
          },
          "property_AccountingContact_billing_address": {
             "type": "object",
             "properties": {
                "address1": {
                   "type": "string"
                },
                "address2": {
                   "type": "string"
                },
                "city": {
                   "type": "string"
                },
                "region": {
                   "type": "string"
                },
                "region_code": {
                   "type": "string"
                },
                "postal_code": {
                   "type": "string"
                },
                "country": {
                   "type": "string"
                },
                "country_code": {
                   "type": "string"
                }
             }
          },
          "property_AccountingContact_shipping_address": {
             "type": "object",
             "properties": {
                "address1": {
                   "type": "string"
                },
                "address2": {
                   "type": "string"
                },
                "city": {
                   "type": "string"
                },
                "region": {
                   "type": "string"
                },
                "region_code": {
                   "type": "string"
                },
                "postal_code": {
                   "type": "string"
                },
                "country": {
                   "type": "string"
                },
                "country_code": {
                   "type": "string"
                }
             }
          },
          "AccountingContactPaymentMethod": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "ACH",
                      "ALIPAY",
                      "CARD",
                      "GIROPAY",
                      "IDEAL",
                      "OTHER",
                      "PAYPAL",
                      "WIRE",
                      "CHECK"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "name": {
                   "type": "string"
                },
                "default": {
                   "type": "boolean"
                }
             },
             "required": [
                "type"
             ]
          },
          "property_AccountingContact_payment_methods": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingContactPaymentMethod"
             }
          },
          "property_AccountingAssociatedContact_emails": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingEmail"
             }
          },
          "AccountingAssociatedContact": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "name": {
                   "type": "string"
                },
                "emails": {
                   "$ref": "#/components/schemas/property_AccountingAssociatedContact_emails"
                }
             }
          },
          "property_AccountingContact_associated_contacts": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingAssociatedContact"
             }
          },
          "AccountingContact": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "emails": {
                   "$ref": "#/components/schemas/property_AccountingContact_emails"
                },
                "telephones": {
                   "$ref": "#/components/schemas/property_AccountingContact_telephones"
                },
                "currency": {
                   "type": "string",
                   "default": "USD"
                },
                "billing_address": {
                   "$ref": "#/components/schemas/property_AccountingContact_billing_address"
                },
                "shipping_address": {
                   "$ref": "#/components/schemas/property_AccountingContact_shipping_address"
                },
                "is_active": {
                   "type": "boolean"
                },
                "tax_exemption": {
                   "type": "string",
                   "enum": [
                      "FEDERAL_GOV",
                      "REGION_GOV",
                      "LOCAL_GOV",
                      "TRIBAL_GOV",
                      "CHARITABLE_ORG",
                      "RELIGIOUS_ORG",
                      "EDUCATIONAL_ORG",
                      "MEDICAL_ORG",
                      "RESALE",
                      "FOREIGN",
                      "OTHER"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "tax_number": {
                   "type": "string"
                },
                "is_customer": {
                   "type": "boolean"
                },
                "is_supplier": {
                   "type": "boolean"
                },
                "portal_url": {
                   "type": "string"
                },
                "payment_methods": {
                   "$ref": "#/components/schemas/property_AccountingContact_payment_methods"
                },
                "company_name": {
                   "type": "string"
                },
                "identification": {
                   "type": "string"
                },
                "associated_contacts": {
                   "$ref": "#/components/schemas/property_AccountingContact_associated_contacts"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "AccountingContacts": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingContact"
             }
          },
          "property_AccountingLineitem_category_ids": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "AccountingLineitem": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "refunded_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "total_amount": {
                   "type": "number"
                },
                "refund_amount": {
                   "type": "number"
                },
                "discount_amount": {
                   "type": "number"
                },
                "tax_amount": {
                   "type": "number"
                },
                "item_id": {
                   "type": "string"
                },
                "unit_amount": {
                   "type": "number"
                },
                "unit_quantity": {
                   "type": "number"
                },
                "item_sku": {
                   "type": "string"
                },
                "item_name": {
                   "type": "string"
                },
                "item_description": {
                   "type": "string"
                },
                "notes": {
                   "type": "string"
                },
                "taxrate_id": {
                   "type": "string"
                },
                "account_id": {
                   "type": "string"
                },
                "category_ids": {
                   "$ref": "#/components/schemas/property_AccountingLineitem_category_ids"
                }
             }
          },
          "property_AccountingInvoice_lineitems": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingLineitem"
             }
          },
          "AccountingAttachment": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "download_url": {
                   "type": "string"
                },
                "name": {
                   "type": "string"
                },
                "mime_type": {
                   "type": "string"
                }
             }
          },
          "property_AccountingInvoice_attachments": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingAttachment"
             }
          },
          "AccountingInvoice": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "due_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "paid_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "refunded_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "cancelled_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "posted_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "total_amount": {
                   "type": "number"
                },
                "paid_amount": {
                   "type": "number"
                },
                "refund_amount": {
                   "type": "number"
                },
                "tax_amount": {
                   "type": "number"
                },
                "discount_amount": {
                   "type": "number"
                },
                "balance_amount": {
                   "type": "number"
                },
                "invoice_number": {
                   "type": "string"
                },
                "contact_id": {
                   "type": "string"
                },
                "currency": {
                   "type": "string"
                },
                "notes": {
                   "type": "string"
                },
                "refund_reason": {
                   "type": "string"
                },
                "lineitems": {
                   "$ref": "#/components/schemas/property_AccountingInvoice_lineitems"
                },
                "status": {
                   "type": "string",
                   "enum": [
                      "DRAFT",
                      "VOIDED",
                      "AUTHORIZED",
                      "PAID",
                      "PARTIALLY_PAID",
                      "PARTIALLY_REFUNDED",
                      "REFUNDED"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "url": {
                   "type": "string"
                },
                "payment_collection_method": {
                   "type": "string",
                   "enum": [
                      "send_invoice",
                      "charge_automatically"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "invoice_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "BILL",
                      "INVOICE",
                      "CREDITMEMO"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "attachments": {
                   "$ref": "#/components/schemas/property_AccountingInvoice_attachments"
                },
                "send": {
                   "type": "boolean"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "AccountingInvoices": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingInvoice"
             }
          },
          "property_AccountingBill_lineitems": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingLineitem"
             }
          },
          "property_AccountingBill_attachments": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingAttachment"
             }
          },
          "AccountingBill": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "bill_number": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "due_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "paid_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "refunded_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "cancelled_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "posted_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "total_amount": {
                   "type": "number"
                },
                "paid_amount": {
                   "type": "number"
                },
                "refund_amount": {
                   "type": "number"
                },
                "tax_amount": {
                   "type": "number"
                },
                "discount_amount": {
                   "type": "number"
                },
                "balance_amount": {
                   "type": "number"
                },
                "contact_id": {
                   "type": "string"
                },
                "currency": {
                   "type": "string"
                },
                "notes": {
                   "type": "string"
                },
                "refund_reason": {
                   "type": "string"
                },
                "lineitems": {
                   "$ref": "#/components/schemas/property_AccountingBill_lineitems"
                },
                "status": {
                   "type": "string",
                   "enum": [
                      "DRAFT",
                      "VOIDED",
                      "AUTHORIZED",
                      "PAID",
                      "PARTIALLY_PAID",
                      "PARTIALLY_REFUNDED",
                      "REFUNDED"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "url": {
                   "type": "string"
                },
                "payment_collection_method": {
                   "type": "string",
                   "enum": [
                      "send_invoice",
                      "charge_automatically"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "attachments": {
                   "$ref": "#/components/schemas/property_AccountingBill_attachments"
                },
                "send": {
                   "type": "boolean"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "AccountingBills": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingBill"
             }
          },
          "property_AccountingCreditmemo_lineitems": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingLineitem"
             }
          },
          "property_AccountingCreditmemo_attachments": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingAttachment"
             }
          },
          "AccountingCreditmemo": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "due_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "paid_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "refunded_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "cancelled_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "posted_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "total_amount": {
                   "type": "number"
                },
                "paid_amount": {
                   "type": "number"
                },
                "refund_amount": {
                   "type": "number"
                },
                "tax_amount": {
                   "type": "number"
                },
                "discount_amount": {
                   "type": "number"
                },
                "balance_amount": {
                   "type": "number"
                },
                "creditmemo_number": {
                   "type": "string"
                },
                "contact_id": {
                   "type": "string"
                },
                "currency": {
                   "type": "string"
                },
                "notes": {
                   "type": "string"
                },
                "refund_reason": {
                   "type": "string"
                },
                "lineitems": {
                   "$ref": "#/components/schemas/property_AccountingCreditmemo_lineitems"
                },
                "status": {
                   "type": "string",
                   "enum": [
                      "DRAFT",
                      "VOIDED",
                      "AUTHORIZED",
                      "PAID",
                      "PARTIALLY_PAID",
                      "PARTIALLY_REFUNDED",
                      "REFUNDED"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "url": {
                   "type": "string"
                },
                "payment_collection_method": {
                   "type": "string",
                   "enum": [
                      "send_invoice",
                      "charge_automatically"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "attachments": {
                   "$ref": "#/components/schemas/property_AccountingCreditmemo_attachments"
                },
                "send": {
                   "type": "boolean"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "AccountingCreditmemoes": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingCreditmemo"
             }
          },
          "AccountingTaxrate": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "description": {
                   "type": "string"
                },
                "rate": {
                   "type": "number"
                },
                "is_active": {
                   "type": "boolean"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "AccountingTaxrates": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingTaxrate"
             }
          },
          "property_AccountingOrganization_address": {
             "type": "object",
             "properties": {
                "address1": {
                   "type": "string"
                },
                "address2": {
                   "type": "string"
                },
                "city": {
                   "type": "string"
                },
                "region": {
                   "type": "string"
                },
                "region_code": {
                   "type": "string"
                },
                "postal_code": {
                   "type": "string"
                },
                "country": {
                   "type": "string"
                },
                "country_code": {
                   "type": "string"
                }
             }
          },
          "AccountingOrganization": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "legal_name": {
                   "type": "string"
                },
                "currency": {
                   "type": "string"
                },
                "address": {
                   "$ref": "#/components/schemas/property_AccountingOrganization_address"
                },
                "tax_number": {
                   "type": "string"
                },
                "timezone": {
                   "type": "string"
                },
                "website": {
                   "type": "string"
                },
                "fiscal_year_end_month": {
                   "type": "number"
                },
                "organization_code": {
                   "type": "string"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             },
             "required": [
                "name"
             ]
          },
          "AccountingOrganizations": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingOrganization"
             }
          },
          "property_AccountingOrder_shipping_address": {
             "type": "object",
             "properties": {
                "address1": {
                   "type": "string"
                },
                "address2": {
                   "type": "string"
                },
                "city": {
                   "type": "string"
                },
                "region": {
                   "type": "string"
                },
                "region_code": {
                   "type": "string"
                },
                "postal_code": {
                   "type": "string"
                },
                "country": {
                   "type": "string"
                },
                "country_code": {
                   "type": "string"
                }
             }
          },
          "property_AccountingOrder_billing_address": {
             "type": "object",
             "properties": {
                "address1": {
                   "type": "string"
                },
                "address2": {
                   "type": "string"
                },
                "city": {
                   "type": "string"
                },
                "region": {
                   "type": "string"
                },
                "region_code": {
                   "type": "string"
                },
                "postal_code": {
                   "type": "string"
                },
                "country": {
                   "type": "string"
                },
                "country_code": {
                   "type": "string"
                }
             }
          },
          "property_AccountingOrder_lineitems": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingLineitem"
             }
          },
          "AccountingOrder": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "posted_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "contact_id": {
                   "type": "string"
                },
                "account_id": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "SALES",
                      "PURCHASE"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "currency": {
                   "type": "string"
                },
                "total_amount": {
                   "type": "number"
                },
                "shipping_address": {
                   "$ref": "#/components/schemas/property_AccountingOrder_shipping_address"
                },
                "billing_address": {
                   "$ref": "#/components/schemas/property_AccountingOrder_billing_address"
                },
                "status": {
                   "type": "string",
                   "enum": [
                      "DRAFT",
                      "VOIDED",
                      "AUTHORIZED",
                      "PAID",
                      "PARTIALLY_PAID",
                      "PARTIALLY_REFUNDED",
                      "REFUNDED"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "lineitems": {
                   "$ref": "#/components/schemas/property_AccountingOrder_lineitems"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "AccountingOrders": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingOrder"
             }
          },
          "property_AccountingPurchaseorder_shipping_address": {
             "type": "object",
             "properties": {
                "address1": {
                   "type": "string"
                },
                "address2": {
                   "type": "string"
                },
                "city": {
                   "type": "string"
                },
                "region": {
                   "type": "string"
                },
                "region_code": {
                   "type": "string"
                },
                "postal_code": {
                   "type": "string"
                },
                "country": {
                   "type": "string"
                },
                "country_code": {
                   "type": "string"
                }
             }
          },
          "property_AccountingPurchaseorder_billing_address": {
             "type": "object",
             "properties": {
                "address1": {
                   "type": "string"
                },
                "address2": {
                   "type": "string"
                },
                "city": {
                   "type": "string"
                },
                "region": {
                   "type": "string"
                },
                "region_code": {
                   "type": "string"
                },
                "postal_code": {
                   "type": "string"
                },
                "country": {
                   "type": "string"
                },
                "country_code": {
                   "type": "string"
                }
             }
          },
          "property_AccountingPurchaseorder_lineitems": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingLineitem"
             }
          },
          "AccountingPurchaseorder": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "posted_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "contact_id": {
                   "type": "string"
                },
                "account_id": {
                   "type": "string"
                },
                "currency": {
                   "type": "string"
                },
                "total_amount": {
                   "type": "number"
                },
                "shipping_address": {
                   "$ref": "#/components/schemas/property_AccountingPurchaseorder_shipping_address"
                },
                "billing_address": {
                   "$ref": "#/components/schemas/property_AccountingPurchaseorder_billing_address"
                },
                "status": {
                   "type": "string",
                   "enum": [
                      "DRAFT",
                      "VOIDED",
                      "AUTHORIZED",
                      "PAID",
                      "PARTIALLY_PAID",
                      "PARTIALLY_REFUNDED",
                      "REFUNDED"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "lineitems": {
                   "$ref": "#/components/schemas/property_AccountingPurchaseorder_lineitems"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "AccountingPurchaseorders": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingPurchaseorder"
             }
          },
          "property_AccountingSalesorder_shipping_address": {
             "type": "object",
             "properties": {
                "address1": {
                   "type": "string"
                },
                "address2": {
                   "type": "string"
                },
                "city": {
                   "type": "string"
                },
                "region": {
                   "type": "string"
                },
                "region_code": {
                   "type": "string"
                },
                "postal_code": {
                   "type": "string"
                },
                "country": {
                   "type": "string"
                },
                "country_code": {
                   "type": "string"
                }
             }
          },
          "property_AccountingSalesorder_billing_address": {
             "type": "object",
             "properties": {
                "address1": {
                   "type": "string"
                },
                "address2": {
                   "type": "string"
                },
                "city": {
                   "type": "string"
                },
                "region": {
                   "type": "string"
                },
                "region_code": {
                   "type": "string"
                },
                "postal_code": {
                   "type": "string"
                },
                "country": {
                   "type": "string"
                },
                "country_code": {
                   "type": "string"
                }
             }
          },
          "property_AccountingSalesorder_lineitems": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingLineitem"
             }
          },
          "AccountingSalesorder": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "posted_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "contact_id": {
                   "type": "string"
                },
                "account_id": {
                   "type": "string"
                },
                "currency": {
                   "type": "string"
                },
                "total_amount": {
                   "type": "number"
                },
                "shipping_address": {
                   "$ref": "#/components/schemas/property_AccountingSalesorder_shipping_address"
                },
                "billing_address": {
                   "$ref": "#/components/schemas/property_AccountingSalesorder_billing_address"
                },
                "status": {
                   "type": "string",
                   "enum": [
                      "DRAFT",
                      "VOIDED",
                      "AUTHORIZED",
                      "PAID",
                      "PARTIALLY_PAID",
                      "PARTIALLY_REFUNDED",
                      "REFUNDED"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "lineitems": {
                   "$ref": "#/components/schemas/property_AccountingSalesorder_lineitems"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "AccountingSalesorders": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingSalesorder"
             }
          },
          "property_AccountingBalancesheetItem_sub_items": {
             "type": "array",
             "items": {
                "type": "object"
             }
          },
          "AccountingBalancesheetItem": {
             "type": "object",
             "properties": {
                "account_id": {
                   "type": "string"
                },
                "name": {
                   "type": "string"
                },
                "amount": {
                   "type": "number"
                },
                "sub_items": {
                   "$ref": "#/components/schemas/property_AccountingBalancesheetItem_sub_items"
                }
             }
          },
          "property_AccountingReport_balance_sheet_assets": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingBalancesheetItem"
             }
          },
          "property_AccountingReport_balance_sheet_liabilities": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingBalancesheetItem"
             }
          },
          "property_AccountingReport_balance_sheet_equity": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingBalancesheetItem"
             }
          },
          "property_AccountingReport_balance_sheet": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "start_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "end_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "currency": {
                   "type": "string"
                },
                "net_assets_amount": {
                   "type": "number"
                },
                "assets": {
                   "$ref": "#/components/schemas/property_AccountingReport_balance_sheet_assets"
                },
                "liabilities": {
                   "$ref": "#/components/schemas/property_AccountingReport_balance_sheet_liabilities"
                },
                "equity": {
                   "$ref": "#/components/schemas/property_AccountingReport_balance_sheet_equity"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "property_AccountingReport_profit_and_loss_category_ids": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "property_AccountingProfitlossSubcategory_transaction_ids": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "AccountingProfitlossSubcategory": {
             "type": "object",
             "properties": {
                "name": {
                   "type": "string"
                },
                "amount": {
                   "type": "number"
                },
                "transaction_ids": {
                   "$ref": "#/components/schemas/property_AccountingProfitlossSubcategory_transaction_ids"
                }
             },
             "description": "@deprecated"
          },
          "property_AccountingProfitlossCategory_sub_items": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingProfitlossSubcategory"
             }
          },
          "AccountingProfitlossCategory": {
             "type": "object",
             "properties": {
                "name": {
                   "type": "string"
                },
                "amount": {
                   "type": "number"
                },
                "sub_items": {
                   "$ref": "#/components/schemas/property_AccountingProfitlossCategory_sub_items"
                }
             },
             "description": "@deprecated"
          },
          "property_AccountingReport_profit_and_loss_income": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingProfitlossCategory"
             },
             "description": "@deprecated – use income_sections instead"
          },
          "property_AccountingReport_profit_and_loss_expenses": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingProfitlossCategory"
             },
             "description": "@deprecated – use expenses_sections instead"
          },
          "property_AccountingReport_profit_and_loss_cost_of_goods_sold": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingProfitlossCategory"
             },
             "description": "@deprecated – use cost_of_goods_sold_sections instead"
          },
          "property_AccountingProfitlossAccount_transaction_ids": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "AccountingProfitlossAccount": {
             "type": "object",
             "properties": {
                "account_id": {
                   "type": "string"
                },
                "account_name": {
                   "type": "string"
                },
                "total_amount": {
                   "type": "number"
                },
                "transaction_ids": {
                   "$ref": "#/components/schemas/property_AccountingProfitlossAccount_transaction_ids"
                }
             }
          },
          "property_AccountingProfitlossSection_accounts": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingProfitlossAccount"
             }
          },
          "AccountingProfitlossSection": {
             "type": "object",
             "properties": {
                "section_type": {
                   "type": "string"
                },
                "section_name": {
                   "type": "string"
                },
                "total_amount": {
                   "type": "number"
                },
                "accounts": {
                   "$ref": "#/components/schemas/property_AccountingProfitlossSection_accounts"
                }
             }
          },
          "property_AccountingReport_profit_and_loss_income_sections": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingProfitlossSection"
             }
          },
          "property_AccountingReport_profit_and_loss_expenses_sections": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingProfitlossSection"
             }
          },
          "property_AccountingReport_profit_and_loss_cost_of_goods_sold_sections": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingProfitlossSection"
             }
          },
          "property_AccountingReport_profit_and_loss": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "category_ids": {
                   "$ref": "#/components/schemas/property_AccountingReport_profit_and_loss_category_ids"
                },
                "start_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "end_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "currency": {
                   "type": "string"
                },
                "income": {
                   "$ref": "#/components/schemas/property_AccountingReport_profit_and_loss_income"
                },
                "expenses": {
                   "$ref": "#/components/schemas/property_AccountingReport_profit_and_loss_expenses"
                },
                "cost_of_goods_sold": {
                   "$ref": "#/components/schemas/property_AccountingReport_profit_and_loss_cost_of_goods_sold"
                },
                "gross_profit_amount": {
                   "type": "number"
                },
                "net_profit_amount": {
                   "type": "number"
                },
                "income_total_amount": {
                   "type": "number"
                },
                "net_income_amount": {
                   "type": "number"
                },
                "expenses_total_amount": {
                   "type": "number"
                },
                "cost_of_goods_sold_total_amount": {
                   "type": "number"
                },
                "income_sections": {
                   "$ref": "#/components/schemas/property_AccountingReport_profit_and_loss_income_sections"
                },
                "expenses_sections": {
                   "$ref": "#/components/schemas/property_AccountingReport_profit_and_loss_expenses_sections"
                },
                "cost_of_goods_sold_sections": {
                   "$ref": "#/components/schemas/property_AccountingReport_profit_and_loss_cost_of_goods_sold_sections"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "AccountingTrialbalanceSubItem": {
             "type": "object",
             "properties": {
                "amount": {
                   "type": "number"
                },
                "account_id": {
                   "type": "string"
                },
                "account_name": {
                   "type": "string"
                }
             }
          },
          "property_AccountingReport_trial_balance_sub_items": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingTrialbalanceSubItem"
             }
          },
          "property_AccountingReport_trial_balance": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "start_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "currency": {
                   "type": "string"
                },
                "end_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "total_debit_amount": {
                   "type": "number"
                },
                "total_credit_amount": {
                   "type": "number"
                },
                "sub_items": {
                   "$ref": "#/components/schemas/property_AccountingReport_trial_balance_sub_items"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "AccountingReport": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "TRIAL_BALANCE",
                      "BALANCE_SHEET",
                      "PROFIT_AND_LOSS"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "name": {
                   "type": "string"
                },
                "currency": {
                   "type": "string"
                },
                "start_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "end_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "balance_sheet": {
                   "$ref": "#/components/schemas/property_AccountingReport_balance_sheet"
                },
                "profit_and_loss": {
                   "$ref": "#/components/schemas/property_AccountingReport_profit_and_loss"
                },
                "trial_balance": {
                   "$ref": "#/components/schemas/property_AccountingReport_trial_balance"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "AccountingReports": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingReport"
             }
          },
          "property_AccountingBalancesheet_assets": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingBalancesheetItem"
             }
          },
          "property_AccountingBalancesheet_liabilities": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingBalancesheetItem"
             }
          },
          "property_AccountingBalancesheet_equity": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingBalancesheetItem"
             }
          },
          "AccountingBalancesheet": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "start_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "end_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "currency": {
                   "type": "string"
                },
                "net_assets_amount": {
                   "type": "number"
                },
                "assets": {
                   "$ref": "#/components/schemas/property_AccountingBalancesheet_assets"
                },
                "liabilities": {
                   "$ref": "#/components/schemas/property_AccountingBalancesheet_liabilities"
                },
                "equity": {
                   "$ref": "#/components/schemas/property_AccountingBalancesheet_equity"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "AccountingBalancesheets": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingBalancesheet"
             }
          },
          "property_AccountingTrialbalance_sub_items": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingTrialbalanceSubItem"
             }
          },
          "AccountingTrialbalance": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "start_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "currency": {
                   "type": "string"
                },
                "end_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "total_debit_amount": {
                   "type": "number"
                },
                "total_credit_amount": {
                   "type": "number"
                },
                "sub_items": {
                   "$ref": "#/components/schemas/property_AccountingTrialbalance_sub_items"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "AccountingTrialbalances": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingTrialbalance"
             }
          },
          "property_AccountingProfitloss_category_ids": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "property_AccountingProfitloss_income": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingProfitlossCategory"
             },
             "description": "@deprecated – use income_sections instead"
          },
          "property_AccountingProfitloss_expenses": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingProfitlossCategory"
             },
             "description": "@deprecated – use expenses_sections instead"
          },
          "property_AccountingProfitloss_cost_of_goods_sold": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingProfitlossCategory"
             },
             "description": "@deprecated – use cost_of_goods_sold_sections instead"
          },
          "property_AccountingProfitloss_income_sections": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingProfitlossSection"
             }
          },
          "property_AccountingProfitloss_expenses_sections": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingProfitlossSection"
             }
          },
          "property_AccountingProfitloss_cost_of_goods_sold_sections": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingProfitlossSection"
             }
          },
          "AccountingProfitloss": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "category_ids": {
                   "$ref": "#/components/schemas/property_AccountingProfitloss_category_ids"
                },
                "start_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "end_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "currency": {
                   "type": "string"
                },
                "income": {
                   "$ref": "#/components/schemas/property_AccountingProfitloss_income"
                },
                "expenses": {
                   "$ref": "#/components/schemas/property_AccountingProfitloss_expenses"
                },
                "cost_of_goods_sold": {
                   "$ref": "#/components/schemas/property_AccountingProfitloss_cost_of_goods_sold"
                },
                "gross_profit_amount": {
                   "type": "number"
                },
                "net_profit_amount": {
                   "type": "number"
                },
                "income_total_amount": {
                   "type": "number"
                },
                "net_income_amount": {
                   "type": "number"
                },
                "expenses_total_amount": {
                   "type": "number"
                },
                "cost_of_goods_sold_total_amount": {
                   "type": "number"
                },
                "income_sections": {
                   "$ref": "#/components/schemas/property_AccountingProfitloss_income_sections"
                },
                "expenses_sections": {
                   "$ref": "#/components/schemas/property_AccountingProfitloss_expenses_sections"
                },
                "cost_of_goods_sold_sections": {
                   "$ref": "#/components/schemas/property_AccountingProfitloss_cost_of_goods_sold_sections"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "AccountingProfitlosses": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingProfitloss"
             }
          },
          "AccountingCategory": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "description": {
                   "type": "string"
                },
                "is_active": {
                   "type": "boolean"
                },
                "parent_id": {
                   "type": "string"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "AccountingCategories": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/AccountingCategory"
             }
          },
          "property_StoragePermission_roles": {
             "type": "array",
             "items": {
                "type": "string",
                "enum": [
                   "OWNER",
                   "READ",
                   "WRITE"
                ],
                "x-speakeasy-unknown-values": "allow"
             }
          },
          "StoragePermission": {
             "type": "object",
             "properties": {
                "user_id": {
                   "type": "string"
                },
                "group_id": {
                   "type": "string"
                },
                "roles": {
                   "$ref": "#/components/schemas/property_StoragePermission_roles"
                },
                "is_hidden": {
                   "type": "boolean"
                },
                "is_public": {
                   "type": "boolean"
                }
             },
             "required": [
                "roles"
             ]
          },
          "property_StorageFile_permissions": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/StoragePermission"
             }
          },
          "property_StorageFile_raw": {
             "type": "object",
             "additionalProperties": true
          },
          "StorageFile": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "description": {
                   "type": "string"
                },
                "parent_id": {
                   "type": "string"
                },
                "user_id": {
                   "type": "string"
                },
                "size": {
                   "type": "number"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "FILE",
                      "FOLDER"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "mime_type": {
                   "type": "string"
                },
                "permissions": {
                   "$ref": "#/components/schemas/property_StorageFile_permissions"
                },
                "download_url": {
                   "type": "string"
                },
                "hash": {
                   "type": "string"
                },
                "data": {
                   "type": "string"
                },
                "version": {
                   "type": "string"
                },
                "web_url": {
                   "type": "string"
                },
                "raw": {
                   "$ref": "#/components/schemas/property_StorageFile_raw"
                }
             }
          },
          "StorageFiles": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/StorageFile"
             }
          },
          "CommerceMetadata": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "key": {
                   "type": "string"
                },
                "value": {
                   "additionalProperties": true,
                   "anyOf": [
                      {
                         "type": "object"
                      },
                      {
                         "type": "string"
                      },
                      {
                         "type": "number"
                      },
                      {
                         "type": "boolean"
                      },
                      {
                         "type": "array",
                         "items": {
                            "anyOf": [
                               {
                                  "type": "object"
                               },
                               {
                                  "type": "string"
                               },
                               {
                                  "type": "number"
                               },
                               {
                                  "type": "boolean"
                               }
                            ]
                         }
                      }
                   ]
                },
                "namespace": {
                   "type": "string"
                },
                "type": {
                   "type": "string"
                },
                "format": {
                   "type": "string",
                   "enum": [
                      "TEXT",
                      "NUMBER",
                      "DATE",
                      "BOOLEAN",
                      "FILE",
                      "TEXTAREA",
                      "SINGLE_SELECT",
                      "MULTIPLE_SELECT",
                      "MEASUREMENT",
                      "PRICE",
                      "YES_NO",
                      "CURRENCY",
                      "URL"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "extra_data": {
                   "additionalProperties": true,
                   "anyOf": [
                      {
                         "type": "object"
                      },
                      {
                         "type": "string"
                      },
                      {
                         "type": "number"
                      },
                      {
                         "type": "boolean"
                      },
                      {
                         "type": "array",
                         "items": {
                            "anyOf": [
                               {
                                  "type": "object"
                               },
                               {
                                  "type": "string"
                               },
                               {
                                  "type": "number"
                               },
                               {
                                  "type": "boolean"
                               }
                            ]
                         }
                      }
                   ]
                },
                "slug": {
                   "type": "string"
                }
             }
          },
          "property_CommerceItemMedia_metadata": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CommerceMetadata"
             }
          },
          "CommerceItemMedia": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "url": {
                   "type": "string"
                },
                "alt": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "image",
                      "video"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "height": {
                   "type": "number"
                },
                "width": {
                   "type": "number"
                },
                "position": {
                   "type": "number"
                },
                "metadata": {
                   "$ref": "#/components/schemas/property_CommerceItemMedia_metadata"
                }
             },
             "required": [
                "url"
             ]
          },
          "property_CommerceItemVariant_media": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CommerceItemMedia"
             }
          },
          "property_CommerceItemVariant_tags": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "CommerceItemPrice": {
             "type": "object",
             "properties": {
                "price": {
                   "type": "number"
                },
                "compare_at_price": {
                   "type": "number"
                },
                "currency": {
                   "type": "string"
                }
             },
             "required": [
                "price"
             ]
          },
          "property_CommerceItemVariant_prices": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CommerceItemPrice"
             }
          },
          "property_CommerceItemOption_values": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "CommerceItemOption": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "name": {
                   "type": "string"
                },
                "position": {
                   "type": "number"
                },
                "values": {
                   "$ref": "#/components/schemas/property_CommerceItemOption_values"
                }
             },
             "required": [
                "name",
                "values"
             ]
          },
          "property_CommerceItemVariant_options": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CommerceItemOption"
             }
          },
          "property_CommerceItemVariant_metadata": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CommerceMetadata"
             }
          },
          "CommerceItemVariant": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "name": {
                   "type": "string"
                },
                "public_name": {
                   "type": "string"
                },
                "description": {
                   "type": "string"
                },
                "public_description": {
                   "type": "string"
                },
                "sku": {
                   "type": "string"
                },
                "is_active": {
                   "type": "boolean"
                },
                "is_visible": {
                   "type": "boolean"
                },
                "is_featured": {
                   "type": "boolean"
                },
                "media": {
                   "$ref": "#/components/schemas/property_CommerceItemVariant_media"
                },
                "available_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "tags": {
                   "$ref": "#/components/schemas/property_CommerceItemVariant_tags"
                },
                "width": {
                   "type": "number"
                },
                "height": {
                   "type": "number"
                },
                "length": {
                   "type": "number"
                },
                "weight": {
                   "type": "number"
                },
                "size_unit": {
                   "type": "string",
                   "enum": [
                      "cm",
                      "inch"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "weight_unit": {
                   "type": "string",
                   "enum": [
                      "g",
                      "kg",
                      "oz",
                      "lb"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "total_stock": {
                   "type": "number"
                },
                "prices": {
                   "$ref": "#/components/schemas/property_CommerceItemVariant_prices"
                },
                "options": {
                   "$ref": "#/components/schemas/property_CommerceItemVariant_options"
                },
                "inventory_id": {
                   "type": "string"
                },
                "requires_shipping": {
                   "type": "boolean"
                },
                "metadata": {
                   "$ref": "#/components/schemas/property_CommerceItemVariant_metadata"
                }
             }
          },
          "property_CommerceItem_variants": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CommerceItemVariant"
             },
             "description": "first variant is the default variant"
          },
          "property_CommerceItem_tags": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "property_CommerceItem_media": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CommerceItemMedia"
             }
          },
          "property_CommerceItem_collection_ids": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "property_CommerceItem_metadata": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CommerceMetadata"
             }
          },
          "CommerceItem": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "public_name": {
                   "type": "string"
                },
                "slug": {
                   "type": "string"
                },
                "global_code": {
                   "type": "string"
                },
                "description": {
                   "type": "string"
                },
                "public_description": {
                   "type": "string"
                },
                "is_active": {
                   "type": "boolean"
                },
                "is_taxable": {
                   "type": "boolean"
                },
                "vendor_name": {
                   "type": "string"
                },
                "type": {
                   "type": "string"
                },
                "variants": {
                   "$ref": "#/components/schemas/property_CommerceItem_variants"
                },
                "tags": {
                   "$ref": "#/components/schemas/property_CommerceItem_tags"
                },
                "media": {
                   "$ref": "#/components/schemas/property_CommerceItem_media"
                },
                "collection_ids": {
                   "$ref": "#/components/schemas/property_CommerceItem_collection_ids"
                },
                "account_id": {
                   "type": "string"
                },
                "metadata": {
                   "$ref": "#/components/schemas/property_CommerceItem_metadata"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "CommerceItems": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CommerceItem"
             }
          },
          "property_CommerceCollection_media": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CommerceItemMedia"
             }
          },
          "property_CommerceCollection_tags": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "property_CommerceCollection_metadata": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CommerceMetadata"
             }
          },
          "CommerceCollection": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "public_name": {
                   "type": "string"
                },
                "description": {
                   "type": "string"
                },
                "public_description": {
                   "type": "string"
                },
                "media": {
                   "$ref": "#/components/schemas/property_CommerceCollection_media"
                },
                "is_visible": {
                   "type": "boolean"
                },
                "is_active": {
                   "type": "boolean"
                },
                "is_featured": {
                   "type": "boolean"
                },
                "tags": {
                   "$ref": "#/components/schemas/property_CommerceCollection_tags"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "COLLECTION",
                      "SAVED_SEARCH",
                      "CATEGORY"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "parent_id": {
                   "type": "string"
                },
                "metadata": {
                   "$ref": "#/components/schemas/property_CommerceCollection_metadata"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             },
             "required": [
                "name"
             ],
             "description": "A collection of items/products/services"
          },
          "CommerceCollections": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CommerceCollection"
             }
          },
          "CommerceInventory": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "item_id": {
                   "type": "string"
                },
                "item_variant_id": {
                   "type": "string"
                },
                "item_option_id": {
                   "type": "string"
                },
                "location_id": {
                   "type": "string"
                },
                "available": {
                   "type": "number"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             },
             "required": [
                "available"
             ]
          },
          "CommerceInventories": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CommerceInventory"
             }
          },
          "property_CommerceLocation_address": {
             "type": "object",
             "properties": {
                "address1": {
                   "type": "string"
                },
                "address2": {
                   "type": "string"
                },
                "city": {
                   "type": "string"
                },
                "region": {
                   "type": "string"
                },
                "region_code": {
                   "type": "string"
                },
                "postal_code": {
                   "type": "string"
                },
                "country": {
                   "type": "string"
                },
                "country_code": {
                   "type": "string"
                }
             }
          },
          "CommerceLocation": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "address": {
                   "$ref": "#/components/schemas/property_CommerceLocation_address"
                },
                "description": {
                   "type": "string"
                },
                "is_active": {
                   "type": "boolean"
                },
                "language_locale": {
                   "type": "string"
                },
                "parent_id": {
                   "type": "string"
                },
                "currency": {
                   "type": "string"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             },
             "required": [
                "name"
             ]
          },
          "CommerceLocations": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CommerceLocation"
             }
          },
          "property_CommerceReview_media": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CommerceItemMedia"
             },
             "description": "Photosvideos attached to the review"
          },
          "property_CommerceReviewComment_metadata": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CommerceMetadata"
             }
          },
          "CommerceReviewComment": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "content": {
                   "type": "string"
                },
                "author_name": {
                   "type": "string"
                },
                "author_email": {
                   "type": "string"
                },
                "author_avatar_url": {
                   "type": "string"
                },
                "author_location": {
                   "type": "string"
                },
                "helpful_votes": {
                   "type": "number"
                },
                "unhelpful_votes": {
                   "type": "number"
                },
                "status": {
                   "type": "string",
                   "enum": [
                      "PENDING",
                      "APPROVED",
                      "REJECTED",
                      "SPAM"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "is_verified": {
                   "type": "boolean"
                },
                "is_public": {
                   "type": "boolean"
                },
                "metadata": {
                   "$ref": "#/components/schemas/property_CommerceReviewComment_metadata"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             },
             "required": [
                "content"
             ]
          },
          "property_CommerceReview_comments": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CommerceReviewComment"
             }
          },
          "property_CommerceReview_metadata": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CommerceMetadata"
             }
          },
          "CommerceReview": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "item_id": {
                   "type": "string"
                },
                "item_variant_id": {
                   "type": "string"
                },
                "rating": {
                   "type": "number"
                },
                "title": {
                   "type": "string"
                },
                "content": {
                   "type": "string"
                },
                "author_name": {
                   "type": "string"
                },
                "author_email": {
                   "type": "string"
                },
                "author_avatar_url": {
                   "type": "string"
                },
                "author_location": {
                   "type": "string"
                },
                "verified_purchase": {
                   "type": "boolean"
                },
                "helpful_votes": {
                   "type": "number"
                },
                "unhelpful_votes": {
                   "type": "number"
                },
                "media": {
                   "$ref": "#/components/schemas/property_CommerceReview_media"
                },
                "status": {
                   "type": "string",
                   "enum": [
                      "PENDING",
                      "APPROVED",
                      "REJECTED",
                      "SPAM"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "is_verified": {
                   "type": "boolean"
                },
                "is_featured": {
                   "type": "boolean"
                },
                "is_public": {
                   "type": "boolean"
                },
                "comments": {
                   "$ref": "#/components/schemas/property_CommerceReview_comments"
                },
                "metadata": {
                   "$ref": "#/components/schemas/property_CommerceReview_metadata"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             },
             "required": [
                "item_id"
             ]
          },
          "CommerceReviews": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CommerceReview"
             }
          },
          "PaymentPayment": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "total_amount": {
                   "type": "number"
                },
                "contact_id": {
                   "type": "string"
                },
                "payment_method": {
                   "type": "string"
                },
                "currency": {
                   "type": "string",
                   "default": "USD"
                },
                "notes": {
                   "type": "string"
                },
                "invoice_id": {
                   "type": "string"
                },
                "account_id": {
                   "type": "string"
                },
                "reference": {
                   "type": "string"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "PaymentPayments": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/PaymentPayment"
             }
          },
          "PaymentLineitem": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "refunded_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "total_amount": {
                   "type": "number"
                },
                "refund_amount": {
                   "type": "number"
                },
                "discount_amount": {
                   "type": "number"
                },
                "tax_amount": {
                   "type": "number"
                },
                "item_id": {
                   "type": "string"
                },
                "unit_amount": {
                   "type": "number"
                },
                "unit_quantity": {
                   "type": "number"
                },
                "item_sku": {
                   "type": "string"
                },
                "item_name": {
                   "type": "string"
                },
                "item_description": {
                   "type": "string"
                },
                "notes": {
                   "type": "string"
                },
                "taxrate_id": {
                   "type": "string"
                },
                "account_id": {
                   "type": "string"
                }
             }
          },
          "property_PaymentLink_lineitems": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/PaymentLineitem"
             }
          },
          "PaymentLink": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "is_active": {
                   "type": "boolean"
                },
                "lineitems": {
                   "$ref": "#/components/schemas/property_PaymentLink_lineitems"
                },
                "currency": {
                   "type": "string"
                },
                "amount": {
                   "type": "number"
                },
                "payment_id": {
                   "type": "string"
                },
                "contact_id": {
                   "type": "string"
                },
                "url": {
                   "type": "string"
                },
                "is_chargeable_now": {
                   "type": "boolean"
                },
                "success_url": {
                   "type": "string"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "PaymentLinks": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/PaymentLink"
             }
          },
          "PaymentRefund": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "total_amount": {
                   "type": "number"
                },
                "payment_id": {
                   "type": "string"
                },
                "currency": {
                   "type": "string"
                },
                "notes": {
                   "type": "string"
                },
                "status": {
                   "type": "string",
                   "enum": [
                      "SUCCEEDED",
                      "PENDING",
                      "FAILED",
                      "CANCELED"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "reference": {
                   "type": "string"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             },
             "required": [
                "total_amount",
                "payment_id"
             ]
          },
          "PaymentRefunds": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/PaymentRefund"
             }
          },
          "PaymentPayout": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string"
                },
                "updated_at": {
                   "type": "string"
                },
                "total_amount": {
                   "type": "number"
                },
                "currency": {
                   "type": "string"
                },
                "notes": {
                   "type": "string"
                },
                "status": {
                   "type": "string",
                   "enum": [
                      "SUCCEEDED",
                      "PENDING",
                      "FAILED",
                      "CANCELED"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             },
             "required": [
                "total_amount"
             ]
          },
          "PaymentPayouts": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/PaymentPayout"
             }
          },
          "property_PaymentSubscription_lineitems": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/PaymentLineitem"
             }
          },
          "PaymentSubscription": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "description": {
                   "type": "string"
                },
                "contact_id": {
                   "type": "string"
                },
                "invoice_id": {
                   "type": "string"
                },
                "current_period_end_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "current_period_start_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "canceled_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "currency": {
                   "type": "string"
                },
                "start_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "end_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "status": {
                   "type": "string",
                   "enum": [
                      "ACTIVE",
                      "INACTIVE",
                      "CANCELED",
                      "PAUSED"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "month": {
                   "type": "number"
                },
                "interval_unit": {
                   "type": "string",
                   "enum": [
                      "YEAR",
                      "MONTH",
                      "WEEK",
                      "DAY"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "day_of_month": {
                   "type": "number"
                },
                "day_of_week": {
                   "type": "number"
                },
                "interval": {
                   "type": "number"
                },
                "lineitems": {
                   "$ref": "#/components/schemas/property_PaymentSubscription_lineitems"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "PaymentSubscriptions": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/PaymentSubscription"
             }
          },
          "GenaiModel": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "name": {
                   "type": "string"
                },
                "description": {
                   "type": "string"
                },
                "max_tokens": {
                   "type": "number"
                },
                "web_url": {
                   "type": "string"
                },
                "has_temperature": {
                   "type": "boolean"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "GenaiModels": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/GenaiModel"
             }
          },
          "GenaiContent": {
             "type": "object",
             "properties": {
                "role": {
                   "type": "string",
                   "enum": [
                      "SYSTEM",
                      "USER"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "content": {
                   "type": "string"
                }
             },
             "required": [
                "content"
             ]
          },
          "property_GenaiPrompt_messages": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/GenaiContent"
             }
          },
          "property_GenaiPrompt_responses": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "GenaiPrompt": {
             "type": "object",
             "properties": {
                "model_id": {
                   "type": "string"
                },
                "messages": {
                   "$ref": "#/components/schemas/property_GenaiPrompt_messages"
                },
                "temperature": {
                   "type": "number"
                },
                "max_tokens": {
                   "type": "number"
                },
                "responses": {
                   "$ref": "#/components/schemas/property_GenaiPrompt_responses"
                },
                "tokens_used": {
                   "type": "number"
                },
                "mcp_url": {
                   "type": "string"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "GenaiEmbeddingContent": {
             "type": "object",
             "properties": {
                "text": {
                   "type": "string"
                }
             },
             "required": [
                "text"
             ]
          },
          "property_GenaiEmbedding_content": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/GenaiEmbeddingContent"
             }
          },
          "GenaiEmbedding": {
             "type": "object",
             "properties": {
                "model_id": {
                   "type": "string"
                },
                "content": {
                   "$ref": "#/components/schemas/property_GenaiEmbedding_content"
                },
                "enconding_format": {
                   "type": "string",
                   "enum": [
                      "FLOAT",
                      "UINT8",
                      "INT8",
                      "BINARY",
                      "UBINARY",
                      "BASE64"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "type": {
                   "type": "string"
                },
                "dimension": {
                   "type": "number"
                },
                "max_tokens": {
                   "type": "number"
                },
                "embeddings": {
                   "type": "string"
                },
                "tokens_used": {
                   "type": "number"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                },
                "id": {
                   "type": "string"
                }
             }
          },
          "KmsSpace": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "description": {
                   "type": "string"
                },
                "parent_space_id": {
                   "type": "string",
                   "default": "sp"
                },
                "parent_id": {
                   "type": "string"
                },
                "is_active": {
                   "type": "boolean"
                },
                "user_id": {
                   "type": "string"
                },
                "parent_page_id": {
                   "type": "string"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             },
             "required": [
                "name"
             ]
          },
          "KmsSpaces": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/KmsSpace"
             }
          },
          "KmsPageMetadata": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "key": {
                   "type": "string"
                },
                "value": {
                   "additionalProperties": true,
                   "anyOf": [
                      {
                         "type": "object"
                      },
                      {
                         "type": "string"
                      },
                      {
                         "type": "number"
                      },
                      {
                         "type": "boolean"
                      },
                      {
                         "type": "array",
                         "items": {
                            "anyOf": [
                               {
                                  "type": "object"
                               },
                               {
                                  "type": "string"
                               },
                               {
                                  "type": "number"
                               },
                               {
                                  "type": "boolean"
                               }
                            ]
                         }
                      }
                   ]
                },
                "namespace": {
                   "type": "string"
                },
                "type": {
                   "type": "string"
                },
                "format": {
                   "type": "string",
                   "enum": [
                      "TEXT",
                      "NUMBER",
                      "DATE",
                      "BOOLEAN",
                      "FILE",
                      "TEXTAREA",
                      "SINGLE_SELECT",
                      "MULTIPLE_SELECT",
                      "MEASUREMENT",
                      "PRICE",
                      "YES_NO",
                      "CURRENCY",
                      "URL"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "extra_data": {
                   "additionalProperties": true,
                   "anyOf": [
                      {
                         "type": "object"
                      },
                      {
                         "type": "string"
                      },
                      {
                         "type": "number"
                      },
                      {
                         "type": "boolean"
                      },
                      {
                         "type": "array",
                         "items": {
                            "anyOf": [
                               {
                                  "type": "object"
                               },
                               {
                                  "type": "string"
                               },
                               {
                                  "type": "number"
                               },
                               {
                                  "type": "boolean"
                               }
                            ]
                         }
                      }
                   ]
                },
                "slug": {
                   "type": "string"
                }
             }
          },
          "property_KmsPage_metadata": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/KmsPageMetadata"
             }
          },
          "KmsPage": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "title": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "HTML",
                      "MARKDOWN",
                      "TEXT",
                      "OTHER"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "space_id": {
                   "type": "string"
                },
                "parent_page_id": {
                   "type": "string"
                },
                "is_active": {
                   "type": "boolean"
                },
                "user_id": {
                   "type": "string"
                },
                "download_url": {
                   "type": "string"
                },
                "metadata": {
                   "$ref": "#/components/schemas/property_KmsPage_metadata"
                },
                "has_children": {
                   "type": "boolean"
                },
                "web_url": {
                   "type": "string"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             },
             "required": [
                "title",
                "type"
             ]
          },
          "KmsPages": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/KmsPage"
             }
          },
          "KmsComment": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "PAGE_INLINE",
                      "PAGE"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "content_type": {
                   "type": "string",
                   "enum": [
                      "HTML",
                      "MARKDOWN",
                      "TEXT",
                      "OTHER"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "content": {
                   "type": "string"
                },
                "user_id": {
                   "type": "string"
                },
                "page_id": {
                   "type": "string"
                },
                "parent_id": {
                   "type": "string"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             },
             "required": [
                "content"
             ]
          },
          "KmsComments": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/KmsComment"
             }
          },
          "property_TaskProject_user_ids": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "property_TaskProject_group_ids": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "TaskProject": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "parent_id": {
                   "type": "string"
                },
                "user_ids": {
                   "$ref": "#/components/schemas/property_TaskProject_user_ids"
                },
                "group_ids": {
                   "$ref": "#/components/schemas/property_TaskProject_group_ids"
                },
                "description": {
                   "type": "string"
                },
                "has_tasks": {
                   "type": "boolean"
                },
                "has_children": {
                   "type": "boolean"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "TaskProjects": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/TaskProject"
             }
          },
          "property_TaskTask_assigned_user_ids": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "property_TaskTask_follower_user_ids": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "property_TaskTask_group_ids": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "property_TaskTask_tags": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "property_TaskTask_attachment_ids": {
             "type": "array",
             "items": {
                "type": "string"
             },
             "description": "Array of attachment IDs retrieved from StorageFile.Get endpoint"
          },
          "TaskMetadata": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "key": {
                   "type": "string"
                },
                "value": {
                   "additionalProperties": true,
                   "anyOf": [
                      {
                         "type": "object"
                      },
                      {
                         "type": "string"
                      },
                      {
                         "type": "number"
                      },
                      {
                         "type": "boolean"
                      },
                      {
                         "type": "array",
                         "items": {
                            "anyOf": [
                               {
                                  "type": "object"
                               },
                               {
                                  "type": "string"
                               },
                               {
                                  "type": "number"
                               },
                               {
                                  "type": "boolean"
                               }
                            ]
                         }
                      }
                   ]
                },
                "namespace": {
                   "type": "string"
                },
                "type": {
                   "type": "string"
                },
                "format": {
                   "type": "string",
                   "enum": [
                      "TEXT",
                      "NUMBER",
                      "DATE",
                      "BOOLEAN",
                      "FILE",
                      "TEXTAREA",
                      "SINGLE_SELECT",
                      "MULTIPLE_SELECT",
                      "MEASUREMENT",
                      "PRICE",
                      "YES_NO",
                      "CURRENCY",
                      "URL"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "extra_data": {
                   "additionalProperties": true,
                   "anyOf": [
                      {
                         "type": "object"
                      },
                      {
                         "type": "string"
                      },
                      {
                         "type": "number"
                      },
                      {
                         "type": "boolean"
                      },
                      {
                         "type": "array",
                         "items": {
                            "anyOf": [
                               {
                                  "type": "object"
                               },
                               {
                                  "type": "string"
                               },
                               {
                                  "type": "number"
                               },
                               {
                                  "type": "boolean"
                               }
                            ]
                         }
                      }
                   ]
                },
                "slug": {
                   "type": "string"
                }
             }
          },
          "property_TaskTask_metadata": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/TaskMetadata"
             }
          },
          "TaskTask": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "project_id": {
                   "type": "string"
                },
                "parent_id": {
                   "type": "string"
                },
                "completed_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "status": {
                   "type": "string",
                   "enum": [
                      "OPENED",
                      "IN_PROGRESS",
                      "COMPLETED"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "notes": {
                   "type": "string"
                },
                "due_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "priority": {
                   "type": "string"
                },
                "assigned_user_ids": {
                   "$ref": "#/components/schemas/property_TaskTask_assigned_user_ids"
                },
                "creator_user_id": {
                   "type": "string"
                },
                "follower_user_ids": {
                   "$ref": "#/components/schemas/property_TaskTask_follower_user_ids"
                },
                "group_ids": {
                   "$ref": "#/components/schemas/property_TaskTask_group_ids"
                },
                "tags": {
                   "$ref": "#/components/schemas/property_TaskTask_tags"
                },
                "url": {
                   "type": "string"
                },
                "attachment_ids": {
                   "$ref": "#/components/schemas/property_TaskTask_attachment_ids"
                },
                "metadata": {
                   "$ref": "#/components/schemas/property_TaskTask_metadata"
                },
                "has_children": {
                   "type": "boolean"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "TaskTasks": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/TaskTask"
             }
          },
          "TaskComment": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "text": {
                   "type": "string"
                },
                "user_id": {
                   "type": "string"
                },
                "user_name": {
                   "type": "string"
                },
                "task_id": {
                   "type": "string"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             },
             "required": [
                "text",
                "task_id"
             ]
          },
          "TaskComments": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/TaskComment"
             }
          },
          "TaskChangeItem": {
             "type": "object",
             "properties": {
                "field": {
                   "type": "string"
                },
                "from": {
                   "type": "string"
                },
                "to": {
                   "type": "string"
                }
             },
             "required": [
                "field"
             ]
          },
          "property_TaskChange_items": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/TaskChangeItem"
             }
          },
          "TaskChange": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "task_id": {
                   "type": "string"
                },
                "user_id": {
                   "type": "string"
                },
                "items": {
                   "$ref": "#/components/schemas/property_TaskChange_items"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "TaskChanges": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/TaskChange"
             }
          },
          "property_ScimUser_schemas": {
             "type": "array",
             "items": {
                "type": "string",
                "enum": [
                   "urn:ietf:params:scim:schemas:core:2.0:User",
                   "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User",
                   "urn:ietf:params:scim:schemas:extension:lattice:attributes:1.0:User",
                   "urn:ietf:params:scim:schemas:extension:peakon:2.0:User"
                ],
                "x-speakeasy-unknown-values": "allow"
             }
          },
          "property_ScimUser_meta": {
             "type": "object",
             "properties": {
                "resourceType": {
                   "type": "string",
                   "enum": [
                      "User",
                      "Group"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "created": {
                   "type": "string"
                },
                "lastModified": {
                   "type": "string"
                },
                "location": {
                   "type": "string"
                },
                "version": {
                   "type": "string"
                }
             }
          },
          "property_ScimUser_name": {
             "type": "object",
             "properties": {
                "formatted": {
                   "type": "string"
                },
                "familyName": {
                   "type": "string"
                },
                "givenName": {
                   "type": "string"
                },
                "middleName": {
                   "type": "string"
                },
                "honorificPrefix": {
                   "type": "string"
                },
                "honorificSuffix": {
                   "type": "string"
                }
             }
          },
          "ScimPhoneNumber": {
             "type": "object",
             "properties": {
                "type": {
                   "type": "string",
                   "enum": [
                      "work",
                      "home",
                      "other",
                      "mobile",
                      "fax",
                      "pager"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "value": {
                   "type": "string"
                },
                "display": {
                   "type": "string"
                },
                "primary": {
                   "type": "boolean"
                }
             }
          },
          "property_ScimUser_phoneNumbers": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/ScimPhoneNumber"
             }
          },
          "ScimEmail": {
             "type": "object",
             "properties": {
                "type": {
                   "type": "string",
                   "enum": [
                      "work",
                      "home",
                      "other"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "value": {
                   "type": "string"
                },
                "primary": {
                   "type": "boolean"
                },
                "display": {
                   "type": "string"
                }
             },
             "required": [
                "type"
             ]
          },
          "property_ScimUser_emails": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/ScimEmail"
             }
          },
          "ScimIms": {
             "type": "object",
             "properties": {
                "type": {
                   "type": "string",
                   "enum": [
                      "aim",
                      "qtalk",
                      "icq",
                      "xmpp",
                      "msn",
                      "skype",
                      "qq",
                      "yahoo"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "value": {
                   "type": "string"
                },
                "display": {
                   "type": "string"
                },
                "primary": {
                   "type": "boolean"
                }
             }
          },
          "property_ScimUser_ims": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/ScimIms"
             }
          },
          "ScimPhoto": {
             "type": "object",
             "properties": {
                "value": {
                   "type": "string"
                },
                "display": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "photo",
                      "thumbnail"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "primary": {
                   "type": "boolean"
                }
             }
          },
          "property_ScimUser_photos": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/ScimPhoto"
             }
          },
          "ScimAddress": {
             "type": "object",
             "properties": {
                "formatted": {
                   "type": "string"
                },
                "streetAddress": {
                   "type": "string"
                },
                "locality": {
                   "type": "string"
                },
                "region": {
                   "type": "string"
                },
                "postalCode": {
                   "type": "string"
                },
                "country": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "work",
                      "home",
                      "other"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                }
             }
          },
          "property_ScimUser_addresses": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/ScimAddress"
             }
          },
          "ScimUserGroups": {
             "type": "object",
             "properties": {
                "value": {
                   "type": "string"
                },
                "$ref": {
                   "type": "string"
                },
                "display": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "direct",
                      "indirect"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                }
             },
             "required": [
                "value"
             ]
          },
          "property_ScimUser_groups": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/ScimUserGroups"
             }
          },
          "ScimEntitlement": {
             "type": "object",
             "properties": {
                "value": {
                   "type": "string"
                },
                "display": {
                   "type": "string"
                },
                "type": {
                   "type": "string"
                },
                "primary": {
                   "type": "boolean"
                }
             },
             "required": [
                "value"
             ]
          },
          "property_ScimUser_entitlements": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/ScimEntitlement"
             }
          },
          "ScimRole": {
             "type": "object",
             "properties": {
                "value": {
                   "type": "string"
                },
                "display": {
                   "type": "string"
                },
                "type": {
                   "type": "string"
                },
                "primary": {
                   "type": "boolean"
                }
             },
             "required": [
                "value"
             ]
          },
          "property_ScimUser_roles": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/ScimRole"
             },
             "description": "Student, Faculty, ..."
          },
          "property_ScimUser_x509Certificates": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/ScimRole"
             }
          },
          "property_ScimUser_urn_ietf_params_scim_schemas_extension_enterprise_2_0_User_manager": {
             "type": "object",
             "properties": {
                "value": {
                   "type": "string"
                },
                "managerId": {
                   "type": "string"
                },
                "$ref": {
                   "type": "string"
                },
                "displayName": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "direct",
                      "indirect"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                }
             },
             "description": "\"id\" attribute of another User."
          },
          "ScimManager": {
             "type": "object",
             "properties": {
                "value": {
                   "type": "string"
                },
                "managerId": {
                   "type": "string"
                },
                "$ref": {
                   "type": "string"
                },
                "displayName": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "direct",
                      "indirect"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                }
             },
             "description": "\"id\" attribute of another User."
          },
          "property_ScimUser_urn_ietf_params_scim_schemas_extension_enterprise_2_0_User_additionalManagers": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/ScimManager"
             }
          },
          "property_ScimUser_urn_ietf_params_scim_schemas_extension_enterprise_2_0_User": {
             "type": "object",
             "properties": {
                "employeeNumber": {
                   "type": "string"
                },
                "costCenter": {
                   "type": "string"
                },
                "organization": {
                   "type": "string"
                },
                "division": {
                   "type": "string"
                },
                "department": {
                   "type": "string"
                },
                "manager": {
                   "$ref": "#/components/schemas/property_ScimUser_urn_ietf_params_scim_schemas_extension_enterprise_2_0_User_manager"
                },
                "additionalManagers": {
                   "$ref": "#/components/schemas/property_ScimUser_urn_ietf_params_scim_schemas_extension_enterprise_2_0_User_additionalManagers"
                },
                "level": {
                   "type": "string"
                },
                "startDate": {
                   "type": "string",
                   "format": "date-time"
                },
                "endDate": {
                   "type": "string",
                   "format": "date-time"
                },
                "birthday": {
                   "type": "string",
                   "format": "date-time"
                },
                "gender": {
                   "type": "string",
                   "enum": [
                      "male",
                      "female"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "location": {
                   "type": "string"
                }
             },
             "description": "an organization."
          },
          "property_ScimUser_urn_ietf_params_scim_schemas_extension_lattice_attributes_1_0_User": {
             "type": "object",
             "properties": {
                "startDate": {
                   "type": "string",
                   "format": "date-time"
                },
                "birthDate": {
                   "type": "string",
                   "format": "date-time"
                },
                "gender": {
                   "type": "string",
                   "enum": [
                      "male",
                      "female"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "sexualOrientation": {
                   "type": "string",
                   "enum": [
                      "Queer",
                      "Heterosexual",
                      "Straight"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "ethnicity": {
                   "type": "string",
                   "enum": [
                      "Caucasian",
                      "East Asian",
                      "Middle Eastern",
                      "Black",
                      "Biracial (South Asian & Caucasian)",
                      "Filipino",
                      "South Asian",
                      "Indian",
                      "White",
                      "Asian"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "People Manager (Reviews)": {
                   "type": "string"
                },
                "Salary Information": {
                   "type": "string"
                },
                "Remote Work - Location": {
                   "type": "string"
                },
                "Job Level": {
                   "type": "string"
                },
                "Sub Departments": {
                   "type": "string"
                }
             }
          },
          "property_ScimUser_urn_ietf_params_scim_schemas_extension_peakon_2_0_User": {
             "type": "object",
             "properties": {
                "Gender": {
                   "type": "string",
                   "enum": [
                      "Female",
                      "Male"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "Team": {
                   "type": "string"
                },
                "Manager": {
                   "type": "string"
                },
                "Date of Birth": {
                   "type": "string",
                   "format": "date-time"
                }
             }
          },
          "ScimUser": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "schemas": {
                   "$ref": "#/components/schemas/property_ScimUser_schemas"
                },
                "externalId": {
                   "type": "string"
                },
                "userType": {
                   "type": "string"
                },
                "userName": {
                   "type": "string"
                },
                "meta": {
                   "$ref": "#/components/schemas/property_ScimUser_meta"
                },
                "name": {
                   "$ref": "#/components/schemas/property_ScimUser_name"
                },
                "displayName": {
                   "type": "string"
                },
                "nickName": {
                   "type": "string"
                },
                "profileUrl": {
                   "type": "string"
                },
                "title": {
                   "type": "string"
                },
                "preferredLanguage": {
                   "type": "string"
                },
                "locale": {
                   "type": "string"
                },
                "timezone": {
                   "type": "string"
                },
                "active": {
                   "type": "boolean"
                },
                "password": {
                   "type": "string"
                },
                "phoneNumbers": {
                   "$ref": "#/components/schemas/property_ScimUser_phoneNumbers"
                },
                "emails": {
                   "$ref": "#/components/schemas/property_ScimUser_emails"
                },
                "ims": {
                   "$ref": "#/components/schemas/property_ScimUser_ims"
                },
                "photos": {
                   "$ref": "#/components/schemas/property_ScimUser_photos"
                },
                "addresses": {
                   "$ref": "#/components/schemas/property_ScimUser_addresses"
                },
                "groups": {
                   "$ref": "#/components/schemas/property_ScimUser_groups"
                },
                "entitlements": {
                   "$ref": "#/components/schemas/property_ScimUser_entitlements"
                },
                "roles": {
                   "$ref": "#/components/schemas/property_ScimUser_roles"
                },
                "x509Certificates": {
                   "$ref": "#/components/schemas/property_ScimUser_x509Certificates"
                },
                "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
                   "$ref": "#/components/schemas/property_ScimUser_urn_ietf_params_scim_schemas_extension_enterprise_2_0_User"
                },
                "urn:ietf:params:scim:schemas:extension:lattice:attributes:1.0:User": {
                   "$ref": "#/components/schemas/property_ScimUser_urn_ietf_params_scim_schemas_extension_lattice_attributes_1_0_User"
                },
                "urn:ietf:params:scim:schemas:extension:peakon:2.0:User": {
                   "$ref": "#/components/schemas/property_ScimUser_urn_ietf_params_scim_schemas_extension_peakon_2_0_User"
                }
             }
          },
          "ScimUsers": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/ScimUser"
             }
          },
          "ScimGroupMember": {
             "type": "object",
             "properties": {
                "value": {
                   "type": "string"
                },
                "$ref": {
                   "type": "string"
                },
                "display": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "User",
                      "Group"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "operation": {
                   "type": "string",
                   "enum": [
                      "add",
                      "delete"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                }
             },
             "required": [
                "value"
             ]
          },
          "property_ScimGroup_members": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/ScimGroupMember"
             },
             "description": "An array of members"
          },
          "property_ScimGroup_meta": {
             "type": "object",
             "properties": {
                "resourceType": {
                   "type": "string",
                   "enum": [
                      "User",
                      "Group"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "created": {
                   "type": "string"
                },
                "lastModified": {
                   "type": "string"
                },
                "location": {
                   "type": "string"
                },
                "version": {
                   "type": "string"
                }
             }
          },
          "property_ScimGroup_schemas": {
             "type": "array",
             "items": {
                "type": "string",
                "enum": [
                   "urn:ietf:params:scim:schemas:core:2.0:Group"
                ],
                "x-speakeasy-unknown-values": "allow"
             },
             "description": "Array of schema URIs"
          },
          "ScimGroup": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "externalId": {
                   "type": "string"
                },
                "displayName": {
                   "type": "string"
                },
                "groupType": {
                   "type": "string"
                },
                "members": {
                   "$ref": "#/components/schemas/property_ScimGroup_members"
                },
                "meta": {
                   "$ref": "#/components/schemas/property_ScimGroup_meta"
                },
                "schemas": {
                   "$ref": "#/components/schemas/property_ScimGroup_schemas"
                }
             },
             "required": [
                "displayName"
             ]
          },
          "ScimGroups": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/ScimGroup"
             }
          },
          "CalendarCalendar": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "description": {
                   "type": "string"
                },
                "timezone": {
                   "type": "string"
                },
                "primary": {
                   "type": "boolean"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             },
             "required": [
                "name"
             ]
          },
          "CalendarCalendars": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CalendarCalendar"
             }
          },
          "property_CalendarEvent_organizer": {
             "type": "object",
             "properties": {
                "user_id": {
                   "type": "string"
                },
                "email": {
                   "type": "string"
                },
                "name": {
                   "type": "string"
                },
                "status": {
                   "type": "string",
                   "enum": [
                      "ACCEPTED",
                      "REJECTED",
                      "TENTATIVE"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "required": {
                   "type": "boolean"
                }
             }
          },
          "CalendarAttendee": {
             "type": "object",
             "properties": {
                "user_id": {
                   "type": "string"
                },
                "email": {
                   "type": "string"
                },
                "name": {
                   "type": "string"
                },
                "status": {
                   "type": "string",
                   "enum": [
                      "ACCEPTED",
                      "REJECTED",
                      "TENTATIVE"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "required": {
                   "type": "boolean"
                }
             }
          },
          "property_CalendarEvent_attendees": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CalendarAttendee"
             }
          },
          "property_CalendarEventRecurrence_on_days": {
             "type": "array",
             "items": {
                "type": "string",
                "enum": [
                   "SU",
                   "MO",
                   "TU",
                   "WE",
                   "TH",
                   "FR",
                   "SA"
                ],
                "x-speakeasy-unknown-values": "allow"
             },
             "description": "days of the week to repeat on, defaults to undefined (every day), only used if frequency is WEEKLY"
          },
          "property_CalendarEventRecurrence_on_months": {
             "type": "array",
             "items": {
                "type": "number"
             },
             "description": "months of the year to repeat on, defaults to undefined (every month), only used if frequency is YEARLY, January is 1"
          },
          "property_CalendarEventRecurrence_on_month_days": {
             "type": "array",
             "items": {
                "type": "number"
             },
             "description": "days of the month to repeat on, defaults to undefined (every day), only used if frequency is MONTHLY"
          },
          "property_CalendarEventRecurrence_on_weeks": {
             "type": "array",
             "items": {
                "type": "number"
             },
             "description": "week ordinals for BYDAY (e.g., -1 for last, -2 for second-to-last, 1 for first, 2 for second), only used with on_days. 0 is used for days without week ordinals."
          },
          "property_CalendarEventRecurrence_on_year_days": {
             "type": "array",
             "items": {
                "type": "number"
             },
             "description": "days of the year to repeat on, defaults to undefined (every day), only used if frequency is YEARLY"
          },
          "property_CalendarEventRecurrence_excluded_dates": {
             "type": "array",
             "items": {
                "type": "string"
             },
             "description": "dates to exclude from the recurrence, defaults to undefined (no exclusions)"
          },
          "CalendarEventRecurrence": {
             "type": "object",
             "properties": {
                "frequency": {
                   "type": "string",
                   "enum": [
                      "DAILY",
                      "WEEKLY",
                      "MONTHLY",
                      "YEARLY"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "interval": {
                   "type": "number"
                },
                "count": {
                   "type": "number"
                },
                "end_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "on_days": {
                   "$ref": "#/components/schemas/property_CalendarEventRecurrence_on_days"
                },
                "on_months": {
                   "$ref": "#/components/schemas/property_CalendarEventRecurrence_on_months"
                },
                "on_month_days": {
                   "$ref": "#/components/schemas/property_CalendarEventRecurrence_on_month_days"
                },
                "on_weeks": {
                   "$ref": "#/components/schemas/property_CalendarEventRecurrence_on_weeks"
                },
                "on_year_days": {
                   "$ref": "#/components/schemas/property_CalendarEventRecurrence_on_year_days"
                },
                "excluded_dates": {
                   "$ref": "#/components/schemas/property_CalendarEventRecurrence_excluded_dates"
                },
                "week_start": {
                   "type": "string",
                   "enum": [
                      "SU",
                      "MO",
                      "TU",
                      "WE",
                      "TH",
                      "FR",
                      "SA"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "timezone": {
                   "type": "string"
                }
             },
             "required": [
                "frequency"
             ]
          },
          "property_CalendarEvent_recurrence": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CalendarEventRecurrence"
             }
          },
          "CalendarConference": {
             "type": "object",
             "properties": {
                "conference_identifier": {
                   "type": "string"
                },
                "url": {
                   "type": "string"
                },
                "label": {
                   "type": "string"
                },
                "telephone": {
                   "type": "string"
                },
                "participant_access_code": {
                   "type": "string"
                },
                "host_access_code": {
                   "type": "string"
                },
                "notes": {
                   "type": "string"
                },
                "country_code": {
                   "type": "string"
                },
                "region_code": {
                   "type": "string"
                }
             }
          },
          "property_CalendarEvent_conference": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CalendarConference"
             }
          },
          "CalendarAttachment": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "name": {
                   "type": "string"
                },
                "mime_type": {
                   "type": "string"
                },
                "download_url": {
                   "type": "string"
                }
             }
          },
          "property_CalendarEvent_attachments": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CalendarAttachment"
             }
          },
          "CalendarEvent": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string"
                },
                "updated_at": {
                   "type": "string"
                },
                "calendar_id": {
                   "type": "string"
                },
                "subject": {
                   "type": "string"
                },
                "start_at": {
                   "type": "string"
                },
                "end_at": {
                   "type": "string"
                },
                "is_all_day": {
                   "type": "boolean"
                },
                "timezone": {
                   "type": "string"
                },
                "notes": {
                   "type": "string"
                },
                "location": {
                   "type": "string"
                },
                "is_free": {
                   "type": "boolean"
                },
                "is_private": {
                   "type": "boolean"
                },
                "status": {
                   "type": "string",
                   "enum": [
                      "CANCELED",
                      "CONFIRMED",
                      "TENTATIVE"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "organizer": {
                   "$ref": "#/components/schemas/property_CalendarEvent_organizer"
                },
                "attendees": {
                   "$ref": "#/components/schemas/property_CalendarEvent_attendees"
                },
                "recurring_event_id": {
                   "type": "string"
                },
                "recurrence": {
                   "$ref": "#/components/schemas/property_CalendarEvent_recurrence"
                },
                "web_url": {
                   "type": "string"
                },
                "has_conference": {
                   "type": "boolean"
                },
                "conference": {
                   "$ref": "#/components/schemas/property_CalendarEvent_conference"
                },
                "attachments": {
                   "$ref": "#/components/schemas/property_CalendarEvent_attachments"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "CalendarEvents": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CalendarEvent"
             }
          },
          "CalendarBusy": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "start_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "end_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "timezone": {
                   "type": "string"
                },
                "description": {
                   "type": "string"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             },
             "required": [
                "start_at",
                "end_at"
             ]
          },
          "CalendarBusies": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CalendarBusy"
             }
          },
          "CalendarLink": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string"
                },
                "updated_at": {
                   "type": "string"
                },
                "name": {
                   "type": "string"
                },
                "url": {
                   "type": "string"
                },
                "duration": {
                   "type": "number"
                },
                "description": {
                   "type": "string"
                },
                "is_active": {
                   "type": "boolean"
                },
                "price_amount": {
                   "type": "number"
                },
                "price_currency": {
                   "type": "string"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             },
             "required": [
                "url"
             ]
          },
          "CalendarLinks": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CalendarLink"
             }
          },
          "property_CalendarRecordingMedia_attendees": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CalendarAttendee"
             }
          },
          "property_CalendarRecordingTranscript_attendee": {
             "type": "object",
             "properties": {
                "user_id": {
                   "type": "string"
                },
                "email": {
                   "type": "string"
                },
                "name": {
                   "type": "string"
                },
                "status": {
                   "type": "string",
                   "enum": [
                      "ACCEPTED",
                      "REJECTED",
                      "TENTATIVE"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "required": {
                   "type": "boolean"
                }
             }
          },
          "CalendarRecordingTranscript": {
             "type": "object",
             "properties": {
                "start_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "end_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "text": {
                   "type": "string"
                },
                "attendee": {
                   "$ref": "#/components/schemas/property_CalendarRecordingTranscript_attendee"
                },
                "language": {
                   "type": "string"
                }
             },
             "required": [
                "text"
             ]
          },
          "property_CalendarRecordingMedia_transcripts": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CalendarRecordingTranscript"
             }
          },
          "CalendarRecordingMedia": {
             "type": "object",
             "properties": {
                "attendees": {
                   "$ref": "#/components/schemas/property_CalendarRecordingMedia_attendees"
                },
                "start_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "end_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "language": {
                   "type": "string"
                },
                "transcripts": {
                   "$ref": "#/components/schemas/property_CalendarRecordingMedia_transcripts"
                },
                "transcript_download_url": {
                   "type": "string"
                },
                "recording_download_url": {
                   "type": "string"
                }
             }
          },
          "property_CalendarRecording_media": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CalendarRecordingMedia"
             }
          },
          "CalendarRecording": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "start_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "end_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "expires_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "event_id": {
                   "type": "string"
                },
                "web_url": {
                   "type": "string"
                },
                "media": {
                   "$ref": "#/components/schemas/property_CalendarRecording_media"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             }
          },
          "CalendarRecordings": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/CalendarRecording"
             }
          },
          "property_LmsCourse_languages": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "property_LmsCourse_categories": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "LmsMedia": {
             "type": "object",
             "properties": {
                "url": {
                   "type": "string"
                },
                "name": {
                   "type": "string"
                },
                "description": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "IMAGE",
                      "HEADSHOT",
                      "VIDEO",
                      "WEB",
                      "DOCUMENT",
                      "OTHER"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "thumbnail_url": {
                   "type": "string"
                }
             },
             "required": [
                "url"
             ]
          },
          "property_LmsCourse_media": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/LmsMedia"
             }
          },
          "property_LmsCourse_instructor_ids": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "property_LmsCourse_student_ids": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "property_LmsCourse_raw": {
             "type": "object",
             "additionalProperties": true
          },
          "LmsCourse": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "description": {
                   "type": "string"
                },
                "is_private": {
                   "type": "boolean"
                },
                "is_active": {
                   "type": "boolean"
                },
                "price_amount": {
                   "type": "number"
                },
                "languages": {
                   "$ref": "#/components/schemas/property_LmsCourse_languages"
                },
                "categories": {
                   "$ref": "#/components/schemas/property_LmsCourse_categories"
                },
                "currency": {
                   "type": "string"
                },
                "media": {
                   "$ref": "#/components/schemas/property_LmsCourse_media"
                },
                "instructor_ids": {
                   "$ref": "#/components/schemas/property_LmsCourse_instructor_ids"
                },
                "student_ids": {
                   "$ref": "#/components/schemas/property_LmsCourse_student_ids"
                },
                "raw": {
                   "$ref": "#/components/schemas/property_LmsCourse_raw"
                }
             },
             "required": [
                "name"
             ]
          },
          "LmsCourses": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/LmsCourse"
             }
          },
          "property_LmsClass_media": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/LmsMedia"
             }
          },
          "property_LmsClass_instructor_ids": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "property_LmsClass_student_ids": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "property_LmsClass_languages": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "property_LmsClass_raw": {
             "type": "object",
             "additionalProperties": true
          },
          "LmsClass": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "description": {
                   "type": "string"
                },
                "media": {
                   "$ref": "#/components/schemas/property_LmsClass_media"
                },
                "course_id": {
                   "type": "string"
                },
                "instructor_ids": {
                   "$ref": "#/components/schemas/property_LmsClass_instructor_ids"
                },
                "student_ids": {
                   "$ref": "#/components/schemas/property_LmsClass_student_ids"
                },
                "languages": {
                   "$ref": "#/components/schemas/property_LmsClass_languages"
                },
                "raw": {
                   "$ref": "#/components/schemas/property_LmsClass_raw"
                }
             },
             "required": [
                "name",
                "course_id"
             ]
          },
          "LmsClasses": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/LmsClass"
             }
          },
          "LmsEmail": {
             "type": "object",
             "properties": {}
          },
          "property_LmsStudent_emails": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/LmsEmail"
             }
          },
          "LmsTelephone": {
             "type": "object",
             "properties": {
                "telephone": {
                   "type": "string"
                },
                "type": {
                   "type": "string",
                   "enum": [
                      "WORK",
                      "HOME",
                      "OTHER",
                      "FAX",
                      "MOBILE"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                }
             },
             "required": [
                "telephone"
             ]
          },
          "property_LmsStudent_telephones": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/LmsTelephone"
             }
          },
          "property_LmsStudent_address": {
             "type": "object",
             "properties": {
                "address1": {
                   "type": "string"
                },
                "address2": {
                   "type": "string"
                },
                "city": {
                   "type": "string"
                },
                "region": {
                   "type": "string"
                },
                "region_code": {
                   "type": "string"
                },
                "postal_code": {
                   "type": "string"
                },
                "country": {
                   "type": "string"
                },
                "country_code": {
                   "type": "string"
                }
             }
          },
          "property_LmsStudent_raw": {
             "type": "object",
             "additionalProperties": true
          },
          "LmsStudent": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "emails": {
                   "$ref": "#/components/schemas/property_LmsStudent_emails"
                },
                "telephones": {
                   "$ref": "#/components/schemas/property_LmsStudent_telephones"
                },
                "address": {
                   "$ref": "#/components/schemas/property_LmsStudent_address"
                },
                "image_url": {
                   "type": "string"
                },
                "raw": {
                   "$ref": "#/components/schemas/property_LmsStudent_raw"
                }
             }
          },
          "LmsStudents": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/LmsStudent"
             }
          },
          "property_LmsInstructor_emails": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/LmsEmail"
             }
          },
          "property_LmsInstructor_telephones": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/LmsTelephone"
             }
          },
          "property_LmsInstructor_raw": {
             "type": "object",
             "additionalProperties": true
          },
          "LmsInstructor": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "emails": {
                   "$ref": "#/components/schemas/property_LmsInstructor_emails"
                },
                "title": {
                   "type": "string"
                },
                "telephones": {
                   "$ref": "#/components/schemas/property_LmsInstructor_telephones"
                },
                "image_url": {
                   "type": "string"
                },
                "raw": {
                   "$ref": "#/components/schemas/property_LmsInstructor_raw"
                }
             }
          },
          "LmsInstructors": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/LmsInstructor"
             }
          },
          "property_RepoOrganization_user_ids": {
             "type": "array",
             "items": {
                "type": "string"
             },
             "description": "id values of the users/employees associated with this organization"
          },
          "property_RepoOrganization_raw": {
             "type": "object",
             "additionalProperties": true
          },
          "RepoOrganization": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "description": {
                   "type": "string"
                },
                "avatar_url": {
                   "type": "string"
                },
                "web_url": {
                   "type": "string"
                },
                "user_ids": {
                   "$ref": "#/components/schemas/property_RepoOrganization_user_ids"
                },
                "raw": {
                   "$ref": "#/components/schemas/property_RepoOrganization_raw"
                }
             }
          },
          "RepoOrganizations": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/RepoOrganization"
             }
          },
          "property_RepoRepository_raw": {
             "type": "object",
             "additionalProperties": true
          },
          "RepoRepository": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "description": {
                   "type": "string"
                },
                "owner": {
                   "type": "string"
                },
                "is_private": {
                   "type": "boolean"
                },
                "web_url": {
                   "type": "string"
                },
                "org_id": {
                   "type": "string"
                },
                "raw": {
                   "$ref": "#/components/schemas/property_RepoRepository_raw"
                }
             },
             "required": [
                "name"
             ]
          },
          "RepoRepositories": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/RepoRepository"
             }
          },
          "property_RepoBranch_raw": {
             "type": "object",
             "additionalProperties": true
          },
          "RepoBranch": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "repo_id": {
                   "type": "string"
                },
                "raw": {
                   "$ref": "#/components/schemas/property_RepoBranch_raw"
                }
             },
             "required": [
                "name",
                "repo_id"
             ]
          },
          "RepoBranches": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/RepoBranch"
             }
          },
          "property_RepoCommit_raw": {
             "type": "object",
             "additionalProperties": true
          },
          "RepoCommit": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "user_id": {
                   "type": "string"
                },
                "repo_id": {
                   "type": "string"
                },
                "message": {
                   "type": "string"
                },
                "branch_id": {
                   "type": "string"
                },
                "raw": {
                   "$ref": "#/components/schemas/property_RepoCommit_raw"
                }
             },
             "required": [
                "user_id",
                "repo_id"
             ]
          },
          "RepoCommits": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/RepoCommit"
             }
          },
          "property_RepoPullrequest_user_ids": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "property_RepoPullrequest_labels": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "property_RepoPullrequest_commit_ids": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "property_RepoPullrequest_raw": {
             "type": "object",
             "additionalProperties": true
          },
          "RepoPullrequest": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "user_ids": {
                   "$ref": "#/components/schemas/property_RepoPullrequest_user_ids"
                },
                "repo_id": {
                   "type": "string"
                },
                "status": {
                   "type": "string",
                   "enum": [
                      "PENDING",
                      "APPROVED",
                      "REJECTED"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "labels": {
                   "$ref": "#/components/schemas/property_RepoPullrequest_labels"
                },
                "closed_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "commit_ids": {
                   "$ref": "#/components/schemas/property_RepoPullrequest_commit_ids"
                },
                "raw": {
                   "$ref": "#/components/schemas/property_RepoPullrequest_raw"
                }
             }
          },
          "RepoPullrequests": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/RepoPullrequest"
             }
          },
          "property_MetadataMetadata_options": {
             "type": "array",
             "items": {
                "type": "string"
             }
          },
          "property_MetadataMetadata_objects": {
             "type": "object",
             "additionalProperties": true
          },
          "MetadataMetadata": {
             "type": "object",
             "properties": {
                "id": {
                   "type": "string"
                },
                "created_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "updated_at": {
                   "type": "string",
                   "format": "date-time"
                },
                "name": {
                   "type": "string"
                },
                "slug": {
                   "type": "string"
                },
                "format": {
                   "type": "string",
                   "enum": [
                      "TEXT",
                      "NUMBER",
                      "DATE",
                      "BOOLEAN",
                      "FILE",
                      "TEXTAREA",
                      "SINGLE_SELECT",
                      "MULTIPLE_SELECT",
                      "MEASUREMENT",
                      "PRICE",
                      "YES_NO",
                      "CURRENCY",
                      "URL"
                   ],
                   "x-speakeasy-unknown-values": "allow"
                },
                "original_format": {
                   "type": "string"
                },
                "options": {
                   "$ref": "#/components/schemas/property_MetadataMetadata_options"
                },
                "object_type": {
                   "type": "string"
                },
                "objects": {
                   "$ref": "#/components/schemas/property_MetadataMetadata_objects"
                },
                "raw": {
                   "type": "object",
                   "additionalProperties": true
                }
             },
             "required": [
                "name",
                "object_type"
             ]
          },
          "MetadataMetadatas": {
             "type": "array",
             "items": {
                "$ref": "#/components/schemas/MetadataMetadata"
             }
          }
       }
    },
    "paths": {
       "/unified/connection": {
          "post": {
             "summary": "Create connection",
             "parameters": [],
             "tags": [
                "unified",
                "connection"
             ],
             "description": "Used only to import existing customer credentials; use \"Authorize new connection\" instead",
             "requestBody": {
                "description": "A connection represents a specific authentication of an integration.",
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/Connection"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/Connection"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createUnifiedConnection"
          },
          "get": {
             "summary": "List all connections",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "external_xref",
                   "in": "query",
                   "required": false,
                   "description": "Filter the results to only those integrations for your user referenced by this value"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string",
                         "enum": [
                            "passthrough",
                            "hris",
                            "ats",
                            "auth",
                            "crm",
                            "enrich",
                            "martech",
                            "ticketing",
                            "uc",
                            "accounting",
                            "storage",
                            "commerce",
                            "payment",
                            "genai",
                            "messaging",
                            "kms",
                            "task",
                            "scim",
                            "lms",
                            "repo",
                            "metadata",
                            "calendar",
                            "verification"
                         ]
                      }
                   },
                   "name": "categories",
                   "in": "query",
                   "required": false,
                   "description": "Filter the results on these categories"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "env",
                   "in": "query",
                   "required": false
                }
             ],
             "tags": [
                "unified",
                "connection"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/Connections"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listUnifiedConnections"
          }
       },
       "/unified/connection/{id}": {
          "get": {
             "summary": "Retrieve connection",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Connection",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "unified",
                "connection"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/Connection"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getUnifiedConnection"
          },
          "put": {
             "summary": "Update connection",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Connection",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "unified",
                "connection"
             ],
             "requestBody": {
                "description": "A connection represents a specific authentication of an integration.",
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/Connection"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/Connection"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateUnifiedConnection"
          },
          "patch": {
             "summary": "Update connection",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Connection",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "unified",
                "connection"
             ],
             "requestBody": {
                "description": "A connection represents a specific authentication of an integration.",
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/Connection"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/Connection"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchUnifiedConnection"
          },
          "delete": {
             "summary": "Remove connection",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Connection",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "unified",
                "connection"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeUnifiedConnection"
          }
       },
       "/unified/issue/{id}": {
          "get": {
             "summary": "Retrieve support issue",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Issue",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "unified",
                "issue"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/Issue"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getUnifiedIssue"
          }
       },
       "/unified/issue": {
          "get": {
             "summary": "List support issues",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                }
             ],
             "tags": [
                "unified",
                "issue"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/Issues"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listUnifiedIssues"
          }
       },
       "/unified/integration": {
          "get": {
             "summary": "Returns all integrations",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string",
                         "enum": [
                            "passthrough",
                            "hris",
                            "ats",
                            "auth",
                            "crm",
                            "enrich",
                            "martech",
                            "ticketing",
                            "uc",
                            "accounting",
                            "storage",
                            "commerce",
                            "payment",
                            "genai",
                            "messaging",
                            "kms",
                            "task",
                            "scim",
                            "lms",
                            "repo",
                            "metadata",
                            "calendar",
                            "verification"
                         ]
                      }
                   },
                   "name": "categories",
                   "in": "query",
                   "required": false,
                   "description": "Filter the results on these categories"
                },
                {
                   "schema": {
                      "type": "boolean"
                   },
                   "name": "summary",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "boolean"
                   },
                   "name": "active",
                   "in": "query",
                   "required": false,
                   "description": "Filter the results for only the workspace's active integrations"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "env",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "type",
                   "in": "query",
                   "required": false,
                   "description": "Filter the results for only this integration type"
                }
             ],
             "tags": [
                "unified",
                "integration"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/Integrations"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listUnifiedIntegrations"
          }
       },
       "/unified/integration/workspace/{workspace_id}": {
          "get": {
             "summary": "Returns all activated integrations in a workspace",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string",
                         "enum": [
                            "passthrough",
                            "hris",
                            "ats",
                            "auth",
                            "crm",
                            "enrich",
                            "martech",
                            "ticketing",
                            "uc",
                            "accounting",
                            "storage",
                            "commerce",
                            "payment",
                            "genai",
                            "messaging",
                            "kms",
                            "task",
                            "scim",
                            "lms",
                            "repo",
                            "metadata",
                            "calendar",
                            "verification"
                         ]
                      }
                   },
                   "name": "categories",
                   "in": "query",
                   "required": false,
                   "description": "Filter the results on these categories"
                },
                {
                   "schema": {
                      "type": "boolean"
                   },
                   "name": "summary",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "boolean"
                   },
                   "name": "active",
                   "in": "query",
                   "required": false,
                   "description": "Filter the results for only the workspace's active integrations"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "env",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "The ID of the workspace",
                   "name": "workspace_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "unified",
                "integration"
             ],
             "description": "No authentication required as this is to be used by front-end interface",
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/Integrations"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "operationId": "listUnifiedIntegrationWorkspaces"
          }
       },
       "/unified/webhook/{id}": {
          "get": {
             "summary": "Retrieve webhook by its ID",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Webhook",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "unified",
                "webhook"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/Webhook"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getUnifiedWebhook"
          },
          "put": {
             "summary": "Update webhook subscription",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Webhook",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "unified",
                "webhook"
             ],
             "requestBody": {
                "description": "A webhook is used to POST new/updated information to your server.",
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/Webhook"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/Webhook"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateUnifiedWebhook"
          },
          "patch": {
             "summary": "Update webhook subscription",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Webhook",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "unified",
                "webhook"
             ],
             "requestBody": {
                "description": "A webhook is used to POST new/updated information to your server.",
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/Webhook"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/Webhook"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchUnifiedWebhook"
          },
          "delete": {
             "summary": "Remove webhook subscription",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Webhook",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "unified",
                "webhook"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeUnifiedWebhook"
          }
       },
       "/unified/webhook": {
          "get": {
             "summary": "Returns all registered webhooks",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "object",
                   "in": "query",
                   "required": false,
                   "description": "Filter the results for webhooks for only this object"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "integration_type",
                   "in": "query",
                   "required": false,
                   "description": "Filter the results to just this integration"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "connection_id",
                   "in": "query",
                   "required": false,
                   "description": "Filter the results to just this integration"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "created_lte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose created date is equal or less to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "env",
                   "in": "query",
                   "required": false
                }
             ],
             "tags": [
                "unified",
                "webhook"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/Webhooks"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listUnifiedWebhooks"
          },
          "post": {
             "summary": "Create webhook subscription",
             "parameters": [
                {
                   "schema": {
                      "type": "boolean"
                   },
                   "name": "include_all",
                   "in": "query",
                   "required": false,
                   "description": "When set, all of the existing data will sent back to your server."
                }
             ],
             "tags": [
                "unified",
                "webhook"
             ],
             "description": "The data payload received by your server is described at https://docs.unified.to/unified/overview. The `interval` field can be set as low as 1 minute for paid accounts, and 60 minutes for free accounts.",
             "requestBody": {
                "description": "A webhook is used to POST new/updated information to your server.",
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/Webhook"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/Webhook"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createUnifiedWebhook"
          }
       },
       "/unified/webhook/{id}/trigger": {
          "put": {
             "summary": "Trigger webhook",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Webhook",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "unified",
                "webhook"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateUnifiedWebhookTrigger"
          },
          "patch": {
             "summary": "Trigger webhook",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Webhook",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "unified",
                "webhook"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchUnifiedWebhookTrigger"
          }
       },
       "/unified/apicall/{id}": {
          "get": {
             "summary": "Retrieve specific API Call by its ID",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Apicall",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "unified",
                "apicall"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/ApiCall"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getUnifiedApicall"
          }
       },
       "/unified/apicall": {
          "get": {
             "summary": "Returns API Calls",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "external_xref",
                   "in": "query",
                   "required": false,
                   "description": "Filter the results to only those integrations for your user referenced by this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "integration_type",
                   "in": "query",
                   "required": false,
                   "description": "Filter the results to just this integration"
                },
                {
                   "schema": {
                      "type": "boolean"
                   },
                   "name": "error",
                   "in": "query",
                   "required": false,
                   "description": "Filter the results for API Calls with errors"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "connection_id",
                   "in": "query",
                   "required": false,
                   "description": "Filter the results to just this integration"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "env",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "webhook_id",
                   "in": "query",
                   "required": false,
                   "description": "Filter the results to just this webhook"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "type",
                   "in": "query",
                   "required": false,
                   "description": "Filter the results to just this type"
                },
                {
                   "schema": {
                      "type": "boolean"
                   },
                   "name": "is_billable",
                   "in": "query",
                   "required": false,
                   "description": "Filter the results for only billable API Calls"
                }
             ],
             "tags": [
                "unified",
                "apicall"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/ApiCalls"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listUnifiedApicalls"
          }
       },
       "/unified/integration/auth/{workspace_id}/{integration_type}": {
          "get": {
             "summary": "Authorize new connection",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "success_redirect",
                   "in": "query",
                   "required": false,
                   "description": "The URL where you want the user to be redirect to after a successful authorization.  The connection ID will be appended with (id=<connectionId>) to this URL, as will the state that was provided."
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "failure_redirect",
                   "in": "query",
                   "required": false,
                   "description": "The URL where you want the user to be redirect to after an unsuccessful authentication. An \"error\" variable will be appended."
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "state",
                   "in": "query",
                   "required": false,
                   "description": "Extra state to send back to your success URL"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "external_xref",
                   "in": "query",
                   "required": false,
                   "description": "Your user identifier to associate with the new Integration"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "scopes",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "boolean"
                   },
                   "name": "redirect",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "env",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "lang",
                   "in": "query",
                   "required": false,
                   "description": "Language: en, fr, es, it, pt, zh, hi"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "subdomain",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "The ID of the workspace",
                   "name": "workspace_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "Type of the supported integration",
                   "name": "integration_type",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "unified",
                "integration",
                "auth"
             ],
             "description": "Returns an authorization URL for the specified integration.  Once a successful authorization occurs, a new connection is created.",
             "responses": {
                "200": {
                   "content": {
                      "text/plain": {
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "operationId": "getUnifiedIntegrationAuth"
          }
       },
       "/unified/integration/login/{workspace_id}/{integration_type}": {
          "get": {
             "summary": "Sign in a user",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "success_redirect",
                   "in": "query",
                   "required": false,
                   "description": "The URL where you want the user to be redirect to after a successful authentication/sign-in.  A \"jwt\" parameter will be appended to the URL which will contain a name and email of the user who just signed-in."
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "failure_redirect",
                   "in": "query",
                   "required": false,
                   "description": "The URL where you want the user to be redirect to after an unsuccessful authentication. An \"error\" variable will be appended."
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "state",
                   "in": "query",
                   "required": false,
                   "description": "Extra state to send back to your success URL"
                },
                {
                   "schema": {
                      "type": "boolean"
                   },
                   "name": "redirect",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "env",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "The ID of the workspace",
                   "name": "workspace_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "Type of the supported integration",
                   "name": "integration_type",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "auth",
                "login"
             ],
             "description": "Returns an authentication URL for the specified integration.  Once a successful authentication occurs, the name and email are returned inside a jwt parameter, which is a JSON web token that is base-64 encoded.",
             "responses": {
                "200": {
                   "content": {
                      "text/plain": {
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "operationId": "getUnifiedIntegrationLogin"
          }
       },
       "/messaging/{connection_id}/channel/{id}": {
          "get": {
             "summary": "Retrieve a channel",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Channel",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "messaging",
                "channel"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/MessagingChannel"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getMessagingChannel"
          }
       },
       "/messaging/{connection_id}/channel": {
          "get": {
             "summary": "List all channels",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "parent_id",
                   "in": "query",
                   "required": false,
                   "description": "The parent ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "messaging",
                "channel"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/MessagingChannels"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listMessagingChannels"
          }
       },
       "/messaging/{connection_id}/message": {
          "post": {
             "summary": "Create a message",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "messaging",
                "message"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/MessagingMessage"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/MessagingMessage"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createMessagingMessage"
          },
          "get": {
             "summary": "List all messages",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "parent_id",
                   "in": "query",
                   "required": false,
                   "description": "The parent ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "channel_id",
                   "in": "query",
                   "required": false,
                   "description": "The channel ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "start_gte",
                   "in": "query",
                   "required": false,
                   "description": "The start date to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "end_le",
                   "in": "query",
                   "required": false,
                   "description": "The end date to filter by"
                },
                {
                   "schema": {
                      "type": "boolean"
                   },
                   "name": "expand",
                   "in": "query",
                   "required": false,
                   "description": "Whether to flatten grouped or recurring items into individual entries."
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "messaging",
                "message"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/MessagingMessages"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listMessagingMessages"
          }
       },
       "/messaging/{connection_id}/message/{id}": {
          "get": {
             "summary": "Retrieve a message",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Message",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "messaging",
                "message"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/MessagingMessage"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getMessagingMessage"
          },
          "put": {
             "summary": "Update a message",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Message",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "messaging",
                "message"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/MessagingMessage"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/MessagingMessage"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateMessagingMessage"
          },
          "patch": {
             "summary": "Update a message",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Message",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "messaging",
                "message"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/MessagingMessage"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/MessagingMessage"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchMessagingMessage"
          },
          "delete": {
             "summary": "Remove a message",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Message",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "messaging",
                "message"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeMessagingMessage"
          }
       },
       "/crm/{connection_id}/deal": {
          "post": {
             "summary": "Create a deal",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "crm",
                "deal"
             ],
             "requestBody": {
                "description": "A deal represents an opportunity with companies and/or contacts",
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CrmDeal"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CrmDeal"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createCrmDeal"
          },
          "get": {
             "summary": "List all deals",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "company_id",
                   "in": "query",
                   "required": false,
                   "description": "The company ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "contact_id",
                   "in": "query",
                   "required": false,
                   "description": "The contact ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "user_id",
                   "in": "query",
                   "required": false,
                   "description": "The user/employee ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "pipeline_id",
                   "in": "query",
                   "required": false,
                   "description": "The pipeline ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "crm",
                "deal"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CrmDeals"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listCrmDeals"
          }
       },
       "/crm/{connection_id}/deal/{id}": {
          "get": {
             "summary": "Retrieve a deal",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Deal",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "crm",
                "deal"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CrmDeal"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getCrmDeal"
          },
          "put": {
             "summary": "Update a deal",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Deal",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "crm",
                "deal"
             ],
             "requestBody": {
                "description": "A deal represents an opportunity with companies and/or contacts",
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CrmDeal"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CrmDeal"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateCrmDeal"
          },
          "patch": {
             "summary": "Update a deal",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Deal",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "crm",
                "deal"
             ],
             "requestBody": {
                "description": "A deal represents an opportunity with companies and/or contacts",
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CrmDeal"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CrmDeal"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchCrmDeal"
          },
          "delete": {
             "summary": "Remove a deal",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Deal",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "crm",
                "deal"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeCrmDeal"
          }
       },
       "/crm/{connection_id}/contact": {
          "post": {
             "summary": "Create a contact",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "crm",
                "contact"
             ],
             "requestBody": {
                "description": "A contact represents a person that optionally is associated with a deal and/or a company",
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CrmContact"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CrmContact"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createCrmContact"
          },
          "get": {
             "summary": "List all contacts",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "company_id",
                   "in": "query",
                   "required": false,
                   "description": "The company ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "deal_id",
                   "in": "query",
                   "required": false,
                   "description": "The deal ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "user_id",
                   "in": "query",
                   "required": false,
                   "description": "The user/employee ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "crm",
                "contact"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CrmContacts"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listCrmContacts"
          }
       },
       "/crm/{connection_id}/contact/{id}": {
          "get": {
             "summary": "Retrieve a contact",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Contact",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "crm",
                "contact"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CrmContact"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getCrmContact"
          },
          "put": {
             "summary": "Update a contact",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Contact",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "crm",
                "contact"
             ],
             "requestBody": {
                "description": "A contact represents a person that optionally is associated with a deal and/or a company",
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CrmContact"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CrmContact"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateCrmContact"
          },
          "patch": {
             "summary": "Update a contact",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Contact",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "crm",
                "contact"
             ],
             "requestBody": {
                "description": "A contact represents a person that optionally is associated with a deal and/or a company",
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CrmContact"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CrmContact"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchCrmContact"
          },
          "delete": {
             "summary": "Remove a contact",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Contact",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "crm",
                "contact"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeCrmContact"
          }
       },
       "/crm/{connection_id}/company": {
          "post": {
             "summary": "Create a company",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "crm",
                "company"
             ],
             "requestBody": {
                "description": "A company represents an organization that optionally is associated with a deal and/or contacts",
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CrmCompany"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CrmCompany"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createCrmCompany"
          },
          "get": {
             "summary": "List all companies",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "deal_id",
                   "in": "query",
                   "required": false,
                   "description": "The deal ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "contact_id",
                   "in": "query",
                   "required": false,
                   "description": "The contact ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "user_id",
                   "in": "query",
                   "required": false,
                   "description": "The user/employee ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "crm",
                "company"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CrmCompanies"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listCrmCompanies"
          }
       },
       "/crm/{connection_id}/company/{id}": {
          "get": {
             "summary": "Retrieve a company",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Company",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "crm",
                "company"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CrmCompany"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getCrmCompany"
          },
          "put": {
             "summary": "Update a company",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Company",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "crm",
                "company"
             ],
             "requestBody": {
                "description": "A company represents an organization that optionally is associated with a deal and/or contacts",
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CrmCompany"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CrmCompany"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateCrmCompany"
          },
          "patch": {
             "summary": "Update a company",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Company",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "crm",
                "company"
             ],
             "requestBody": {
                "description": "A company represents an organization that optionally is associated with a deal and/or contacts",
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CrmCompany"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CrmCompany"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchCrmCompany"
          },
          "delete": {
             "summary": "Remove a company",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Company",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "crm",
                "company"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeCrmCompany"
          }
       },
       "/crm/{connection_id}/event": {
          "post": {
             "summary": "Create an event",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "crm",
                "event"
             ],
             "requestBody": {
                "description": "An event represents an event, activity, or engagement and is always associated with a deal, contact, or company",
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CrmEvent"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CrmEvent"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createCrmEvent"
          },
          "get": {
             "summary": "List all events",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "deal_id",
                   "in": "query",
                   "required": false,
                   "description": "The deal ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "contact_id",
                   "in": "query",
                   "required": false,
                   "description": "The contact ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "company_id",
                   "in": "query",
                   "required": false,
                   "description": "The company ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "user_id",
                   "in": "query",
                   "required": false,
                   "description": "The user/employee ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "type",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "lead_id",
                   "in": "query",
                   "required": false,
                   "description": "The CRM lead ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "crm",
                "event"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CrmEvents"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listCrmEvents"
          }
       },
       "/crm/{connection_id}/event/{id}": {
          "get": {
             "summary": "Retrieve an event",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Event",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "crm",
                "event"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CrmEvent"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getCrmEvent"
          },
          "put": {
             "summary": "Update an event",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Event",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "crm",
                "event"
             ],
             "requestBody": {
                "description": "An event represents an event, activity, or engagement and is always associated with a deal, contact, or company",
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CrmEvent"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CrmEvent"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateCrmEvent"
          },
          "patch": {
             "summary": "Update an event",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Event",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "crm",
                "event"
             ],
             "requestBody": {
                "description": "An event represents an event, activity, or engagement and is always associated with a deal, contact, or company",
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CrmEvent"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CrmEvent"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchCrmEvent"
          },
          "delete": {
             "summary": "Remove an event",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Event",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "crm",
                "event"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeCrmEvent"
          }
       },
       "/crm/{connection_id}/lead": {
          "post": {
             "summary": "Create a lead",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "crm",
                "lead"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CrmLead"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CrmLead"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createCrmLead"
          },
          "get": {
             "summary": "List all leads",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "company_id",
                   "in": "query",
                   "required": false,
                   "description": "The company ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "contact_id",
                   "in": "query",
                   "required": false,
                   "description": "The contact ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "user_id",
                   "in": "query",
                   "required": false,
                   "description": "The user/employee ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "crm",
                "lead"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CrmLeads"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listCrmLeads"
          }
       },
       "/crm/{connection_id}/lead/{id}": {
          "get": {
             "summary": "Retrieve a lead",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Lead",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "crm",
                "lead"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CrmLead"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getCrmLead"
          },
          "put": {
             "summary": "Update a lead",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Lead",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "crm",
                "lead"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CrmLead"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CrmLead"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateCrmLead"
          },
          "patch": {
             "summary": "Update a lead",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Lead",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "crm",
                "lead"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CrmLead"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CrmLead"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchCrmLead"
          },
          "delete": {
             "summary": "Remove a lead",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Lead",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "crm",
                "lead"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeCrmLead"
          }
       },
       "/crm/{connection_id}/pipeline": {
          "post": {
             "summary": "Create a pipeline",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "crm",
                "pipeline"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CrmPipeline"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CrmPipeline"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createCrmPipeline"
          },
          "get": {
             "summary": "List all pipelines",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "crm",
                "pipeline"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CrmPipelines"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listCrmPipelines"
          }
       },
       "/crm/{connection_id}/pipeline/{id}": {
          "get": {
             "summary": "Retrieve a pipeline",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Pipeline",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "crm",
                "pipeline"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CrmPipeline"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getCrmPipeline"
          },
          "put": {
             "summary": "Update a pipeline",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Pipeline",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "crm",
                "pipeline"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CrmPipeline"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CrmPipeline"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateCrmPipeline"
          },
          "patch": {
             "summary": "Update a pipeline",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Pipeline",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "crm",
                "pipeline"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CrmPipeline"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CrmPipeline"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchCrmPipeline"
          },
          "delete": {
             "summary": "Remove a pipeline",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Pipeline",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "crm",
                "pipeline"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeCrmPipeline"
          }
       },
       "/martech/{connection_id}/list": {
          "post": {
             "summary": "Create a list",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "martech",
                "list"
             ],
             "requestBody": {
                "description": "Mailing List",
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/MarketingList"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/MarketingList"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createMartechList"
          },
          "get": {
             "summary": "List all lists",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "martech",
                "list"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/MarketingLists"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listMartechLists"
          }
       },
       "/martech/{connection_id}/list/{id}": {
          "get": {
             "summary": "Retrieve a list",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the List",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "martech",
                "list"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/MarketingList"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getMartechList"
          },
          "put": {
             "summary": "Update a list",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the List",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "martech",
                "list"
             ],
             "requestBody": {
                "description": "Mailing List",
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/MarketingList"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/MarketingList"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateMartechList"
          },
          "patch": {
             "summary": "Update a list",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the List",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "martech",
                "list"
             ],
             "requestBody": {
                "description": "Mailing List",
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/MarketingList"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/MarketingList"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchMartechList"
          },
          "delete": {
             "summary": "Remove a list",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the List",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "martech",
                "list"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeMartechList"
          }
       },
       "/martech/{connection_id}/member": {
          "post": {
             "summary": "Create a member",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "martech",
                "member"
             ],
             "requestBody": {
                "description": "A member represents a person",
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/MarketingMember"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/MarketingMember"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createMartechMember"
          },
          "get": {
             "summary": "List all members",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "list_id",
                   "in": "query",
                   "required": false,
                   "description": "The list ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "martech",
                "member"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/MarketingMembers"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listMartechMembers"
          }
       },
       "/martech/{connection_id}/member/{id}": {
          "get": {
             "summary": "Retrieve a member",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Member",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "martech",
                "member"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/MarketingMember"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getMartechMember"
          },
          "put": {
             "summary": "Update a member",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Member",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "martech",
                "member"
             ],
             "requestBody": {
                "description": "A member represents a person",
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/MarketingMember"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/MarketingMember"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateMartechMember"
          },
          "patch": {
             "summary": "Update a member",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Member",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "martech",
                "member"
             ],
             "requestBody": {
                "description": "A member represents a person",
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/MarketingMember"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/MarketingMember"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchMartechMember"
          },
          "delete": {
             "summary": "Remove a member",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Member",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "martech",
                "member"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeMartechMember"
          }
       },
       "/ticketing/{connection_id}/ticket": {
          "post": {
             "summary": "Create a ticket",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ticketing",
                "ticket"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/TicketingTicket"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TicketingTicket"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createTicketingTicket"
          },
          "get": {
             "summary": "List all tickets",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "customer_id",
                   "in": "query",
                   "required": false,
                   "description": "The customer ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "user_id",
                   "in": "query",
                   "required": false,
                   "description": "The user/employee ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ticketing",
                "ticket"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TicketingTickets"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listTicketingTickets"
          }
       },
       "/ticketing/{connection_id}/ticket/{id}": {
          "get": {
             "summary": "Retrieve a ticket",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Ticket",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ticketing",
                "ticket"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TicketingTicket"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getTicketingTicket"
          },
          "put": {
             "summary": "Update a ticket",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Ticket",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ticketing",
                "ticket"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/TicketingTicket"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TicketingTicket"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateTicketingTicket"
          },
          "patch": {
             "summary": "Update a ticket",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Ticket",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ticketing",
                "ticket"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/TicketingTicket"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TicketingTicket"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchTicketingTicket"
          },
          "delete": {
             "summary": "Remove a ticket",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Ticket",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ticketing",
                "ticket"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeTicketingTicket"
          }
       },
       "/ticketing/{connection_id}/customer": {
          "post": {
             "summary": "Create a customer",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ticketing",
                "customer"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/TicketingCustomer"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TicketingCustomer"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createTicketingCustomer"
          },
          "get": {
             "summary": "List all customers",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ticketing",
                "customer"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TicketingCustomers"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listTicketingCustomers"
          }
       },
       "/ticketing/{connection_id}/customer/{id}": {
          "get": {
             "summary": "Retrieve a customer",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Customer",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ticketing",
                "customer"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TicketingCustomer"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getTicketingCustomer"
          },
          "put": {
             "summary": "Update a customer",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Customer",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ticketing",
                "customer"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/TicketingCustomer"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TicketingCustomer"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateTicketingCustomer"
          },
          "patch": {
             "summary": "Update a customer",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Customer",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ticketing",
                "customer"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/TicketingCustomer"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TicketingCustomer"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchTicketingCustomer"
          },
          "delete": {
             "summary": "Remove a customer",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Customer",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ticketing",
                "customer"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeTicketingCustomer"
          }
       },
       "/ticketing/{connection_id}/note": {
          "post": {
             "summary": "Create a note",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ticketing",
                "note"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/TicketingNote"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TicketingNote"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createTicketingNote"
          },
          "get": {
             "summary": "List all notes",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "ticket_id",
                   "in": "query",
                   "required": false,
                   "description": "The ticket ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "customer_id",
                   "in": "query",
                   "required": false,
                   "description": "The customer ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ticketing",
                "note"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TicketingNotes"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listTicketingNotes"
          }
       },
       "/ticketing/{connection_id}/note/{id}": {
          "get": {
             "summary": "Retrieve a note",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Note",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ticketing",
                "note"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TicketingNote"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getTicketingNote"
          },
          "put": {
             "summary": "Update a note",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Note",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ticketing",
                "note"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/TicketingNote"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TicketingNote"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateTicketingNote"
          },
          "patch": {
             "summary": "Update a note",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Note",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ticketing",
                "note"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/TicketingNote"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TicketingNote"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchTicketingNote"
          },
          "delete": {
             "summary": "Remove a note",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Note",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ticketing",
                "note"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeTicketingNote"
          }
       },
       "/ticketing/{connection_id}/category": {
          "post": {
             "summary": "Create a category",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ticketing",
                "category"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/TicketingCategory"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TicketingCategory"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createTicketingCategory"
          },
          "get": {
             "summary": "List all categories",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "parent_id",
                   "in": "query",
                   "required": false,
                   "description": "The parent ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ticketing",
                "category"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TicketingCategories"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listTicketingCategories"
          }
       },
       "/ticketing/{connection_id}/category/{id}": {
          "get": {
             "summary": "Retrieve a category",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Category",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ticketing",
                "category"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TicketingCategory"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getTicketingCategory"
          },
          "put": {
             "summary": "Update a category",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Category",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ticketing",
                "category"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/TicketingCategory"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TicketingCategory"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateTicketingCategory"
          },
          "patch": {
             "summary": "Update a category",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Category",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ticketing",
                "category"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/TicketingCategory"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TicketingCategory"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchTicketingCategory"
          },
          "delete": {
             "summary": "Remove a category",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Category",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ticketing",
                "category"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeTicketingCategory"
          }
       },
       "/enrich/{connection_id}/person": {
          "get": {
             "summary": "Retrieve enrichment information for a person",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "email",
                   "in": "query",
                   "required": false,
                   "description": "The email of the person to search"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "twitter",
                   "in": "query",
                   "required": false,
                   "description": "The twitter handle of the person to search"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "name",
                   "in": "query",
                   "required": false,
                   "description": "The name of the person to search"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "linkedin_url",
                   "in": "query",
                   "required": false,
                   "description": "The LinkedIn URL of the person to search"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "company_name",
                   "in": "query",
                   "required": false,
                   "description": "The name of the company the person is associated with.  Not valid by itself."
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "enrich",
                "person"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/EnrichPerson"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listEnrichPeople"
          }
       },
       "/enrich/{connection_id}/company": {
          "get": {
             "summary": "Retrieve enrichment information for a company",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "domain",
                   "in": "query",
                   "required": false,
                   "description": "The domain of the company to search"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "name",
                   "in": "query",
                   "required": false,
                   "description": "The name of the company to search"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "enrich",
                "company"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/EnrichCompany"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listEnrichCompanies"
          }
       },
       "/uc/{connection_id}/call": {
          "get": {
             "summary": "List all calls",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "user_id",
                   "in": "query",
                   "required": false,
                   "description": "The user/employee ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "contact_id",
                   "in": "query",
                   "required": false,
                   "description": "The contact ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "uc",
                "call"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/UcCalls"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listUcCalls"
          }
       },
       "/uc/{connection_id}/contact": {
          "post": {
             "summary": "Create a contact",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "uc",
                "contact"
             ],
             "requestBody": {
                "description": "A contact represents a person that optionally is associated with a call",
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/UcContact"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/UcContact"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createUcContact"
          },
          "get": {
             "summary": "List all contacts",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "user_id",
                   "in": "query",
                   "required": false,
                   "description": "The user/employee ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "uc",
                "contact"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/UcContacts"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listUcContacts"
          }
       },
       "/uc/{connection_id}/contact/{id}": {
          "get": {
             "summary": "Retrieve a contact",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Contact",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "uc",
                "contact"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/UcContact"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getUcContact"
          },
          "put": {
             "summary": "Update a contact",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Contact",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "uc",
                "contact"
             ],
             "requestBody": {
                "description": "A contact represents a person that optionally is associated with a call",
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/UcContact"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/UcContact"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateUcContact"
          },
          "patch": {
             "summary": "Update a contact",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Contact",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "uc",
                "contact"
             ],
             "requestBody": {
                "description": "A contact represents a person that optionally is associated with a call",
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/UcContact"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/UcContact"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchUcContact"
          },
          "delete": {
             "summary": "Remove a contact",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Contact",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "uc",
                "contact"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeUcContact"
          }
       },
       "/uc/{connection_id}/comment": {
          "post": {
             "summary": "Create a comment",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "uc",
                "comment"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/UcComment"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/UcComment"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createUcComment"
          },
          "get": {
             "summary": "List all comments",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "user_id",
                   "in": "query",
                   "required": false,
                   "description": "The user/employee ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "call_id",
                   "in": "query",
                   "required": false,
                   "description": "The call ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "uc",
                "comment"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/UcComments"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listUcComments"
          }
       },
       "/uc/{connection_id}/comment/{id}": {
          "get": {
             "summary": "Retrieve a comment",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Comment",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "uc",
                "comment"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/UcComment"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getUcComment"
          },
          "put": {
             "summary": "Update a comment",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Comment",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "uc",
                "comment"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/UcComment"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/UcComment"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateUcComment"
          },
          "patch": {
             "summary": "Update a comment",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Comment",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "uc",
                "comment"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/UcComment"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/UcComment"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchUcComment"
          },
          "delete": {
             "summary": "Remove a comment",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Comment",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "uc",
                "comment"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeUcComment"
          }
       },
       "/uc/{connection_id}/recording": {
          "post": {
             "summary": "Create a recording",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "uc",
                "recording"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/UcRecording"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/UcRecording"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createUcRecording"
          },
          "get": {
             "summary": "List all recordings",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "user_id",
                   "in": "query",
                   "required": false,
                   "description": "The user/employee ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "call_id",
                   "in": "query",
                   "required": false,
                   "description": "The call ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "start_gte",
                   "in": "query",
                   "required": false,
                   "description": "The start date to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "end_le",
                   "in": "query",
                   "required": false,
                   "description": "The end date to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "contact_id",
                   "in": "query",
                   "required": false,
                   "description": "The contact ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "uc",
                "recording"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/UcRecordings"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listUcRecordings"
          }
       },
       "/uc/{connection_id}/recording/{id}": {
          "get": {
             "summary": "Retrieve a recording",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Recording",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "uc",
                "recording"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/UcRecording"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getUcRecording"
          },
          "put": {
             "summary": "Update a recording",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Recording",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "uc",
                "recording"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/UcRecording"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/UcRecording"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateUcRecording"
          },
          "patch": {
             "summary": "Update a recording",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Recording",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "uc",
                "recording"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/UcRecording"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/UcRecording"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchUcRecording"
          },
          "delete": {
             "summary": "Remove a recording",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Recording",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "uc",
                "recording"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeUcRecording"
          }
       },
       "/ats/{connection_id}/activity": {
          "post": {
             "summary": "Create an activity",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "activity"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AtsActivity"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsActivity"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createAtsActivity"
          },
          "get": {
             "summary": "List all activities",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "user_id",
                   "in": "query",
                   "required": false,
                   "description": "The user/employee ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "application_id",
                   "in": "query",
                   "required": false,
                   "description": "The application ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "candidate_id",
                   "in": "query",
                   "required": false,
                   "description": "The candidate ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "job_id",
                   "in": "query",
                   "required": false,
                   "description": "The job ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "document_id",
                   "in": "query",
                   "required": false,
                   "description": "The document ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "interview_id",
                   "in": "query",
                   "required": false,
                   "description": "The interview ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "type",
                   "in": "query",
                   "required": false,
                   "description": "The type to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "activity"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsActivities"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listAtsActivities"
          }
       },
       "/ats/{connection_id}/activity/{id}": {
          "get": {
             "summary": "Retrieve an activity",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Activity",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "activity"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsActivity"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getAtsActivity"
          },
          "put": {
             "summary": "Update an activity",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Activity",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "activity"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AtsActivity"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsActivity"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateAtsActivity"
          },
          "patch": {
             "summary": "Update an activity",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Activity",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "activity"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AtsActivity"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsActivity"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchAtsActivity"
          },
          "delete": {
             "summary": "Remove an activity",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Activity",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "activity"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeAtsActivity"
          }
       },
       "/ats/{connection_id}/candidate": {
          "post": {
             "summary": "Create a candidate",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "candidate"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AtsCandidate"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsCandidate"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createAtsCandidate"
          },
          "get": {
             "summary": "List all candidates",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "company_id",
                   "in": "query",
                   "required": false,
                   "description": "The company ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "candidate"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsCandidates"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listAtsCandidates"
          }
       },
       "/ats/{connection_id}/candidate/{id}": {
          "get": {
             "summary": "Retrieve a candidate",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Candidate",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "candidate"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsCandidate"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getAtsCandidate"
          },
          "put": {
             "summary": "Update a candidate",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Candidate",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "candidate"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AtsCandidate"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsCandidate"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateAtsCandidate"
          },
          "patch": {
             "summary": "Update a candidate",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Candidate",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "candidate"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AtsCandidate"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsCandidate"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchAtsCandidate"
          },
          "delete": {
             "summary": "Remove a candidate",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Candidate",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "candidate"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeAtsCandidate"
          }
       },
       "/ats/{connection_id}/job": {
          "post": {
             "summary": "Create a job",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "job"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AtsJob"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsJob"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createAtsJob"
          },
          "get": {
             "summary": "List all jobs",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "user_id",
                   "in": "query",
                   "required": false,
                   "description": "The user/employee ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "company_id",
                   "in": "query",
                   "required": false,
                   "description": "The company ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "status",
                   "in": "query",
                   "required": false,
                   "description": "The status to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "job"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsJobs"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listAtsJobs"
          }
       },
       "/ats/{connection_id}/job/{id}": {
          "get": {
             "summary": "Retrieve a job",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Job",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "job"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsJob"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getAtsJob"
          },
          "put": {
             "summary": "Update a job",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Job",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "job"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AtsJob"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsJob"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateAtsJob"
          },
          "patch": {
             "summary": "Update a job",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Job",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "job"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AtsJob"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsJob"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchAtsJob"
          },
          "delete": {
             "summary": "Remove a job",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Job",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "job"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeAtsJob"
          }
       },
       "/ats/{connection_id}/interview": {
          "post": {
             "summary": "Create an interview",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "interview"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AtsInterview"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsInterview"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createAtsInterview"
          },
          "get": {
             "summary": "List all interviews",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "application_id",
                   "in": "query",
                   "required": false,
                   "description": "The application ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "interview"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsInterviews"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listAtsInterviews"
          }
       },
       "/ats/{connection_id}/interview/{id}": {
          "get": {
             "summary": "Retrieve an interview",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Interview",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "interview"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsInterview"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getAtsInterview"
          },
          "put": {
             "summary": "Update an interview",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Interview",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "interview"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AtsInterview"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsInterview"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateAtsInterview"
          },
          "patch": {
             "summary": "Update an interview",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Interview",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "interview"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AtsInterview"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsInterview"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchAtsInterview"
          },
          "delete": {
             "summary": "Remove an interview",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Interview",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "interview"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeAtsInterview"
          }
       },
       "/ats/{connection_id}/document": {
          "post": {
             "summary": "Create a document",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "document"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AtsDocument"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsDocument"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createAtsDocument"
          },
          "get": {
             "summary": "List all documents",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "application_id",
                   "in": "query",
                   "required": false,
                   "description": "The application ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "candidate_id",
                   "in": "query",
                   "required": false,
                   "description": "The candidate ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "job_id",
                   "in": "query",
                   "required": false,
                   "description": "The job ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "type",
                   "in": "query",
                   "required": false,
                   "description": "The type to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "document"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsDocuments"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listAtsDocuments"
          }
       },
       "/ats/{connection_id}/document/{id}": {
          "get": {
             "summary": "Retrieve a document",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Document",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "document"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsDocument"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getAtsDocument"
          },
          "put": {
             "summary": "Update a document",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Document",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "document"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AtsDocument"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsDocument"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateAtsDocument"
          },
          "patch": {
             "summary": "Update a document",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Document",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "document"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AtsDocument"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsDocument"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchAtsDocument"
          },
          "delete": {
             "summary": "Remove a document",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Document",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "document"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeAtsDocument"
          }
       },
       "/ats/{connection_id}/applicationstatus": {
          "get": {
             "summary": "List all applicationstatuses",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "applicationstatus"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsStatuses"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listAtsApplicationstatuses"
          }
       },
       "/ats/{connection_id}/application": {
          "post": {
             "summary": "Create an application",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "application"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AtsApplication"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsApplication"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createAtsApplication"
          },
          "get": {
             "summary": "List all applications",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "job_id",
                   "in": "query",
                   "required": false,
                   "description": "The job ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "candidate_id",
                   "in": "query",
                   "required": false,
                   "description": "The candidate ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "company_id",
                   "in": "query",
                   "required": false,
                   "description": "The company ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "application"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsApplications"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listAtsApplications"
          }
       },
       "/ats/{connection_id}/application/{id}": {
          "get": {
             "summary": "Retrieve an application",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Application",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "application"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsApplication"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getAtsApplication"
          },
          "put": {
             "summary": "Update an application",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Application",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "application"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AtsApplication"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsApplication"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateAtsApplication"
          },
          "patch": {
             "summary": "Update an application",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Application",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "application"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AtsApplication"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsApplication"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchAtsApplication"
          },
          "delete": {
             "summary": "Remove an application",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Application",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "application"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeAtsApplication"
          }
       },
       "/ats/{connection_id}/scorecard": {
          "post": {
             "summary": "Create a scorecard",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "scorecard"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AtsScorecard"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsScorecard"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createAtsScorecard"
          },
          "get": {
             "summary": "List all scorecards",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "candidate_id",
                   "in": "query",
                   "required": false,
                   "description": "The candidate ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "application_id",
                   "in": "query",
                   "required": false,
                   "description": "The application ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "interview_id",
                   "in": "query",
                   "required": false,
                   "description": "The interview ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "job_id",
                   "in": "query",
                   "required": false,
                   "description": "The job ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "scorecard"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsScorecards"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listAtsScorecards"
          }
       },
       "/ats/{connection_id}/scorecard/{id}": {
          "get": {
             "summary": "Retrieve a scorecard",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Scorecard",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "scorecard"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsScorecard"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getAtsScorecard"
          },
          "put": {
             "summary": "Update a scorecard",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Scorecard",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "scorecard"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AtsScorecard"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsScorecard"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateAtsScorecard"
          },
          "patch": {
             "summary": "Update a scorecard",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Scorecard",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "scorecard"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AtsScorecard"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsScorecard"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchAtsScorecard"
          },
          "delete": {
             "summary": "Remove a scorecard",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Scorecard",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "scorecard"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeAtsScorecard"
          }
       },
       "/ats/{connection_id}/company": {
          "post": {
             "summary": "Create a company",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "company"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AtsCompany"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsCompany"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createAtsCompany"
          },
          "get": {
             "summary": "List all companies",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "company"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsCompanies"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listAtsCompanies"
          }
       },
       "/ats/{connection_id}/company/{id}": {
          "get": {
             "summary": "Retrieve a company",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Company",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "company"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsCompany"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getAtsCompany"
          },
          "put": {
             "summary": "Update a company",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Company",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "company"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AtsCompany"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsCompany"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateAtsCompany"
          },
          "patch": {
             "summary": "Update a company",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Company",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "company"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AtsCompany"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AtsCompany"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchAtsCompany"
          },
          "delete": {
             "summary": "Remove a company",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Company",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "ats",
                "company"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeAtsCompany"
          }
       },
       "/hris/{connection_id}/employee": {
          "post": {
             "summary": "Create an employee",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "employee"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/HrisEmployee"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/HrisEmployee"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createHrisEmployee"
          },
          "get": {
             "summary": "List all employees",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "company_id",
                   "in": "query",
                   "required": false,
                   "description": "The company ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "employee"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/HrisEmployees"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listHrisEmployees"
          }
       },
       "/hris/{connection_id}/employee/{id}": {
          "get": {
             "summary": "Retrieve an employee",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Employee",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "employee"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/HrisEmployee"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getHrisEmployee"
          },
          "put": {
             "summary": "Update an employee",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Employee",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "employee"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/HrisEmployee"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/HrisEmployee"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateHrisEmployee"
          },
          "patch": {
             "summary": "Update an employee",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Employee",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "employee"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/HrisEmployee"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/HrisEmployee"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchHrisEmployee"
          },
          "delete": {
             "summary": "Remove an employee",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Employee",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "employee"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeHrisEmployee"
          }
       },
       "/hris/{connection_id}/company": {
          "post": {
             "summary": "Create a company",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "company"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/HrisCompany"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/HrisCompany"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createHrisCompany"
          },
          "get": {
             "summary": "List all companies",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "company"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/HrisCompanies"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listHrisCompanies"
          }
       },
       "/hris/{connection_id}/company/{id}": {
          "get": {
             "summary": "Retrieve a company",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Company",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "company"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/HrisCompany"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getHrisCompany"
          },
          "put": {
             "summary": "Update a company",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Company",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "company"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/HrisCompany"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/HrisCompany"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateHrisCompany"
          },
          "patch": {
             "summary": "Update a company",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Company",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "company"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/HrisCompany"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/HrisCompany"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchHrisCompany"
          },
          "delete": {
             "summary": "Remove a company",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Company",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "company"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeHrisCompany"
          }
       },
       "/hris/{connection_id}/location": {
          "post": {
             "summary": "Create a location",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "location"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/HrisLocation"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/HrisLocation"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createHrisLocation"
          },
          "get": {
             "summary": "List all locations",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "company_id",
                   "in": "query",
                   "required": false,
                   "description": "The company ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "location"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/HrisLocations"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listHrisLocations"
          }
       },
       "/hris/{connection_id}/location/{id}": {
          "get": {
             "summary": "Retrieve a location",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Location",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "location"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/HrisLocation"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getHrisLocation"
          },
          "put": {
             "summary": "Update a location",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Location",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "location"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/HrisLocation"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/HrisLocation"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateHrisLocation"
          },
          "patch": {
             "summary": "Update a location",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Location",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "location"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/HrisLocation"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/HrisLocation"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchHrisLocation"
          },
          "delete": {
             "summary": "Remove a location",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Location",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "location"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeHrisLocation"
          }
       },
       "/hris/{connection_id}/group": {
          "post": {
             "summary": "Create a group",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "group"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/HrisGroup"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/HrisGroup"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createHrisGroup"
          },
          "get": {
             "summary": "List all groups",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "company_id",
                   "in": "query",
                   "required": false,
                   "description": "The company ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "group"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/HrisGroups"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listHrisGroups"
          }
       },
       "/hris/{connection_id}/group/{id}": {
          "get": {
             "summary": "Retrieve a group",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Group",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "group"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/HrisGroup"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getHrisGroup"
          },
          "put": {
             "summary": "Update a group",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Group",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "group"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/HrisGroup"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/HrisGroup"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateHrisGroup"
          },
          "patch": {
             "summary": "Update a group",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Group",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "group"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/HrisGroup"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/HrisGroup"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchHrisGroup"
          },
          "delete": {
             "summary": "Remove a group",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Group",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "group"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeHrisGroup"
          }
       },
       "/hris/{connection_id}/timeoff/{id}": {
          "get": {
             "summary": "Retrieve a timeoff",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Timeoff",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "timeoff"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/HrisTimeoff"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getHrisTimeoff"
          }
       },
       "/hris/{connection_id}/timeoff": {
          "get": {
             "summary": "List all timeoffs",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "user_id",
                   "in": "query",
                   "required": false,
                   "description": "The user/employee ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "company_id",
                   "in": "query",
                   "required": false,
                   "description": "The company ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "start_gte",
                   "in": "query",
                   "required": false,
                   "description": "The start date to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "end_le",
                   "in": "query",
                   "required": false,
                   "description": "The end date to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "timeoff"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/HrisTimeoffs"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listHrisTimeoffs"
          }
       },
       "/hris/{connection_id}/payslip/{id}": {
          "get": {
             "summary": "Retrieve a payslip",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Payslip",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "payslip"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/HrisPayslip"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getHrisPayslip"
          }
       },
       "/hris/{connection_id}/payslip": {
          "get": {
             "summary": "List all payslips",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "user_id",
                   "in": "query",
                   "required": false,
                   "description": "The user/employee ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "company_id",
                   "in": "query",
                   "required": false,
                   "description": "The company ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "payslip"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/HrisPayslips"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listHrisPayslips"
          }
       },
       "/hris/{connection_id}/device": {
          "post": {
             "summary": "Create a device",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "device"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/HrisDevice"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/HrisDevice"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createHrisDevice"
          },
          "get": {
             "summary": "List all devices",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "user_id",
                   "in": "query",
                   "required": false,
                   "description": "The user/employee ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "device"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/HrisDevices"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listHrisDevices"
          }
       },
       "/hris/{connection_id}/device/{id}": {
          "get": {
             "summary": "Retrieve a device",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Device",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "device"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/HrisDevice"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getHrisDevice"
          },
          "put": {
             "summary": "Update a device",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Device",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "device"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/HrisDevice"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/HrisDevice"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateHrisDevice"
          },
          "patch": {
             "summary": "Update a device",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Device",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "device"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/HrisDevice"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/HrisDevice"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchHrisDevice"
          },
          "delete": {
             "summary": "Remove a device",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Device",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "device"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeHrisDevice"
          }
       },
       "/hris/{connection_id}/timeshift": {
          "post": {
             "summary": "Create a timeshift",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "timeshift"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/HrisTimeshift"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/HrisTimeshift"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createHrisTimeshift"
          },
          "get": {
             "summary": "List all timeshifts",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "user_id",
                   "in": "query",
                   "required": false,
                   "description": "The user/employee ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "company_id",
                   "in": "query",
                   "required": false,
                   "description": "The company ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "location_id",
                   "in": "query",
                   "required": false,
                   "description": "The location ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "start_gte",
                   "in": "query",
                   "required": false,
                   "description": "The start date to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "end_le",
                   "in": "query",
                   "required": false,
                   "description": "The end date to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "timeshift"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/HrisTimeshifts"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listHrisTimeshifts"
          }
       },
       "/hris/{connection_id}/timeshift/{id}": {
          "get": {
             "summary": "Retrieve a timeshift",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Timeshift",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "timeshift"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/HrisTimeshift"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getHrisTimeshift"
          },
          "put": {
             "summary": "Update a timeshift",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Timeshift",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "timeshift"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/HrisTimeshift"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/HrisTimeshift"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateHrisTimeshift"
          },
          "patch": {
             "summary": "Update a timeshift",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Timeshift",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "timeshift"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/HrisTimeshift"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/HrisTimeshift"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchHrisTimeshift"
          },
          "delete": {
             "summary": "Remove a timeshift",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Timeshift",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "hris",
                "timeshift"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeHrisTimeshift"
          }
       },
       "/verification/{connection_id}/package/{id}": {
          "get": {
             "summary": "Retrieve a package",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Package",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "verification",
                "package"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/VerificationPackage"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getVerificationPackage"
          }
       },
       "/verification/{connection_id}/package": {
          "get": {
             "summary": "List all packages",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "verification",
                "package"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/VerificationPackages"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listVerificationPackages"
          }
       },
       "/verification/{connection_id}/request": {
          "post": {
             "summary": "Create a request",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "verification",
                "request"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/VerificationRequest"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/VerificationRequest"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createVerificationRequest"
          },
          "get": {
             "summary": "List all requests",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "package_id",
                   "in": "query",
                   "required": false,
                   "description": "The package ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "candidate_id",
                   "in": "query",
                   "required": false,
                   "description": "The candidate ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "verification",
                "request"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/VerificationRequests"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listVerificationRequests"
          }
       },
       "/verification/{connection_id}/request/{id}": {
          "get": {
             "summary": "Retrieve a request",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Request",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "verification",
                "request"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/VerificationRequest"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getVerificationRequest"
          },
          "put": {
             "summary": "Update a request",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Request",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "verification",
                "request"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/VerificationRequest"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/VerificationRequest"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateVerificationRequest"
          },
          "patch": {
             "summary": "Update a request",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Request",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "verification",
                "request"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/VerificationRequest"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/VerificationRequest"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchVerificationRequest"
          },
          "delete": {
             "summary": "Remove a request",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Request",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "verification",
                "request"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeVerificationRequest"
          }
       },
       "/passthrough/{connection_id}/{path}": {
          "post": {
             "summary": "Passthrough POST",
             "parameters": [
                {
                   "name": "query",
                   "in": "query",
                   "explode": true,
                   "style": "form",
                   "schema": {
                      "additionalProperties": true
                   }
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "path",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "passthrough"
             ],
             "requestBody": {
                "description": "integration-specific payload",
                "content": {
                   "application/json": {
                      "schema": {}
                   },
                   "text/plain": {
                      "schema": {}
                   },
                   "*/*": {
                      "schema": {
                         "type": "string",
                         "format": "binary"
                      }
                   }
                }
             },
             "responses": {
                "204": {
                   "description": "No content",
                   "headers": {
                      "Date": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   }
                },
                "205": {
                   "description": "Reset content",
                   "headers": {
                      "Date": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   }
                },
                "304": {
                   "description": "Not modified",
                   "headers": {
                      "Date": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   }
                },
                "default": {
                   "content": {
                      "application/json": {
                         "schema": {}
                      },
                      "application/xml": {
                         "schema": {
                            "type": "string"
                         }
                      },
                      "text/csv": {
                         "schema": {
                            "type": "string"
                         }
                      },
                      "text/plain": {
                         "schema": {
                            "type": "string"
                         }
                      },
                      "*/*": {
                         "schema": {
                            "type": "string",
                            "format": "binary"
                         }
                      }
                   },
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createPassthrough"
          },
          "put": {
             "summary": "Passthrough PUT",
             "parameters": [
                {
                   "name": "query",
                   "in": "query",
                   "explode": true,
                   "style": "form",
                   "schema": {
                      "additionalProperties": true
                   }
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "path",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "passthrough"
             ],
             "requestBody": {
                "description": "integration-specific payload",
                "content": {
                   "application/json": {
                      "schema": {}
                   },
                   "text/plain": {
                      "schema": {}
                   },
                   "*/*": {
                      "schema": {
                         "type": "string",
                         "format": "binary"
                      }
                   }
                }
             },
             "responses": {
                "204": {
                   "description": "No content",
                   "headers": {
                      "Date": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   }
                },
                "205": {
                   "description": "Reset content",
                   "headers": {
                      "Date": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   }
                },
                "304": {
                   "description": "Not modified",
                   "headers": {
                      "Date": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   }
                },
                "default": {
                   "content": {
                      "application/json": {
                         "schema": {}
                      },
                      "application/xml": {
                         "schema": {
                            "type": "string"
                         }
                      },
                      "text/csv": {
                         "schema": {
                            "type": "string"
                         }
                      },
                      "text/plain": {
                         "schema": {
                            "type": "string"
                         }
                      },
                      "*/*": {
                         "schema": {
                            "type": "string",
                            "format": "binary"
                         }
                      }
                   },
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updatePassthrough"
          },
          "patch": {
             "summary": "Passthrough PUT",
             "parameters": [
                {
                   "name": "query",
                   "in": "query",
                   "explode": true,
                   "style": "form",
                   "schema": {
                      "additionalProperties": true
                   }
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "path",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "passthrough"
             ],
             "requestBody": {
                "description": "integration-specific payload",
                "content": {
                   "application/json": {
                      "schema": {}
                   },
                   "text/plain": {
                      "schema": {}
                   },
                   "*/*": {
                      "schema": {
                         "type": "string",
                         "format": "binary"
                      }
                   }
                }
             },
             "responses": {
                "204": {
                   "description": "No content",
                   "headers": {
                      "Date": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   }
                },
                "205": {
                   "description": "Reset content",
                   "headers": {
                      "Date": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   }
                },
                "304": {
                   "description": "Not modified",
                   "headers": {
                      "Date": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   }
                },
                "default": {
                   "content": {
                      "application/json": {
                         "schema": {}
                      },
                      "application/xml": {
                         "schema": {
                            "type": "string"
                         }
                      },
                      "text/csv": {
                         "schema": {
                            "type": "string"
                         }
                      },
                      "text/plain": {
                         "schema": {
                            "type": "string"
                         }
                      },
                      "*/*": {
                         "schema": {
                            "type": "string",
                            "format": "binary"
                         }
                      }
                   },
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchPassthrough"
          },
          "get": {
             "summary": "Passthrough GET",
             "parameters": [
                {
                   "name": "query",
                   "in": "query",
                   "explode": true,
                   "style": "form",
                   "schema": {
                      "additionalProperties": true
                   }
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "path",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "passthrough"
             ],
             "responses": {
                "204": {
                   "description": "No content",
                   "headers": {
                      "Date": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   }
                },
                "205": {
                   "description": "Reset content",
                   "headers": {
                      "Date": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   }
                },
                "304": {
                   "description": "Not modified",
                   "headers": {
                      "Date": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   }
                },
                "default": {
                   "content": {
                      "application/json": {
                         "schema": {}
                      },
                      "application/xml": {
                         "schema": {
                            "type": "string"
                         }
                      },
                      "text/csv": {
                         "schema": {
                            "type": "string"
                         }
                      },
                      "text/plain": {
                         "schema": {
                            "type": "string"
                         }
                      },
                      "*/*": {
                         "schema": {
                            "type": "string",
                            "format": "binary"
                         }
                      }
                   },
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listPassthroughs"
          },
          "delete": {
             "summary": "Passthrough DELETE",
             "parameters": [
                {
                   "name": "query",
                   "in": "query",
                   "explode": true,
                   "style": "form",
                   "schema": {
                      "additionalProperties": true
                   }
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "path",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "passthrough"
             ],
             "responses": {
                "204": {
                   "description": "No content",
                   "headers": {
                      "Date": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   }
                },
                "205": {
                   "description": "Reset content",
                   "headers": {
                      "Date": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   }
                },
                "304": {
                   "description": "Not modified",
                   "headers": {
                      "Date": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   }
                },
                "default": {
                   "content": {
                      "application/json": {
                         "schema": {}
                      },
                      "application/xml": {
                         "schema": {
                            "type": "string"
                         }
                      },
                      "text/csv": {
                         "schema": {
                            "type": "string"
                         }
                      },
                      "text/plain": {
                         "schema": {
                            "type": "string"
                         }
                      },
                      "*/*": {
                         "schema": {
                            "type": "string",
                            "format": "binary"
                         }
                      }
                   },
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removePassthrough"
          }
       },
       "/accounting/{connection_id}/account": {
          "post": {
             "summary": "Create an account",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "account"
             ],
             "requestBody": {
                "description": "Chart of accounts",
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AccountingAccount"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingAccount"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createAccountingAccount"
          },
          "get": {
             "summary": "List all accounts",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "org_id",
                   "in": "query",
                   "required": false,
                   "description": "The org ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "account"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingAccounts"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listAccountingAccounts"
          }
       },
       "/accounting/{connection_id}/account/{id}": {
          "get": {
             "summary": "Retrieve an account",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Account",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "account"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingAccount"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getAccountingAccount"
          },
          "put": {
             "summary": "Update an account",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Account",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "account"
             ],
             "requestBody": {
                "description": "Chart of accounts",
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AccountingAccount"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingAccount"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateAccountingAccount"
          },
          "patch": {
             "summary": "Update an account",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Account",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "account"
             ],
             "requestBody": {
                "description": "Chart of accounts",
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AccountingAccount"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingAccount"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchAccountingAccount"
          },
          "delete": {
             "summary": "Remove an account",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Account",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "account"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeAccountingAccount"
          }
       },
       "/accounting/{connection_id}/journal": {
          "post": {
             "summary": "Create a journal",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "journal"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AccountingJournal"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingJournal"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createAccountingJournal"
          },
          "get": {
             "summary": "List all journals",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "org_id",
                   "in": "query",
                   "required": false,
                   "description": "The org ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "journal"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingJournals"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listAccountingJournals"
          }
       },
       "/accounting/{connection_id}/journal/{id}": {
          "get": {
             "summary": "Retrieve a journal",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Journal",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "journal"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingJournal"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getAccountingJournal"
          },
          "put": {
             "summary": "Update a journal",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Journal",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "journal"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AccountingJournal"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingJournal"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateAccountingJournal"
          },
          "patch": {
             "summary": "Update a journal",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Journal",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "journal"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AccountingJournal"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingJournal"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchAccountingJournal"
          },
          "delete": {
             "summary": "Remove a journal",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Journal",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "journal"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeAccountingJournal"
          }
       },
       "/accounting/{connection_id}/transaction": {
          "post": {
             "summary": "Create a transaction",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "transaction"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AccountingTransaction"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingTransaction"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createAccountingTransaction"
          },
          "get": {
             "summary": "List all transactions",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "contact_id",
                   "in": "query",
                   "required": false,
                   "description": "The contact ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "transaction"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingTransactions"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listAccountingTransactions"
          }
       },
       "/accounting/{connection_id}/transaction/{id}": {
          "get": {
             "summary": "Retrieve a transaction",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Transaction",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "transaction"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingTransaction"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getAccountingTransaction"
          },
          "put": {
             "summary": "Update a transaction",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Transaction",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "transaction"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AccountingTransaction"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingTransaction"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateAccountingTransaction"
          },
          "patch": {
             "summary": "Update a transaction",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Transaction",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "transaction"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AccountingTransaction"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingTransaction"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchAccountingTransaction"
          },
          "delete": {
             "summary": "Remove a transaction",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Transaction",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "transaction"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeAccountingTransaction"
          }
       },
       "/accounting/{connection_id}/contact": {
          "post": {
             "summary": "Create a contact",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "contact"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AccountingContact"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingContact"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createAccountingContact"
          },
          "get": {
             "summary": "List all contacts",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "type",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "org_id",
                   "in": "query",
                   "required": false,
                   "description": "The org ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "contact"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingContacts"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listAccountingContacts"
          }
       },
       "/accounting/{connection_id}/contact/{id}": {
          "get": {
             "summary": "Retrieve a contact",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Contact",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "contact"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingContact"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getAccountingContact"
          },
          "put": {
             "summary": "Update a contact",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Contact",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "contact"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AccountingContact"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingContact"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateAccountingContact"
          },
          "patch": {
             "summary": "Update a contact",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Contact",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "contact"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AccountingContact"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingContact"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchAccountingContact"
          },
          "delete": {
             "summary": "Remove a contact",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Contact",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "contact"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeAccountingContact"
          }
       },
       "/accounting/{connection_id}/invoice": {
          "post": {
             "summary": "Create an invoice",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "invoice"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AccountingInvoice"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingInvoice"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createAccountingInvoice"
          },
          "get": {
             "summary": "List all invoices",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "contact_id",
                   "in": "query",
                   "required": false,
                   "description": "The contact ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "org_id",
                   "in": "query",
                   "required": false,
                   "description": "The org ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "type",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "invoice"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingInvoices"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listAccountingInvoices"
          }
       },
       "/accounting/{connection_id}/invoice/{id}": {
          "get": {
             "summary": "Retrieve an invoice",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Invoice",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "invoice"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingInvoice"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getAccountingInvoice"
          },
          "put": {
             "summary": "Update an invoice",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Invoice",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "invoice"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AccountingInvoice"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingInvoice"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateAccountingInvoice"
          },
          "patch": {
             "summary": "Update an invoice",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Invoice",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "invoice"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AccountingInvoice"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingInvoice"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchAccountingInvoice"
          },
          "delete": {
             "summary": "Remove an invoice",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Invoice",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "invoice"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeAccountingInvoice"
          }
       },
       "/accounting/{connection_id}/bill": {
          "post": {
             "summary": "Create a bill",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "bill"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AccountingBill"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingBill"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createAccountingBill"
          },
          "get": {
             "summary": "List all bills",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "contact_id",
                   "in": "query",
                   "required": false,
                   "description": "The contact ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "org_id",
                   "in": "query",
                   "required": false,
                   "description": "The org ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "bill"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingBills"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listAccountingBills"
          }
       },
       "/accounting/{connection_id}/bill/{id}": {
          "get": {
             "summary": "Retrieve a bill",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Bill",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "bill"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingBill"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getAccountingBill"
          },
          "put": {
             "summary": "Update a bill",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Bill",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "bill"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AccountingBill"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingBill"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateAccountingBill"
          },
          "patch": {
             "summary": "Update a bill",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Bill",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "bill"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AccountingBill"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingBill"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchAccountingBill"
          },
          "delete": {
             "summary": "Remove a bill",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Bill",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "bill"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeAccountingBill"
          }
       },
       "/accounting/{connection_id}/creditmemo": {
          "post": {
             "summary": "Create a creditmemo",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "creditmemo"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AccountingCreditmemo"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingCreditmemo"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createAccountingCreditmemo"
          },
          "get": {
             "summary": "List all creditmemoes",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "contact_id",
                   "in": "query",
                   "required": false,
                   "description": "The contact ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "org_id",
                   "in": "query",
                   "required": false,
                   "description": "The org ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "creditmemo"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingCreditmemoes"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listAccountingCreditmemoes"
          }
       },
       "/accounting/{connection_id}/creditmemo/{id}": {
          "get": {
             "summary": "Retrieve a creditmemo",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Creditmemo",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "creditmemo"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingCreditmemo"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getAccountingCreditmemo"
          },
          "put": {
             "summary": "Update a creditmemo",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Creditmemo",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "creditmemo"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AccountingCreditmemo"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingCreditmemo"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateAccountingCreditmemo"
          },
          "patch": {
             "summary": "Update a creditmemo",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Creditmemo",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "creditmemo"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AccountingCreditmemo"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingCreditmemo"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchAccountingCreditmemo"
          },
          "delete": {
             "summary": "Remove a creditmemo",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Creditmemo",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "creditmemo"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeAccountingCreditmemo"
          }
       },
       "/accounting/{connection_id}/taxrate": {
          "post": {
             "summary": "Create a taxrate",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "taxrate"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AccountingTaxrate"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingTaxrate"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createAccountingTaxrate"
          },
          "get": {
             "summary": "List all taxrates",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "org_id",
                   "in": "query",
                   "required": false,
                   "description": "The org ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "taxrate"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingTaxrates"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listAccountingTaxrates"
          }
       },
       "/accounting/{connection_id}/taxrate/{id}": {
          "get": {
             "summary": "Retrieve a taxrate",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Taxrate",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "taxrate"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingTaxrate"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getAccountingTaxrate"
          },
          "put": {
             "summary": "Update a taxrate",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Taxrate",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "taxrate"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AccountingTaxrate"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingTaxrate"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateAccountingTaxrate"
          },
          "patch": {
             "summary": "Update a taxrate",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Taxrate",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "taxrate"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AccountingTaxrate"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingTaxrate"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchAccountingTaxrate"
          },
          "delete": {
             "summary": "Remove a taxrate",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Taxrate",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "taxrate"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeAccountingTaxrate"
          }
       },
       "/accounting/{connection_id}/organization/{id}": {
          "get": {
             "summary": "Retrieve an organization",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Organization",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "organization"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingOrganization"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getAccountingOrganization"
          }
       },
       "/accounting/{connection_id}/organization": {
          "get": {
             "summary": "List all organizations",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "organization"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingOrganizations"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listAccountingOrganizations"
          }
       },
       "/accounting/{connection_id}/order": {
          "post": {
             "summary": "Create an order",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "order"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AccountingOrder"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingOrder"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createAccountingOrder"
          },
          "get": {
             "summary": "List all orders",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "org_id",
                   "in": "query",
                   "required": false,
                   "description": "The org ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "type",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "order"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingOrders"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listAccountingOrders"
          }
       },
       "/accounting/{connection_id}/order/{id}": {
          "get": {
             "summary": "Retrieve an order",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Order",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "order"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingOrder"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getAccountingOrder"
          },
          "put": {
             "summary": "Update an order",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Order",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "order"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AccountingOrder"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingOrder"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateAccountingOrder"
          },
          "patch": {
             "summary": "Update an order",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Order",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "order"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AccountingOrder"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingOrder"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchAccountingOrder"
          },
          "delete": {
             "summary": "Remove an order",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Order",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "order"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeAccountingOrder"
          }
       },
       "/accounting/{connection_id}/purchaseorder": {
          "post": {
             "summary": "Create a purchaseorder",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "purchaseorder"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AccountingPurchaseorder"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingPurchaseorder"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createAccountingPurchaseorder"
          },
          "get": {
             "summary": "List all purchaseorders",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "org_id",
                   "in": "query",
                   "required": false,
                   "description": "The org ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "purchaseorder"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingPurchaseorders"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listAccountingPurchaseorders"
          }
       },
       "/accounting/{connection_id}/purchaseorder/{id}": {
          "get": {
             "summary": "Retrieve a purchaseorder",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Purchaseorder",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "purchaseorder"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingPurchaseorder"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getAccountingPurchaseorder"
          },
          "put": {
             "summary": "Update a purchaseorder",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Purchaseorder",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "purchaseorder"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AccountingPurchaseorder"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingPurchaseorder"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateAccountingPurchaseorder"
          },
          "patch": {
             "summary": "Update a purchaseorder",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Purchaseorder",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "purchaseorder"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AccountingPurchaseorder"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingPurchaseorder"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchAccountingPurchaseorder"
          },
          "delete": {
             "summary": "Remove a purchaseorder",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Purchaseorder",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "purchaseorder"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeAccountingPurchaseorder"
          }
       },
       "/accounting/{connection_id}/salesorder": {
          "post": {
             "summary": "Create a salesorder",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "salesorder"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AccountingSalesorder"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingSalesorder"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createAccountingSalesorder"
          },
          "get": {
             "summary": "List all salesorders",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "org_id",
                   "in": "query",
                   "required": false,
                   "description": "The org ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "salesorder"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingSalesorders"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listAccountingSalesorders"
          }
       },
       "/accounting/{connection_id}/salesorder/{id}": {
          "get": {
             "summary": "Retrieve a salesorder",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Salesorder",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "salesorder"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingSalesorder"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getAccountingSalesorder"
          },
          "put": {
             "summary": "Update a salesorder",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Salesorder",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "salesorder"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AccountingSalesorder"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingSalesorder"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateAccountingSalesorder"
          },
          "patch": {
             "summary": "Update a salesorder",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Salesorder",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "salesorder"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AccountingSalesorder"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingSalesorder"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchAccountingSalesorder"
          },
          "delete": {
             "summary": "Remove a salesorder",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Salesorder",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "salesorder"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeAccountingSalesorder"
          }
       },
       "/accounting/{connection_id}/report/{id}": {
          "get": {
             "summary": "Retrieve a report",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Report",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "report"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingReport"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getAccountingReport"
          }
       },
       "/accounting/{connection_id}/report": {
          "get": {
             "summary": "List all reports",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "type",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "start_gte",
                   "in": "query",
                   "required": false,
                   "description": "The start date to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "end_le",
                   "in": "query",
                   "required": false,
                   "description": "The end date to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "report"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingReports"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listAccountingReports"
          }
       },
       "/accounting/{connection_id}/balancesheet/{id}": {
          "get": {
             "summary": "Retrieve a balancesheet",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Balancesheet",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "balancesheet"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingBalancesheet"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getAccountingBalancesheet"
          }
       },
       "/accounting/{connection_id}/balancesheet": {
          "get": {
             "summary": "List all balancesheets",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "start_gte",
                   "in": "query",
                   "required": false,
                   "description": "The start date to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "end_le",
                   "in": "query",
                   "required": false,
                   "description": "The end date to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "category_id",
                   "in": "query",
                   "required": false,
                   "description": "The category ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "contact_id",
                   "in": "query",
                   "required": false,
                   "description": "The contact ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "balancesheet"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingBalancesheets"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listAccountingBalancesheets"
          }
       },
       "/accounting/{connection_id}/trialbalance/{id}": {
          "get": {
             "summary": "Retrieve a trialbalance",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Trialbalance",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "trialbalance"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingTrialbalance"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getAccountingTrialbalance"
          }
       },
       "/accounting/{connection_id}/trialbalance": {
          "get": {
             "summary": "List all trialbalances",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "start_gte",
                   "in": "query",
                   "required": false,
                   "description": "The start date to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "end_le",
                   "in": "query",
                   "required": false,
                   "description": "The end date to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "trialbalance"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingTrialbalances"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listAccountingTrialbalances"
          }
       },
       "/accounting/{connection_id}/profitloss/{id}": {
          "get": {
             "summary": "Retrieve a profitloss",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Profitloss",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "profitloss"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingProfitloss"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getAccountingProfitloss"
          }
       },
       "/accounting/{connection_id}/profitloss": {
          "get": {
             "summary": "List all profitlosses",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "start_gte",
                   "in": "query",
                   "required": false,
                   "description": "The start date to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "end_le",
                   "in": "query",
                   "required": false,
                   "description": "The end date to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "category_id",
                   "in": "query",
                   "required": false,
                   "description": "The category ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "contact_id",
                   "in": "query",
                   "required": false,
                   "description": "The contact ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "profitloss"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingProfitlosses"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listAccountingProfitlosses"
          }
       },
       "/accounting/{connection_id}/category": {
          "post": {
             "summary": "Create a category",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "category"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AccountingCategory"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingCategory"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createAccountingCategory"
          },
          "get": {
             "summary": "List all categories",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "parent_id",
                   "in": "query",
                   "required": false,
                   "description": "The parent ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "category"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingCategories"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listAccountingCategories"
          }
       },
       "/accounting/{connection_id}/category/{id}": {
          "get": {
             "summary": "Retrieve a category",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Category",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "category"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingCategory"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getAccountingCategory"
          },
          "put": {
             "summary": "Update a category",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Category",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "category"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AccountingCategory"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingCategory"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateAccountingCategory"
          },
          "patch": {
             "summary": "Update a category",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Category",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "category"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/AccountingCategory"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/AccountingCategory"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchAccountingCategory"
          },
          "delete": {
             "summary": "Remove a category",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Category",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "accounting",
                "category"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeAccountingCategory"
          }
       },
       "/storage/{connection_id}/file": {
          "post": {
             "summary": "Create a file",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "storage",
                "file"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/StorageFile"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/StorageFile"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createStorageFile"
          },
          "get": {
             "summary": "List all files",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "parent_id",
                   "in": "query",
                   "required": false,
                   "description": "The parent ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "type",
                   "in": "query",
                   "required": false,
                   "description": "The type to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "storage",
                "file"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/StorageFiles"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listStorageFiles"
          }
       },
       "/storage/{connection_id}/file/{id}": {
          "get": {
             "summary": "Retrieve a file",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the File",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "storage",
                "file"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/StorageFile"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getStorageFile"
          },
          "put": {
             "summary": "Update a file",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the File",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "storage",
                "file"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/StorageFile"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/StorageFile"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateStorageFile"
          },
          "patch": {
             "summary": "Update a file",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the File",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "storage",
                "file"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/StorageFile"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/StorageFile"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchStorageFile"
          },
          "delete": {
             "summary": "Remove a file",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the File",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "storage",
                "file"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeStorageFile"
          }
       },
       "/commerce/{connection_id}/item": {
          "post": {
             "summary": "Create an item",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "commerce",
                "item"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CommerceItem"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CommerceItem"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createCommerceItem"
          },
          "get": {
             "summary": "List all items",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "collection_id",
                   "in": "query",
                   "required": false,
                   "description": "The collection ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "commerce",
                "item"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CommerceItems"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listCommerceItems"
          }
       },
       "/commerce/{connection_id}/item/{id}": {
          "get": {
             "summary": "Retrieve an item",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Item",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "commerce",
                "item"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CommerceItem"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getCommerceItem"
          },
          "put": {
             "summary": "Update an item",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Item",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "commerce",
                "item"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CommerceItem"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CommerceItem"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateCommerceItem"
          },
          "patch": {
             "summary": "Update an item",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Item",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "commerce",
                "item"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CommerceItem"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CommerceItem"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchCommerceItem"
          },
          "delete": {
             "summary": "Remove an item",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Item",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "commerce",
                "item"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeCommerceItem"
          }
       },
       "/commerce/{connection_id}/collection": {
          "post": {
             "summary": "Create a collection",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "commerce",
                "collection"
             ],
             "requestBody": {
                "description": "A collection of items/products/services",
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CommerceCollection"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CommerceCollection"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createCommerceCollection"
          },
          "get": {
             "summary": "List all collections",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "type",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "parent_id",
                   "in": "query",
                   "required": false,
                   "description": "The parent ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "commerce",
                "collection"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CommerceCollections"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listCommerceCollections"
          }
       },
       "/commerce/{connection_id}/collection/{id}": {
          "get": {
             "summary": "Retrieve a collection",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Collection",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "commerce",
                "collection"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CommerceCollection"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getCommerceCollection"
          },
          "put": {
             "summary": "Update a collection",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Collection",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "commerce",
                "collection"
             ],
             "requestBody": {
                "description": "A collection of items/products/services",
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CommerceCollection"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CommerceCollection"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateCommerceCollection"
          },
          "patch": {
             "summary": "Update a collection",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Collection",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "commerce",
                "collection"
             ],
             "requestBody": {
                "description": "A collection of items/products/services",
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CommerceCollection"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CommerceCollection"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchCommerceCollection"
          },
          "delete": {
             "summary": "Remove a collection",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Collection",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "commerce",
                "collection"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeCommerceCollection"
          }
       },
       "/commerce/{connection_id}/inventory": {
          "post": {
             "summary": "Create an inventory",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "commerce",
                "inventory"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CommerceInventory"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CommerceInventory"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createCommerceInventory"
          },
          "get": {
             "summary": "List all inventories",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "item_variant_id",
                   "in": "query",
                   "required": false,
                   "description": "The item variant ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "location_id",
                   "in": "query",
                   "required": false,
                   "description": "The location ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "commerce",
                "inventory"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CommerceInventories"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listCommerceInventories"
          }
       },
       "/commerce/{connection_id}/inventory/{id}": {
          "get": {
             "summary": "Retrieve an inventory",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Inventory",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "commerce",
                "inventory"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CommerceInventory"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getCommerceInventory"
          },
          "put": {
             "summary": "Update an inventory",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Inventory",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "commerce",
                "inventory"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CommerceInventory"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CommerceInventory"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateCommerceInventory"
          },
          "patch": {
             "summary": "Update an inventory",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Inventory",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "commerce",
                "inventory"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CommerceInventory"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CommerceInventory"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchCommerceInventory"
          },
          "delete": {
             "summary": "Remove an inventory",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Inventory",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "commerce",
                "inventory"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeCommerceInventory"
          }
       },
       "/commerce/{connection_id}/location": {
          "post": {
             "summary": "Create a location",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "commerce",
                "location"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CommerceLocation"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CommerceLocation"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createCommerceLocation"
          },
          "get": {
             "summary": "List all locations",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "commerce",
                "location"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CommerceLocations"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listCommerceLocations"
          }
       },
       "/commerce/{connection_id}/location/{id}": {
          "get": {
             "summary": "Retrieve a location",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Location",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "commerce",
                "location"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CommerceLocation"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getCommerceLocation"
          },
          "put": {
             "summary": "Update a location",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Location",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "commerce",
                "location"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CommerceLocation"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CommerceLocation"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateCommerceLocation"
          },
          "patch": {
             "summary": "Update a location",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Location",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "commerce",
                "location"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CommerceLocation"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CommerceLocation"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchCommerceLocation"
          },
          "delete": {
             "summary": "Remove a location",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Location",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "commerce",
                "location"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeCommerceLocation"
          }
       },
       "/commerce/{connection_id}/review": {
          "post": {
             "summary": "Create a review",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "commerce",
                "review"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CommerceReview"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CommerceReview"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createCommerceReview"
          },
          "get": {
             "summary": "List all reviews",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "item_id",
                   "in": "query",
                   "required": false,
                   "description": "The item ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "contact_id",
                   "in": "query",
                   "required": false,
                   "description": "The contact ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "commerce",
                "review"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CommerceReviews"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listCommerceReviews"
          }
       },
       "/commerce/{connection_id}/review/{id}": {
          "get": {
             "summary": "Retrieve a review",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Review",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "commerce",
                "review"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CommerceReview"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getCommerceReview"
          },
          "put": {
             "summary": "Update a review",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Review",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "commerce",
                "review"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CommerceReview"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CommerceReview"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateCommerceReview"
          },
          "patch": {
             "summary": "Update a review",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Review",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "commerce",
                "review"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CommerceReview"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CommerceReview"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchCommerceReview"
          },
          "delete": {
             "summary": "Remove a review",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Review",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "commerce",
                "review"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeCommerceReview"
          }
       },
       "/payment/{connection_id}/payment": {
          "post": {
             "summary": "Create a payment",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "payment",
                "payment"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/PaymentPayment"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/PaymentPayment"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createPaymentPayment"
          },
          "get": {
             "summary": "List all payments",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "invoice_id",
                   "in": "query",
                   "required": false,
                   "description": "The invoice ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "contact_id",
                   "in": "query",
                   "required": false,
                   "description": "The contact ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "payment",
                "payment"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/PaymentPayments"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listPaymentPayments"
          }
       },
       "/payment/{connection_id}/payment/{id}": {
          "get": {
             "summary": "Retrieve a payment",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Payment",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "payment",
                "payment"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/PaymentPayment"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getPaymentPayment"
          },
          "put": {
             "summary": "Update a payment",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Payment",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "payment",
                "payment"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/PaymentPayment"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/PaymentPayment"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updatePaymentPayment"
          },
          "patch": {
             "summary": "Update a payment",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Payment",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "payment",
                "payment"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/PaymentPayment"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/PaymentPayment"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchPaymentPayment"
          },
          "delete": {
             "summary": "Remove a payment",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Payment",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "payment",
                "payment"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removePaymentPayment"
          }
       },
       "/payment/{connection_id}/link": {
          "post": {
             "summary": "Create a link",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "payment",
                "link"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/PaymentLink"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/PaymentLink"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createPaymentLink"
          },
          "get": {
             "summary": "List all links",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "contact_id",
                   "in": "query",
                   "required": false,
                   "description": "The contact ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "payment_id",
                   "in": "query",
                   "required": false,
                   "description": "The payment ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "payment",
                "link"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/PaymentLinks"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listPaymentLinks"
          }
       },
       "/payment/{connection_id}/link/{id}": {
          "get": {
             "summary": "Retrieve a link",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Link",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "payment",
                "link"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/PaymentLink"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getPaymentLink"
          },
          "put": {
             "summary": "Update a link",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Link",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "payment",
                "link"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/PaymentLink"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/PaymentLink"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updatePaymentLink"
          },
          "patch": {
             "summary": "Update a link",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Link",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "payment",
                "link"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/PaymentLink"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/PaymentLink"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchPaymentLink"
          },
          "delete": {
             "summary": "Remove a link",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Link",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "payment",
                "link"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removePaymentLink"
          }
       },
       "/payment/{connection_id}/refund/{id}": {
          "get": {
             "summary": "Retrieve a refund",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Refund",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "payment",
                "refund"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/PaymentRefund"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getPaymentRefund"
          }
       },
       "/payment/{connection_id}/refund": {
          "get": {
             "summary": "List all refunds",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "payment_id",
                   "in": "query",
                   "required": false,
                   "description": "The payment ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "payment",
                "refund"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/PaymentRefunds"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listPaymentRefunds"
          }
       },
       "/payment/{connection_id}/payout/{id}": {
          "get": {
             "summary": "Retrieve a payout",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Payout",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "payment",
                "payout"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/PaymentPayout"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getPaymentPayout"
          }
       },
       "/payment/{connection_id}/payout": {
          "get": {
             "summary": "List all payouts",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "payment",
                "payout"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/PaymentPayouts"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listPaymentPayouts"
          }
       },
       "/payment/{connection_id}/subscription": {
          "post": {
             "summary": "Create a subscription",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "payment",
                "subscription"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/PaymentSubscription"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/PaymentSubscription"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createPaymentSubscription"
          },
          "get": {
             "summary": "List all subscriptions",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "contact_id",
                   "in": "query",
                   "required": false,
                   "description": "The contact ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "payment",
                "subscription"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/PaymentSubscriptions"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listPaymentSubscriptions"
          }
       },
       "/payment/{connection_id}/subscription/{id}": {
          "get": {
             "summary": "Retrieve a subscription",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Subscription",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "payment",
                "subscription"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/PaymentSubscription"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getPaymentSubscription"
          },
          "put": {
             "summary": "Update a subscription",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Subscription",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "payment",
                "subscription"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/PaymentSubscription"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/PaymentSubscription"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updatePaymentSubscription"
          },
          "patch": {
             "summary": "Update a subscription",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Subscription",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "payment",
                "subscription"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/PaymentSubscription"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/PaymentSubscription"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchPaymentSubscription"
          },
          "delete": {
             "summary": "Remove a subscription",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Subscription",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "payment",
                "subscription"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removePaymentSubscription"
          }
       },
       "/genai/{connection_id}/model/{id}": {
          "get": {
             "summary": "Retrieve a model",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Model",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "genai",
                "model"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/GenaiModel"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getGenaiModel"
          }
       },
       "/genai/{connection_id}/model": {
          "get": {
             "summary": "List all models",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "genai",
                "model"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/GenaiModels"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listGenaiModels"
          }
       },
       "/genai/{connection_id}/prompt": {
          "post": {
             "summary": "Create a prompt",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "genai",
                "prompt"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/GenaiPrompt"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/GenaiPrompt"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createGenaiPrompt"
          }
       },
       "/genai/{connection_id}/embedding": {
          "post": {
             "summary": "Create an embedding",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "genai",
                "embedding"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/GenaiEmbedding"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/GenaiEmbedding"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createGenaiEmbedding"
          }
       },
       "/kms/{connection_id}/space": {
          "post": {
             "summary": "Create a space",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "kms",
                "space"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/KmsSpace"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/KmsSpace"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createKmsSpace"
          },
          "get": {
             "summary": "List all spaces",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "parent_id",
                   "in": "query",
                   "required": false,
                   "description": "The parent ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "kms",
                "space"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/KmsSpaces"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listKmsSpaces"
          }
       },
       "/kms/{connection_id}/space/{id}": {
          "get": {
             "summary": "Retrieve a space",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Space",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "kms",
                "space"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/KmsSpace"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getKmsSpace"
          },
          "put": {
             "summary": "Update a space",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Space",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "kms",
                "space"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/KmsSpace"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/KmsSpace"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateKmsSpace"
          },
          "patch": {
             "summary": "Update a space",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Space",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "kms",
                "space"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/KmsSpace"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/KmsSpace"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchKmsSpace"
          },
          "delete": {
             "summary": "Remove a space",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Space",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "kms",
                "space"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeKmsSpace"
          }
       },
       "/kms/{connection_id}/page": {
          "post": {
             "summary": "Create a page",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "kms",
                "page"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/KmsPage"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/KmsPage"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createKmsPage"
          },
          "get": {
             "summary": "List all pages",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "space_id",
                   "in": "query",
                   "required": false,
                   "description": "The space ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "parent_id",
                   "in": "query",
                   "required": false,
                   "description": "The parent ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "kms",
                "page"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/KmsPages"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listKmsPages"
          }
       },
       "/kms/{connection_id}/page/{id}": {
          "get": {
             "summary": "Retrieve a page",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Page",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "kms",
                "page"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/KmsPage"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getKmsPage"
          },
          "put": {
             "summary": "Update a page",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Page",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "kms",
                "page"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/KmsPage"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/KmsPage"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateKmsPage"
          },
          "patch": {
             "summary": "Update a page",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Page",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "kms",
                "page"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/KmsPage"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/KmsPage"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchKmsPage"
          },
          "delete": {
             "summary": "Remove a page",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Page",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "kms",
                "page"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeKmsPage"
          }
       },
       "/kms/{connection_id}/comment": {
          "post": {
             "summary": "Create a comment",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "kms",
                "comment"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/KmsComment"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/KmsComment"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createKmsComment"
          },
          "get": {
             "summary": "List all comments",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "page_id",
                   "in": "query",
                   "required": false,
                   "description": "The page ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "type",
                   "in": "query",
                   "required": false,
                   "description": "The type to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "parent_id",
                   "in": "query",
                   "required": false,
                   "description": "The parent ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "kms",
                "comment"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/KmsComments"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listKmsComments"
          }
       },
       "/kms/{connection_id}/comment/{id}": {
          "get": {
             "summary": "Retrieve a comment",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Comment",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "kms",
                "comment"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/KmsComment"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getKmsComment"
          },
          "put": {
             "summary": "Update a comment",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Comment",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "kms",
                "comment"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/KmsComment"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/KmsComment"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateKmsComment"
          },
          "patch": {
             "summary": "Update a comment",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Comment",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "kms",
                "comment"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/KmsComment"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/KmsComment"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchKmsComment"
          },
          "delete": {
             "summary": "Remove a comment",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Comment",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "kms",
                "comment"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeKmsComment"
          }
       },
       "/task/{connection_id}/project": {
          "post": {
             "summary": "Create a project",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "task",
                "project"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/TaskProject"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TaskProject"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createTaskProject"
          },
          "get": {
             "summary": "List all projects",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "parent_id",
                   "in": "query",
                   "required": false,
                   "description": "The parent ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "org_id",
                   "in": "query",
                   "required": false,
                   "description": "The org ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "task",
                "project"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TaskProjects"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listTaskProjects"
          }
       },
       "/task/{connection_id}/project/{id}": {
          "get": {
             "summary": "Retrieve a project",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Project",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "task",
                "project"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TaskProject"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getTaskProject"
          },
          "put": {
             "summary": "Update a project",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Project",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "task",
                "project"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/TaskProject"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TaskProject"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateTaskProject"
          },
          "patch": {
             "summary": "Update a project",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Project",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "task",
                "project"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/TaskProject"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TaskProject"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchTaskProject"
          },
          "delete": {
             "summary": "Remove a project",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Project",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "task",
                "project"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeTaskProject"
          }
       },
       "/task/{connection_id}/task": {
          "post": {
             "summary": "Create a task",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "task",
                "task"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/TaskTask"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TaskTask"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createTaskTask"
          },
          "get": {
             "summary": "List all tasks",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "project_id",
                   "in": "query",
                   "required": false,
                   "description": "The project ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "parent_id",
                   "in": "query",
                   "required": false,
                   "description": "The parent ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "user_id",
                   "in": "query",
                   "required": false,
                   "description": "The user/employee ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "status",
                   "in": "query",
                   "required": false,
                   "description": "The status to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "task",
                "task"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TaskTasks"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listTaskTasks"
          }
       },
       "/task/{connection_id}/task/{id}": {
          "get": {
             "summary": "Retrieve a task",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Task",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "task",
                "task"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TaskTask"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getTaskTask"
          },
          "put": {
             "summary": "Update a task",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Task",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "task",
                "task"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/TaskTask"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TaskTask"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateTaskTask"
          },
          "patch": {
             "summary": "Update a task",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Task",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "task",
                "task"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/TaskTask"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TaskTask"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchTaskTask"
          },
          "delete": {
             "summary": "Remove a task",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Task",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "task",
                "task"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeTaskTask"
          }
       },
       "/task/{connection_id}/comment": {
          "post": {
             "summary": "Create a comment",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "task",
                "comment"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/TaskComment"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TaskComment"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createTaskComment"
          },
          "get": {
             "summary": "List all comments",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "task_id",
                   "in": "query",
                   "required": false,
                   "description": "The task ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "task",
                "comment"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TaskComments"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listTaskComments"
          }
       },
       "/task/{connection_id}/comment/{id}": {
          "get": {
             "summary": "Retrieve a comment",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Comment",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "task",
                "comment"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TaskComment"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getTaskComment"
          },
          "put": {
             "summary": "Update a comment",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Comment",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "task",
                "comment"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/TaskComment"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TaskComment"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateTaskComment"
          },
          "patch": {
             "summary": "Update a comment",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Comment",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "task",
                "comment"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/TaskComment"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TaskComment"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchTaskComment"
          },
          "delete": {
             "summary": "Remove a comment",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Comment",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "task",
                "comment"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeTaskComment"
          }
       },
       "/task/{connection_id}/change/{id}": {
          "get": {
             "summary": "Retrieve a change",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Change",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "task",
                "change"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TaskChange"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getTaskChange"
          }
       },
       "/task/{connection_id}/change": {
          "get": {
             "summary": "List all changes",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "task_id",
                   "in": "query",
                   "required": false,
                   "description": "The task ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "task",
                "change"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/TaskChanges"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listTaskChanges"
          }
       },
       "/scim/{connection_id}/users": {
          "post": {
             "summary": "Create user",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "filter",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sortBy",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sortOrder",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "startIndex",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "count",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "scim",
                "user"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/ScimUser"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/ScimUser"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createScimUsers"
          },
          "get": {
             "summary": "List users",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "filter",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sortBy",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sortOrder",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "startIndex",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "count",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "scim",
                "user"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/ScimUsers"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listScimUsers"
          }
       },
       "/scim/{connection_id}/users/{id}": {
          "get": {
             "summary": "Get user",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the User",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "scim",
                "user"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/ScimUser"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getScimUsers"
          },
          "put": {
             "summary": "Update user",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the User",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "scim",
                "user"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/ScimUser"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/ScimUser"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateScimUsers"
          },
          "patch": {
             "summary": "Update user",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the User",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "scim",
                "user"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/ScimUser"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/ScimUser"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchScimUsers"
          },
          "delete": {
             "summary": "Delete user",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the User",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "scim",
                "user"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeScimUsers"
          }
       },
       "/scim/{connection_id}/groups": {
          "post": {
             "summary": "Create group",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "scim",
                "group"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/ScimGroup"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/ScimGroup"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createScimGroups"
          },
          "get": {
             "summary": "List groups",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "filter",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sortBy",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sortOrder",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "startIndex",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "count",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "scim",
                "group"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/ScimGroups"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listScimGroups"
          }
       },
       "/scim/{connection_id}/groups/{id}": {
          "get": {
             "summary": "Get group",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Group",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "scim",
                "group"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/ScimGroup"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getScimGroups"
          },
          "put": {
             "summary": "Update group",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Group",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "scim",
                "group"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/ScimGroup"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/ScimGroup"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateScimGroups"
          },
          "patch": {
             "summary": "Update group",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Group",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "scim",
                "group"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/ScimGroup"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/ScimGroup"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchScimGroups"
          },
          "delete": {
             "summary": "Delete group",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Group",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "scim",
                "group"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeScimGroups"
          }
       },
       "/calendar/{connection_id}/calendar": {
          "post": {
             "summary": "Create a calendar",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "calendar",
                "calendar"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CalendarCalendar"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CalendarCalendar"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createCalendarCalendar"
          },
          "get": {
             "summary": "List all calendars",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "calendar",
                "calendar"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CalendarCalendars"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listCalendarCalendars"
          }
       },
       "/calendar/{connection_id}/calendar/{id}": {
          "get": {
             "summary": "Retrieve a calendar",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Calendar",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "calendar",
                "calendar"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CalendarCalendar"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getCalendarCalendar"
          },
          "put": {
             "summary": "Update a calendar",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Calendar",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "calendar",
                "calendar"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CalendarCalendar"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CalendarCalendar"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateCalendarCalendar"
          },
          "patch": {
             "summary": "Update a calendar",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Calendar",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "calendar",
                "calendar"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CalendarCalendar"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CalendarCalendar"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchCalendarCalendar"
          },
          "delete": {
             "summary": "Remove a calendar",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Calendar",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "calendar",
                "calendar"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeCalendarCalendar"
          }
       },
       "/calendar/{connection_id}/event": {
          "post": {
             "summary": "Create an event",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "calendar",
                "event"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CalendarEvent"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CalendarEvent"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createCalendarEvent"
          },
          "get": {
             "summary": "List all events",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "calendar_id",
                   "in": "query",
                   "required": false,
                   "description": "The calendar ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "start_gte",
                   "in": "query",
                   "required": false,
                   "description": "The start date to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "end_le",
                   "in": "query",
                   "required": false,
                   "description": "The end date to filter by"
                },
                {
                   "schema": {
                      "type": "boolean"
                   },
                   "name": "expand_recurring_events",
                   "in": "query",
                   "required": false,
                   "description": "Whether to expand recurring calendar events"
                },
                {
                   "schema": {
                      "type": "boolean"
                   },
                   "name": "expand",
                   "in": "query",
                   "required": false,
                   "description": "Whether to flatten grouped or recurring items into individual entries."
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "calendar",
                "event"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CalendarEvents"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listCalendarEvents"
          }
       },
       "/calendar/{connection_id}/event/{id}": {
          "get": {
             "summary": "Retrieve an event",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Event",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "calendar",
                "event"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CalendarEvent"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getCalendarEvent"
          },
          "put": {
             "summary": "Update an event",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Event",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "calendar",
                "event"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CalendarEvent"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CalendarEvent"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateCalendarEvent"
          },
          "patch": {
             "summary": "Update an event",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Event",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "calendar",
                "event"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CalendarEvent"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CalendarEvent"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchCalendarEvent"
          },
          "delete": {
             "summary": "Remove an event",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Event",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "calendar",
                "event"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeCalendarEvent"
          }
       },
       "/calendar/{connection_id}/busy": {
          "get": {
             "summary": "List all busies",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "calendar_id",
                   "in": "query",
                   "required": false,
                   "description": "The calendar ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "start_gte",
                   "in": "query",
                   "required": false,
                   "description": "The start date to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "end_le",
                   "in": "query",
                   "required": false,
                   "description": "The end date to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "user_id",
                   "in": "query",
                   "required": false,
                   "description": "The user/employee ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "calendar",
                "busy"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CalendarBusies"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listCalendarBusies"
          }
       },
       "/calendar/{connection_id}/link": {
          "post": {
             "summary": "Create a link",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "calendar",
                "link"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CalendarLink"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CalendarLink"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createCalendarLink"
          },
          "get": {
             "summary": "List all links",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "calendar",
                "link"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CalendarLinks"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listCalendarLinks"
          }
       },
       "/calendar/{connection_id}/link/{id}": {
          "get": {
             "summary": "Retrieve a link",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Link",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "calendar",
                "link"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CalendarLink"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getCalendarLink"
          },
          "put": {
             "summary": "Update a link",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Link",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "calendar",
                "link"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CalendarLink"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CalendarLink"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateCalendarLink"
          },
          "patch": {
             "summary": "Update a link",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Link",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "calendar",
                "link"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/CalendarLink"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CalendarLink"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchCalendarLink"
          },
          "delete": {
             "summary": "Remove a link",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Link",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "calendar",
                "link"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeCalendarLink"
          }
       },
       "/calendar/{connection_id}/recording/{id}": {
          "get": {
             "summary": "Retrieve a recording",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Recording",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "calendar",
                "recording"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CalendarRecording"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getCalendarRecording"
          }
       },
       "/calendar/{connection_id}/recording": {
          "get": {
             "summary": "List all recordings",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "event_id",
                   "in": "query",
                   "required": false,
                   "description": "The event ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "start_gte",
                   "in": "query",
                   "required": false,
                   "description": "The start date to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "end_le",
                   "in": "query",
                   "required": false,
                   "description": "The end date to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "calendar",
                "recording"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/CalendarRecordings"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listCalendarRecordings"
          }
       },
       "/lms/{connection_id}/course": {
          "post": {
             "summary": "Create a course",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "lms",
                "course"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/LmsCourse"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/LmsCourse"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createLmsCourse"
          },
          "get": {
             "summary": "List all courses",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "company_id",
                   "in": "query",
                   "required": false,
                   "description": "The company ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "class_id",
                   "in": "query",
                   "required": false,
                   "description": "The class ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "course_id",
                   "in": "query",
                   "required": false,
                   "description": "The course ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "lms",
                "course"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/LmsCourses"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listLmsCourses"
          }
       },
       "/lms/{connection_id}/course/{id}": {
          "get": {
             "summary": "Retrieve a course",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Course",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "lms",
                "course"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/LmsCourse"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getLmsCourse"
          },
          "put": {
             "summary": "Update a course",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Course",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "lms",
                "course"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/LmsCourse"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/LmsCourse"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateLmsCourse"
          },
          "patch": {
             "summary": "Update a course",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Course",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "lms",
                "course"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/LmsCourse"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/LmsCourse"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchLmsCourse"
          },
          "delete": {
             "summary": "Remove a course",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Course",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "lms",
                "course"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeLmsCourse"
          }
       },
       "/lms/{connection_id}/class": {
          "post": {
             "summary": "Create a class",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "lms",
                "class"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/LmsClass"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/LmsClass"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createLmsClass"
          },
          "get": {
             "summary": "List all classes",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "location_id",
                   "in": "query",
                   "required": false,
                   "description": "The location ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "course_id",
                   "in": "query",
                   "required": false,
                   "description": "The course ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "lms",
                "class"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/LmsClasses"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listLmsClasses"
          }
       },
       "/lms/{connection_id}/class/{id}": {
          "get": {
             "summary": "Retrieve a class",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Class",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "lms",
                "class"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/LmsClass"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getLmsClass"
          },
          "put": {
             "summary": "Update a class",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Class",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "lms",
                "class"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/LmsClass"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/LmsClass"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateLmsClass"
          },
          "patch": {
             "summary": "Update a class",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Class",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "lms",
                "class"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/LmsClass"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/LmsClass"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchLmsClass"
          },
          "delete": {
             "summary": "Remove a class",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Class",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "lms",
                "class"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeLmsClass"
          }
       },
       "/lms/{connection_id}/student": {
          "post": {
             "summary": "Create a student",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "lms",
                "student"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/LmsStudent"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/LmsStudent"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createLmsStudent"
          },
          "get": {
             "summary": "List all students",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "class_id",
                   "in": "query",
                   "required": false,
                   "description": "The class ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "course_id",
                   "in": "query",
                   "required": false,
                   "description": "The course ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "location_id",
                   "in": "query",
                   "required": false,
                   "description": "The location ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "lms",
                "student"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/LmsStudents"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listLmsStudents"
          }
       },
       "/lms/{connection_id}/student/{id}": {
          "get": {
             "summary": "Retrieve a student",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Student",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "lms",
                "student"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/LmsStudent"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getLmsStudent"
          },
          "put": {
             "summary": "Update a student",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Student",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "lms",
                "student"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/LmsStudent"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/LmsStudent"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateLmsStudent"
          },
          "patch": {
             "summary": "Update a student",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Student",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "lms",
                "student"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/LmsStudent"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/LmsStudent"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchLmsStudent"
          },
          "delete": {
             "summary": "Remove a student",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Student",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "lms",
                "student"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeLmsStudent"
          }
       },
       "/lms/{connection_id}/instructor": {
          "post": {
             "summary": "Create an instructor",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "lms",
                "instructor"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/LmsInstructor"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/LmsInstructor"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createLmsInstructor"
          },
          "get": {
             "summary": "List all instructors",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "class_id",
                   "in": "query",
                   "required": false,
                   "description": "The class ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "course_id",
                   "in": "query",
                   "required": false,
                   "description": "The course ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "location_id",
                   "in": "query",
                   "required": false,
                   "description": "The location ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "company_id",
                   "in": "query",
                   "required": false,
                   "description": "The company ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "lms",
                "instructor"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/LmsInstructors"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listLmsInstructors"
          }
       },
       "/lms/{connection_id}/instructor/{id}": {
          "get": {
             "summary": "Retrieve an instructor",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Instructor",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "lms",
                "instructor"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/LmsInstructor"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getLmsInstructor"
          },
          "put": {
             "summary": "Update an instructor",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Instructor",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "lms",
                "instructor"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/LmsInstructor"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/LmsInstructor"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateLmsInstructor"
          },
          "patch": {
             "summary": "Update an instructor",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Instructor",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "lms",
                "instructor"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/LmsInstructor"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/LmsInstructor"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchLmsInstructor"
          },
          "delete": {
             "summary": "Remove an instructor",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Instructor",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "lms",
                "instructor"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeLmsInstructor"
          }
       },
       "/repo/{connection_id}/organization": {
          "post": {
             "summary": "Create an organization",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "repo",
                "organization"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/RepoOrganization"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/RepoOrganization"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createRepoOrganization"
          },
          "get": {
             "summary": "List all organizations",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "repo",
                "organization"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/RepoOrganizations"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listRepoOrganizations"
          }
       },
       "/repo/{connection_id}/organization/{id}": {
          "get": {
             "summary": "Retrieve an organization",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Organization",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "repo",
                "organization"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/RepoOrganization"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getRepoOrganization"
          },
          "put": {
             "summary": "Update an organization",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Organization",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "repo",
                "organization"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/RepoOrganization"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/RepoOrganization"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateRepoOrganization"
          },
          "patch": {
             "summary": "Update an organization",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Organization",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "repo",
                "organization"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/RepoOrganization"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/RepoOrganization"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchRepoOrganization"
          },
          "delete": {
             "summary": "Remove an organization",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Organization",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "repo",
                "organization"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeRepoOrganization"
          }
       },
       "/repo/{connection_id}/repository": {
          "post": {
             "summary": "Create a repository",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "repo",
                "repository"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/RepoRepository"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/RepoRepository"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createRepoRepository"
          },
          "get": {
             "summary": "List all repositories",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "org_id",
                   "in": "query",
                   "required": false,
                   "description": "The org ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "repo",
                "repository"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/RepoRepositories"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listRepoRepositories"
          }
       },
       "/repo/{connection_id}/repository/{id}": {
          "get": {
             "summary": "Retrieve a repository",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Repository",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "repo",
                "repository"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/RepoRepository"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getRepoRepository"
          },
          "put": {
             "summary": "Update a repository",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Repository",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "repo",
                "repository"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/RepoRepository"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/RepoRepository"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateRepoRepository"
          },
          "patch": {
             "summary": "Update a repository",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Repository",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "repo",
                "repository"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/RepoRepository"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/RepoRepository"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchRepoRepository"
          },
          "delete": {
             "summary": "Remove a repository",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Repository",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "repo",
                "repository"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeRepoRepository"
          }
       },
       "/repo/{connection_id}/branch": {
          "post": {
             "summary": "Create a branch",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "repo",
                "branch"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/RepoBranch"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/RepoBranch"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createRepoBranch"
          },
          "get": {
             "summary": "List all branches",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "repo_id",
                   "in": "query",
                   "required": false,
                   "description": "The repo ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "repo",
                "branch"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/RepoBranches"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listRepoBranches"
          }
       },
       "/repo/{connection_id}/branch/{id}": {
          "get": {
             "summary": "Retrieve a branch",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Branch",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "repo",
                "branch"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/RepoBranch"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getRepoBranch"
          },
          "put": {
             "summary": "Update a branch",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Branch",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "repo",
                "branch"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/RepoBranch"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/RepoBranch"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateRepoBranch"
          },
          "patch": {
             "summary": "Update a branch",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Branch",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "repo",
                "branch"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/RepoBranch"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/RepoBranch"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchRepoBranch"
          },
          "delete": {
             "summary": "Remove a branch",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Branch",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "repo",
                "branch"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeRepoBranch"
          }
       },
       "/repo/{connection_id}/commit": {
          "post": {
             "summary": "Create a commit",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "repo",
                "commit"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/RepoCommit"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/RepoCommit"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createRepoCommit"
          },
          "get": {
             "summary": "List all commits",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "repo_id",
                   "in": "query",
                   "required": false,
                   "description": "The repo ID to filter by"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "branch_id",
                   "in": "query",
                   "required": false,
                   "description": "The repo branch ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "repo",
                "commit"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/RepoCommits"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listRepoCommits"
          }
       },
       "/repo/{connection_id}/commit/{id}": {
          "get": {
             "summary": "Retrieve a commit",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Commit",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "repo",
                "commit"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/RepoCommit"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getRepoCommit"
          },
          "put": {
             "summary": "Update a commit",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Commit",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "repo",
                "commit"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/RepoCommit"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/RepoCommit"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateRepoCommit"
          },
          "patch": {
             "summary": "Update a commit",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Commit",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "repo",
                "commit"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/RepoCommit"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/RepoCommit"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchRepoCommit"
          },
          "delete": {
             "summary": "Remove a commit",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Commit",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "repo",
                "commit"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeRepoCommit"
          }
       },
       "/repo/{connection_id}/pullrequest": {
          "post": {
             "summary": "Create a pullrequest",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "repo",
                "pullrequest"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/RepoPullrequest"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/RepoPullrequest"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createRepoPullrequest"
          },
          "get": {
             "summary": "List all pullrequests",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "repo_id",
                   "in": "query",
                   "required": false,
                   "description": "The repo ID to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "repo",
                "pullrequest"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/RepoPullrequests"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listRepoPullrequests"
          }
       },
       "/repo/{connection_id}/pullrequest/{id}": {
          "get": {
             "summary": "Retrieve a pullrequest",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Pullrequest",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "repo",
                "pullrequest"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/RepoPullrequest"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getRepoPullrequest"
          },
          "put": {
             "summary": "Update a pullrequest",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Pullrequest",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "repo",
                "pullrequest"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/RepoPullrequest"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/RepoPullrequest"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateRepoPullrequest"
          },
          "patch": {
             "summary": "Update a pullrequest",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Pullrequest",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "repo",
                "pullrequest"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/RepoPullrequest"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/RepoPullrequest"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchRepoPullrequest"
          },
          "delete": {
             "summary": "Remove a pullrequest",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Pullrequest",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "repo",
                "pullrequest"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeRepoPullrequest"
          }
       },
       "/metadata/{connection_id}/metadata": {
          "post": {
             "summary": "Create a metadata",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "metadata",
                "metadata"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/MetadataMetadata"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/MetadataMetadata"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "createMetadataMetadata"
          },
          "get": {
             "summary": "List all metadatas",
             "parameters": [
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "limit",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "number"
                   },
                   "name": "offset",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "updated_gte",
                   "in": "query",
                   "required": false,
                   "description": "Return only results whose updated date is equal or greater to this value"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "sort",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "order",
                   "in": "query",
                   "required": false
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "query",
                   "in": "query",
                   "required": false,
                   "description": "Query string to search. eg. email address or name"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "type",
                   "in": "query",
                   "required": false,
                   "description": "The type to filter by"
                },
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "metadata",
                "metadata"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/MetadataMetadatas"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "listMetadataMetadatas"
          }
       },
       "/metadata/{connection_id}/metadata/{id}": {
          "get": {
             "summary": "Retrieve a metadata",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Metadata",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "metadata",
                "metadata"
             ],
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/MetadataMetadata"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "getMetadataMetadata"
          },
          "put": {
             "summary": "Update a metadata",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Metadata",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "metadata",
                "metadata"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/MetadataMetadata"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/MetadataMetadata"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "updateMetadataMetadata"
          },
          "patch": {
             "summary": "Update a metadata",
             "parameters": [
                {
                   "schema": {
                      "type": "array",
                      "items": {
                         "type": "string"
                      }
                   },
                   "name": "fields",
                   "in": "query",
                   "required": false,
                   "description": "Comma-delimited fields to return"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "name": "raw",
                   "in": "query",
                   "required": false,
                   "description": "Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar"
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Metadata",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "metadata",
                "metadata"
             ],
             "requestBody": {
                "required": true,
                "content": {
                   "application/json": {
                      "schema": {
                         "$ref": "#/components/schemas/MetadataMetadata"
                      }
                   }
                }
             },
             "responses": {
                "200": {
                   "content": {
                      "application/json": {
                         "schema": {
                            "$ref": "#/components/schemas/MetadataMetadata"
                         }
                      }
                   },
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "patchMetadataMetadata"
          },
          "delete": {
             "summary": "Remove a metadata",
             "parameters": [
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the connection",
                   "name": "connection_id",
                   "in": "path",
                   "required": true
                },
                {
                   "schema": {
                      "type": "string"
                   },
                   "description": "ID of the Metadata",
                   "name": "id",
                   "in": "path",
                   "required": true
                }
             ],
             "tags": [
                "metadata",
                "metadata"
             ],
             "responses": {
                "200": {
                   "description": "Successful"
                },
                "default": {
                   "headers": {
                      "Content-Type": {
                         "required": false,
                         "schema": {
                            "type": "string"
                         }
                      }
                   },
                   "content": {},
                   "description": "Successful"
                }
             },
             "security": [
                {
                   "jwt": []
                }
             ],
             "operationId": "removeMetadataMetadata"
          }
       }
    }
 }